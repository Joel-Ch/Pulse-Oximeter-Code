
try2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013be4  08008010  08008010  00018010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bbf4  0801bbf4  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801bbf4  0801bbf4  0002bbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bbfc  0801bbfc  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bbfc  0801bbfc  0002bbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bc00  0801bc00  0002bc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0801bc04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c10  200001d8  0801bddc  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de8  0801bddc  00030de8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f27  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eaf  00000000  00000000  000461e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  00049098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000722  00000000  00000000  00049b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b39e  00000000  00000000  0004a29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004465  00000000  00000000  00055638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003b30  00000000  00000000  00059aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  0005d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003cff  00000000  00000000  0005d62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000001b8  00000000  00000000  0006132b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ff4 	.word	0x08007ff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007ff4 	.word	0x08007ff4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	arm_rfft_fast_init_f32(&fft_instance, FFT_LENGTH);
 8000f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f52:	4867      	ldr	r0, [pc, #412]	; (80010f0 <main+0x1a8>)
 8000f54:	f003 f8bc 	bl	80040d0 <arm_rfft_fast_init_f32>

	uint8_t MSG[50] = {'\0'};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	222e      	movs	r2, #46	; 0x2e
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 ff2a 	bl	8005dbe <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f000 fb6f 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f8d3 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 f953 	bl	800121c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f76:	f000 f921 	bl	80011bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  float maxFFT = 0;
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  int maxFFTIndex = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]

  HAL_Delay(100);
 8000f84:	2064      	movs	r0, #100	; 0x64
 8000f86:	f000 fbdd 	bl	8001744 <HAL_Delay>
  for (int i = 0; i < FFT_LENGTH; i++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8000f8e:	e035      	b.n	8000ffc <main+0xb4>
	  input_fft[i] = arm_sin_f32(2 * M_PI * frequency * i /SAMPLING_RATE);
 8000f90:	4b58      	ldr	r3, [pc, #352]	; (80010f4 <main+0x1ac>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fad7 	bl	8000548 <__aeabi_f2d>
 8000f9a:	a353      	add	r3, pc, #332	; (adr r3, 80010e8 <main+0x1a0>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fb2a 	bl	80005f8 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4614      	mov	r4, r2
 8000faa:	461d      	mov	r5, r3
 8000fac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000fae:	f7ff fab9 	bl	8000524 <__aeabi_i2d>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	4629      	mov	r1, r5
 8000fba:	f7ff fb1d 	bl	80005f8 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b4b      	ldr	r3, [pc, #300]	; (80010f8 <main+0x1b0>)
 8000fcc:	f7ff fc3e 	bl	800084c <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fde6 	bl	8000ba8 <__aeabi_d2f>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	ee00 3a10 	vmov	s0, r3
 8000fe2:	f003 fe5b 	bl	8004c9c <arm_sin_f32>
 8000fe6:	eef0 7a40 	vmov.f32	s15, s0
 8000fea:	4a44      	ldr	r2, [pc, #272]	; (80010fc <main+0x1b4>)
 8000fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_LENGTH; i++) {
 8000ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8000ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ffe:	2bff      	cmp	r3, #255	; 0xff
 8001000:	ddc6      	ble.n	8000f90 <main+0x48>
  }
  arm_rfft_fast_f32(&fft_instance, input_fft, output_fft, 0);
 8001002:	2300      	movs	r3, #0
 8001004:	4a3e      	ldr	r2, [pc, #248]	; (8001100 <main+0x1b8>)
 8001006:	493d      	ldr	r1, [pc, #244]	; (80010fc <main+0x1b4>)
 8001008:	4839      	ldr	r0, [pc, #228]	; (80010f0 <main+0x1a8>)
 800100a:	f003 f945 	bl	8004298 <arm_rfft_fast_f32>
  arm_cmplx_mag_f32(output_fft, output_fft_mag, FFT_LENGTH/2);
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	493c      	ldr	r1, [pc, #240]	; (8001104 <main+0x1bc>)
 8001012:	483b      	ldr	r0, [pc, #236]	; (8001100 <main+0x1b8>)
 8001014:	f003 fd1e 	bl	8004a54 <arm_cmplx_mag_f32>
  for (int i = 0; i < FFT_LENGTH /2; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
 800101c:	e036      	b.n	800108c <main+0x144>
//	  printf("frequency %f: %f \n", ((float32_t)(i*SAMPLING_RATE)/FFT_LENGTH), output_fft_mag);
	  sprintf(MSG, "frequency %f: %f\n", ((float32_t)(i*SAMPLING_RATE)/FFT_LENGTH), output_fft_mag[i]);
 800101e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001020:	2264      	movs	r2, #100	; 0x64
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001108 <main+0x1c0>
 8001032:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001036:	ee16 0a90 	vmov	r0, s13
 800103a:	f7ff fa85 	bl	8000548 <__aeabi_f2d>
 800103e:	4604      	mov	r4, r0
 8001040:	460d      	mov	r5, r1
 8001042:	4a30      	ldr	r2, [pc, #192]	; (8001104 <main+0x1bc>)
 8001044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa7b 	bl	8000548 <__aeabi_f2d>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	f107 000c 	add.w	r0, r7, #12
 800105a:	e9cd 2300 	strd	r2, r3, [sp]
 800105e:	4622      	mov	r2, r4
 8001060:	462b      	mov	r3, r5
 8001062:	492a      	ldr	r1, [pc, #168]	; (800110c <main+0x1c4>)
 8001064:	f004 fe48 	bl	8005cf8 <siprintf>
	       HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8001068:	f107 010c 	add.w	r1, r7, #12
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	2232      	movs	r2, #50	; 0x32
 8001070:	4827      	ldr	r0, [pc, #156]	; (8001110 <main+0x1c8>)
 8001072:	f002 f9a1 	bl	80033b8 <HAL_UART_Transmit>
	  arm_max_f32(output_fft_mag, FFT_LENGTH, &maxFFT, &maxFFTIndex);
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	f107 0208 	add.w	r2, r7, #8
 800107c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001080:	4820      	ldr	r0, [pc, #128]	; (8001104 <main+0x1bc>)
 8001082:	f002 fef1 	bl	8003e68 <arm_max_f32>
  for (int i = 0; i < FFT_LENGTH /2; i++) {
 8001086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001088:	3301      	adds	r3, #1
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
 800108c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800108e:	2b7f      	cmp	r3, #127	; 0x7f
 8001090:	ddc5      	ble.n	800101e <main+0xd6>
    
  }
  sprintf(MSG, "Max FFT Amplitude: %f at frequency: %f\n", maxFFT, ((float32_t)(maxFFTIndex*SAMPLING_RATE)/FFT_LENGTH));
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa57 	bl	8000548 <__aeabi_f2d>
 800109a:	4604      	mov	r4, r0
 800109c:	460d      	mov	r5, r1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2264      	movs	r2, #100	; 0x64
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001108 <main+0x1c0>
 80010b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010b6:	ee16 0a90 	vmov	r0, s13
 80010ba:	f7ff fa45 	bl	8000548 <__aeabi_f2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	f107 000c 	add.w	r0, r7, #12
 80010c6:	e9cd 2300 	strd	r2, r3, [sp]
 80010ca:	4622      	mov	r2, r4
 80010cc:	462b      	mov	r3, r5
 80010ce:	4911      	ldr	r1, [pc, #68]	; (8001114 <main+0x1cc>)
 80010d0:	f004 fe12 	bl	8005cf8 <siprintf>
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80010d4:	f107 010c 	add.w	r1, r7, #12
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	2232      	movs	r2, #50	; 0x32
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <main+0x1c8>)
 80010de:	f002 f96b 	bl	80033b8 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <main+0x19a>
 80010e4:	f3af 8000 	nop.w
 80010e8:	54442d18 	.word	0x54442d18
 80010ec:	401921fb 	.word	0x401921fb
 80010f0:	20000c7c 	.word	0x20000c7c
 80010f4:	20000000 	.word	0x20000000
 80010f8:	40590000 	.word	0x40590000
 80010fc:	2000027c 	.word	0x2000027c
 8001100:	2000067c 	.word	0x2000067c
 8001104:	20000a7c 	.word	0x20000a7c
 8001108:	43800000 	.word	0x43800000
 800110c:	08008010 	.word	0x08008010
 8001110:	200001f4 	.word	0x200001f4
 8001114:	08008024 	.word	0x08008024

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b096      	sub	sp, #88	; 0x58
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	2244      	movs	r2, #68	; 0x44
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f004 fe49 	bl	8005dbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800113a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800113e:	f000 fddb 	bl	8001cf8 <HAL_PWREx_ControlVoltageScaling>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001148:	f000 f8ce 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001156:	2310      	movs	r3, #16
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115e:	2302      	movs	r3, #2
 8001160:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001166:	230a      	movs	r3, #10
 8001168:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800116a:	2307      	movs	r3, #7
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fe12 	bl	8001da4 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001186:	f000 f8af 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2303      	movs	r3, #3
 8001190:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	2104      	movs	r1, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f9da 	bl	800255c <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ae:	f000 f89b 	bl	80012e8 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3758      	adds	r7, #88	; 0x58
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <MX_USART2_UART_Init+0x5c>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x58>)
 8001200:	f002 f88c 	bl	800331c <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800120a:	f000 f86d 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200001f4 	.word	0x200001f4
 8001218:	40004400 	.word	0x40004400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <MX_GPIO_Init+0xc4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a24      	ldr	r2, [pc, #144]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_GPIO_Init+0xc4>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_GPIO_Init+0xc4>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2120      	movs	r1, #32
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f000 fd07 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <MX_GPIO_Init+0xc8>)
 80012b6:	f000 fb4f 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012ba:	2320      	movs	r3, #32
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f000 fb40 	bl	8001958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000800 	.word	0x48000800

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_MspInit+0x44>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6613      	str	r3, [r2, #96]	; 0x60
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_MspInit+0x44>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_MspInit+0x44>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_MspInit+0x44>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0ac      	sub	sp, #176	; 0xb0
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2288      	movs	r2, #136	; 0x88
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fd2e 	bl	8005dbe <memset>
  if(huart->Instance==USART2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a21      	ldr	r2, [pc, #132]	; (80013ec <HAL_UART_MspInit+0xb0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d13b      	bne.n	80013e4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800136c:	2302      	movs	r3, #2
 800136e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001370:	2300      	movs	r3, #0
 8001372:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fb13 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001384:	f7ff ffb0 	bl	80012e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_UART_MspInit+0xb4>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <HAL_UART_MspInit+0xb4>)
 800138e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001392:	6593      	str	r3, [r2, #88]	; 0x58
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_UART_MspInit+0xb4>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_UART_MspInit+0xb4>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_UART_MspInit+0xb4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_UART_MspInit+0xb4>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013b8:	230c      	movs	r3, #12
 80013ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d0:	2307      	movs	r3, #7
 80013d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f000 faba 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e4:	bf00      	nop
 80013e6:	37b0      	adds	r7, #176	; 0xb0
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40004400 	.word	0x40004400
 80013f0:	40021000 	.word	0x40021000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f960 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_kill>:

int _kill(int pid, int sig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001462:	f004 fcff 	bl	8005e64 <__errno>
 8001466:	4603      	mov	r3, r0
 8001468:	2216      	movs	r2, #22
 800146a:	601a      	str	r2, [r3, #0]
  return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_exit>:

void _exit (int status)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ffe7 	bl	8001458 <_kill>
  while (1) {}    /* Make sure we hang here */
 800148a:	e7fe      	b.n	800148a <_exit+0x12>

0800148c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e00a      	b.n	80014b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800149e:	f3af 8000 	nop.w
 80014a2:	4601      	mov	r1, r0
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	b2ca      	uxtb	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbf0      	blt.n	800149e <_read+0x12>
  }

  return len;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e009      	b.n	80014ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf1      	blt.n	80014d8 <_write+0x12>
  }
  return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_close>:

int _close(int file)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001526:	605a      	str	r2, [r3, #4]
  return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f004 fc64 	bl	8005e64 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20018000 	.word	0x20018000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	20000c94 	.word	0x20000c94
 80015d0:	20000de8 	.word	0x20000de8

080015d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff ffea 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopForever+0x6>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopForever+0xe>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopForever+0x16>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f004 fc23 	bl	8005e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800162a:	f7ff fc8d 	bl	8000f48 <main>

0800162e <LoopForever>:

LoopForever:
    b LoopForever
 800162e:	e7fe      	b.n	800162e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001630:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800163c:	0801bc04 	.word	0x0801bc04
  ldr r2, =_sbss
 8001640:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001644:	20000de8 	.word	0x20000de8

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>
	...

0800164c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_Init+0x3c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_Init+0x3c>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001662:	2003      	movs	r0, #3
 8001664:	f000 f944 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001668:	2000      	movs	r0, #0
 800166a:	f000 f80f 	bl	800168c <HAL_InitTick>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	e001      	b.n	800167e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800167a:	f7ff fe3b 	bl	80012f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800167e:	79fb      	ldrb	r3, [r7, #7]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40022000 	.word	0x40022000

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_InitTick+0x6c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_InitTick+0x70>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_InitTick+0x6c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f941 	bl	800193e <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d809      	bhi.n	80016dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016d0:	f000 f919 	bl	8001906 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_InitTick+0x74>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e007      	b.n	80016ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e004      	b.n	80016ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e001      	b.n	80016ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	20000004 	.word	0x20000004
 8001700:	20000008 	.word	0x20000008

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	2000000c 	.word	0x2000000c
 8001728:	20000c98 	.word	0x20000c98

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000c98 	.word	0x20000c98

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000000c 	.word	0x2000000c

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff47 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff5c 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffb0 	bl	80018ac <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e17f      	b.n	8001c68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8171 	beq.w	8001c62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d005      	beq.n	8001998 <HAL_GPIO_Init+0x40>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d118      	bne.n	8001a38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	f003 0201 	and.w	r2, r3, #1
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d017      	beq.n	8001a74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d123      	bne.n	8001ac8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	6939      	ldr	r1, [r7, #16]
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80ac 	beq.w	8001c62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	4b5f      	ldr	r3, [pc, #380]	; (8001c88 <HAL_GPIO_Init+0x330>)
 8001b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0e:	4a5e      	ldr	r2, [pc, #376]	; (8001c88 <HAL_GPIO_Init+0x330>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6613      	str	r3, [r2, #96]	; 0x60
 8001b16:	4b5c      	ldr	r3, [pc, #368]	; (8001c88 <HAL_GPIO_Init+0x330>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b22:	4a5a      	ldr	r2, [pc, #360]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b4c:	d025      	beq.n	8001b9a <HAL_GPIO_Init+0x242>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4f      	ldr	r2, [pc, #316]	; (8001c90 <HAL_GPIO_Init+0x338>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01f      	beq.n	8001b96 <HAL_GPIO_Init+0x23e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4e      	ldr	r2, [pc, #312]	; (8001c94 <HAL_GPIO_Init+0x33c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x23a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4d      	ldr	r2, [pc, #308]	; (8001c98 <HAL_GPIO_Init+0x340>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x236>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4c      	ldr	r2, [pc, #304]	; (8001c9c <HAL_GPIO_Init+0x344>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x232>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4b      	ldr	r2, [pc, #300]	; (8001ca0 <HAL_GPIO_Init+0x348>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x22e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4a      	ldr	r2, [pc, #296]	; (8001ca4 <HAL_GPIO_Init+0x34c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x22a>
 8001b7e:	2306      	movs	r3, #6
 8001b80:	e00c      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e00a      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b86:	2305      	movs	r3, #5
 8001b88:	e008      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x244>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	f002 0203 	and.w	r2, r2, #3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bac:	4937      	ldr	r1, [pc, #220]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_GPIO_Init+0x350>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bde:	4a32      	ldr	r2, [pc, #200]	; (8001ca8 <HAL_GPIO_Init+0x350>)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001be4:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <HAL_GPIO_Init+0x350>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c08:	4a27      	ldr	r2, [pc, #156]	; (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_GPIO_Init+0x350>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f ae78 	bne.w	8001968 <HAL_GPIO_Init+0x10>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	48000400 	.word	0x48000400
 8001c94:	48000800 	.word	0x48000800
 8001c98:	48000c00 	.word	0x48000c00
 8001c9c:	48001000 	.word	0x48001000
 8001ca0:	48001400 	.word	0x48001400
 8001ca4:	48001800 	.word	0x48001800
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40007000 	.word	0x40007000

08001cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d06:	d130      	bne.n	8001d6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d14:	d038      	beq.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2232      	movs	r2, #50	; 0x32
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0c9b      	lsrs	r3, r3, #18
 8001d38:	3301      	adds	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d3c:	e002      	b.n	8001d44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d50:	d102      	bne.n	8001d58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f2      	bne.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d64:	d110      	bne.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e00f      	b.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d76:	d007      	beq.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	431bde83 	.word	0x431bde83

08001da4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e3ca      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db6:	4b97      	ldr	r3, [pc, #604]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc0:	4b94      	ldr	r3, [pc, #592]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80e4 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_RCC_OscConfig+0x4a>
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	f040 808b 	bne.w	8001efc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	f040 8087 	bne.w	8001efc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dee:	4b89      	ldr	r3, [pc, #548]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_RCC_OscConfig+0x62>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e3a2      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1a      	ldr	r2, [r3, #32]
 8001e0a:	4b82      	ldr	r3, [pc, #520]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d004      	beq.n	8001e20 <HAL_RCC_OscConfig+0x7c>
 8001e16:	4b7f      	ldr	r3, [pc, #508]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e1e:	e005      	b.n	8001e2c <HAL_RCC_OscConfig+0x88>
 8001e20:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d223      	bcs.n	8001e78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fd55 	bl	80028e4 <RCC_SetFlashLatencyFromMSIRange>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e383      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e44:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a72      	ldr	r2, [pc, #456]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b70      	ldr	r3, [pc, #448]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	496d      	ldr	r1, [pc, #436]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e62:	4b6c      	ldr	r3, [pc, #432]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4968      	ldr	r1, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
 8001e76:	e025      	b.n	8001ec4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e78:	4b66      	ldr	r3, [pc, #408]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a65      	ldr	r2, [pc, #404]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b63      	ldr	r3, [pc, #396]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4960      	ldr	r1, [pc, #384]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e96:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	495b      	ldr	r1, [pc, #364]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fd15 	bl	80028e4 <RCC_SetFlashLatencyFromMSIRange>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e343      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ec4:	f000 fc4a 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b52      	ldr	r3, [pc, #328]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	4950      	ldr	r1, [pc, #320]	; (8002018 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	4a4e      	ldr	r2, [pc, #312]	; (800201c <HAL_RCC_OscConfig+0x278>)
 8001ee2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ee4:	4b4e      	ldr	r3, [pc, #312]	; (8002020 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fbcf 	bl	800168c <HAL_InitTick>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d052      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	e327      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d032      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a42      	ldr	r2, [pc, #264]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fc0c 	bl	800172c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc08 	bl	800172c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e310      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a36      	ldr	r2, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4931      	ldr	r1, [pc, #196]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f54:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	492c      	ldr	r1, [pc, #176]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e01a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a29      	ldr	r2, [pc, #164]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f76:	f7ff fbd9 	bl	800172c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fbd5 	bl	800172c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e2dd      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x1da>
 8001f9c:	e000      	b.n	8001fa0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d074      	beq.n	8002096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d005      	beq.n	8001fbe <HAL_RCC_OscConfig+0x21a>
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d10e      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d064      	beq.n	8002094 <HAL_RCC_OscConfig+0x2f0>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d160      	bne.n	8002094 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e2ba      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x24a>
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e026      	b.n	800203c <HAL_RCC_OscConfig+0x298>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff6:	d115      	bne.n	8002024 <HAL_RCC_OscConfig+0x280>
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a05      	ldr	r2, [pc, #20]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a02      	ldr	r2, [pc, #8]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	e014      	b.n	800203c <HAL_RCC_OscConfig+0x298>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	0800804c 	.word	0x0800804c
 800201c:	20000004 	.word	0x20000004
 8002020:	20000008 	.word	0x20000008
 8002024:	4ba0      	ldr	r3, [pc, #640]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a9f      	ldr	r2, [pc, #636]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b9d      	ldr	r3, [pc, #628]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a9c      	ldr	r2, [pc, #624]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff fb72 	bl	800172c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fb6e 	bl	800172c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e276      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205e:	4b92      	ldr	r3, [pc, #584]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x2a8>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7ff fb5e 	bl	800172c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff fb5a 	bl	800172c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e262      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002086:	4b88      	ldr	r3, [pc, #544]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x2d0>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d060      	beq.n	8002164 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_OscConfig+0x310>
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d119      	bne.n	80020e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d116      	bne.n	80020e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b4:	4b7c      	ldr	r3, [pc, #496]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_OscConfig+0x328>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e23f      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	4973      	ldr	r1, [pc, #460]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e0:	e040      	b.n	8002164 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d023      	beq.n	8002132 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ea:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6e      	ldr	r2, [pc, #440]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7ff fb19 	bl	800172c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fe:	f7ff fb15 	bl	800172c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e21d      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002110:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	495f      	ldr	r1, [pc, #380]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
 8002130:	e018      	b.n	8002164 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a5c      	ldr	r2, [pc, #368]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7ff faf5 	bl	800172c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002146:	f7ff faf1 	bl	800172c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e1f9      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002158:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d03c      	beq.n	80021ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01c      	beq.n	80021b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002178:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7ff fad0 	bl	800172c <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7ff facc 	bl	800172c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1d4      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80021a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ef      	beq.n	8002190 <HAL_RCC_OscConfig+0x3ec>
 80021b0:	e01b      	b.n	80021ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80021b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b8:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff fab3 	bl	800172c <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ca:	f7ff faaf 	bl	800172c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1b7      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80021de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ef      	bne.n	80021ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80a6 	beq.w	8002344 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f8:	2300      	movs	r3, #0
 80021fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10d      	bne.n	8002224 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002212:	6593      	str	r3, [r2, #88]	; 0x58
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002220:	2301      	movs	r3, #1
 8002222:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <HAL_RCC_OscConfig+0x508>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d118      	bne.n	8002262 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_OscConfig+0x508>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <HAL_RCC_OscConfig+0x508>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223c:	f7ff fa76 	bl	800172c <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002244:	f7ff fa72 	bl	800172c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e17a      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_RCC_OscConfig+0x508>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <HAL_RCC_OscConfig+0x4d8>
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800227a:	e029      	b.n	80022d0 <HAL_RCC_OscConfig+0x52c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b05      	cmp	r3, #5
 8002282:	d115      	bne.n	80022b0 <HAL_RCC_OscConfig+0x50c>
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <HAL_RCC_OscConfig+0x504>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a4:	e014      	b.n	80022d0 <HAL_RCC_OscConfig+0x52c>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
 80022b0:	4b9c      	ldr	r3, [pc, #624]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	4a9b      	ldr	r2, [pc, #620]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c0:	4b98      	ldr	r3, [pc, #608]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	4a97      	ldr	r2, [pc, #604]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80022c8:	f023 0304 	bic.w	r3, r3, #4
 80022cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d016      	beq.n	8002306 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7ff fa28 	bl	800172c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7ff fa24 	bl	800172c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e12a      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f6:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ed      	beq.n	80022e0 <HAL_RCC_OscConfig+0x53c>
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7ff fa11 	bl	800172c <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7ff fa0d 	bl	800172c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e113      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002324:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ed      	bne.n	800230e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002332:	7ffb      	ldrb	r3, [r7, #31]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002338:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	4a79      	ldr	r2, [pc, #484]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 800233e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002342:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80fe 	beq.w	800254a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	2b02      	cmp	r3, #2
 8002354:	f040 80d0 	bne.w	80024f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002358:	4b72      	ldr	r3, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0203 	and.w	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	429a      	cmp	r2, r3
 800236a:	d130      	bne.n	80023ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	3b01      	subs	r3, #1
 8002378:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d127      	bne.n	80023ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002388:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d11f      	bne.n	80023ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002398:	2a07      	cmp	r2, #7
 800239a:	bf14      	ite	ne
 800239c:	2201      	movne	r2, #1
 800239e:	2200      	moveq	r2, #0
 80023a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d113      	bne.n	80023ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	3b01      	subs	r3, #1
 80023c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d06e      	beq.n	80024ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	d069      	beq.n	80024a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023d4:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0ad      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023f0:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a4b      	ldr	r2, [pc, #300]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80023f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023fc:	f7ff f996 	bl	800172c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7ff f992 	bl	800172c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e09a      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002416:	4b43      	ldr	r3, [pc, #268]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002422:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_RCC_OscConfig+0x784>)
 8002428:	4013      	ands	r3, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002432:	3a01      	subs	r2, #1
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800243c:	0212      	lsls	r2, r2, #8
 800243e:	4311      	orrs	r1, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002444:	0852      	lsrs	r2, r2, #1
 8002446:	3a01      	subs	r2, #1
 8002448:	0552      	lsls	r2, r2, #21
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002450:	0852      	lsrs	r2, r2, #1
 8002452:	3a01      	subs	r2, #1
 8002454:	0652      	lsls	r2, r2, #25
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800245c:	0912      	lsrs	r2, r2, #4
 800245e:	0452      	lsls	r2, r2, #17
 8002460:	430a      	orrs	r2, r1
 8002462:	4930      	ldr	r1, [pc, #192]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 8002464:	4313      	orrs	r3, r2
 8002466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2d      	ldr	r2, [pc, #180]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a2a      	ldr	r2, [pc, #168]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 800247a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002480:	f7ff f954 	bl	800172c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7ff f950 	bl	800172c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e058      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249a:	4b22      	ldr	r3, [pc, #136]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a6:	e050      	b.n	800254a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e04f      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d148      	bne.n	800254a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a19      	ldr	r2, [pc, #100]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024d0:	f7ff f92c 	bl	800172c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7ff f928 	bl	800172c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e030      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x734>
 80024f6:	e028      	b.n	800254a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d023      	beq.n	8002546 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_RCC_OscConfig+0x780>)
 8002504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7ff f90f 	bl	800172c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	e00c      	b.n	800252c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff f90b 	bl	800172c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d905      	bls.n	800252c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e013      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
 8002524:	40021000 	.word	0x40021000
 8002528:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ec      	bne.n	8002512 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4905      	ldr	r1, [pc, #20]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_OscConfig+0x7b4>)
 8002540:	4013      	ands	r3, r2
 8002542:	60cb      	str	r3, [r1, #12]
 8002544:	e001      	b.n	800254a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	feeefffc 	.word	0xfeeefffc

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0e7      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b75      	ldr	r3, [pc, #468]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d910      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4970      	ldr	r1, [pc, #448]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b6e      	ldr	r3, [pc, #440]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cf      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d010      	beq.n	80025ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b66      	ldr	r3, [pc, #408]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d908      	bls.n	80025ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4960      	ldr	r1, [pc, #384]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d04c      	beq.n	8002674 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e2:	4b5a      	ldr	r3, [pc, #360]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d121      	bne.n	8002632 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0a6      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e09a      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002612:	4b4e      	ldr	r3, [pc, #312]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e08e      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e086      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002632:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4943      	ldr	r1, [pc, #268]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7ff f872 	bl	800172c <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	e00a      	b.n	8002662 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264c:	f7ff f86e 	bl	800172c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e06e      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b3a      	ldr	r3, [pc, #232]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 020c 	and.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1eb      	bne.n	800264c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d010      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268c:	429a      	cmp	r2, r3
 800268e:	d208      	bcs.n	80026a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002690:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	492b      	ldr	r1, [pc, #172]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d210      	bcs.n	80026d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 0207 	bic.w	r2, r3, #7
 80026b8:	4923      	ldr	r1, [pc, #140]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e036      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	4918      	ldr	r1, [pc, #96]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4910      	ldr	r1, [pc, #64]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002710:	f000 f824 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	490b      	ldr	r1, [pc, #44]	; (8002750 <HAL_RCC_ClockConfig+0x1f4>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1f8>)
 800272e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1fc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe ffa9 	bl	800168c <HAL_InitTick>
 800273a:	4603      	mov	r3, r0
 800273c:	72fb      	strb	r3, [r7, #11]

  return status;
 800273e:	7afb      	ldrb	r3, [r7, #11]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40022000 	.word	0x40022000
 800274c:	40021000 	.word	0x40021000
 8002750:	0800804c 	.word	0x0800804c
 8002754:	20000004 	.word	0x20000004
 8002758:	20000008 	.word	0x20000008

0800275c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x34>
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d121      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d11e      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002790:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d107      	bne.n	80027ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 800279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e005      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027ac:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027b8:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d102      	bne.n	80027da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027d4:	4b25      	ldr	r3, [pc, #148]	; (800286c <HAL_RCC_GetSysClockFreq+0x110>)
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	e004      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_RCC_GetSysClockFreq+0x114>)
 80027e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d134      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0xa6>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d003      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0xac>
 8002800:	e005      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_RCC_GetSysClockFreq+0x110>)
 8002804:	617b      	str	r3, [r7, #20]
      break;
 8002806:	e005      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_GetSysClockFreq+0x114>)
 800280a:	617b      	str	r3, [r7, #20]
      break;
 800280c:	e002      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	617b      	str	r3, [r7, #20]
      break;
 8002812:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	3301      	adds	r3, #1
 8002820:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	fb03 f202 	mul.w	r2, r3, r2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	0e5b      	lsrs	r3, r3, #25
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	3301      	adds	r3, #1
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002854:	69bb      	ldr	r3, [r7, #24]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	08008064 	.word	0x08008064
 800286c:	00f42400 	.word	0x00f42400
 8002870:	007a1200 	.word	0x007a1200

08002874 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_RCC_GetHCLKFreq+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002890:	f7ff fff0 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4904      	ldr	r1, [pc, #16]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	0800805c 	.word	0x0800805c

080028b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028bc:	f7ff ffda 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0adb      	lsrs	r3, r3, #11
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4904      	ldr	r1, [pc, #16]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	0800805c 	.word	0x0800805c

080028e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028f0:	4b2a      	ldr	r3, [pc, #168]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028fc:	f7ff f9ee 	bl	8001cdc <HAL_PWREx_GetVoltageRange>
 8002900:	6178      	str	r0, [r7, #20]
 8002902:	e014      	b.n	800292e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	4a24      	ldr	r2, [pc, #144]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	6593      	str	r3, [r2, #88]	; 0x58
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800291c:	f7ff f9de 	bl	8001cdc <HAL_PWREx_GetVoltageRange>
 8002920:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	4a1d      	ldr	r2, [pc, #116]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002934:	d10b      	bne.n	800294e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b80      	cmp	r3, #128	; 0x80
 800293a:	d919      	bls.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2ba0      	cmp	r3, #160	; 0xa0
 8002940:	d902      	bls.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002942:	2302      	movs	r3, #2
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	e013      	b.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002948:	2301      	movs	r3, #1
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	e010      	b.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b80      	cmp	r3, #128	; 0x80
 8002952:	d902      	bls.n	800295a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002954:	2303      	movs	r3, #3
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	e00a      	b.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d102      	bne.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002960:	2302      	movs	r3, #2
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	e004      	b.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b70      	cmp	r3, #112	; 0x70
 800296a:	d101      	bne.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800296c:	2301      	movs	r3, #1
 800296e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0207 	bic.w	r2, r3, #7
 8002978:	4909      	ldr	r1, [pc, #36]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	40022000 	.word	0x40022000

080029a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029ac:	2300      	movs	r3, #0
 80029ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d041      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029c8:	d02a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ce:	d824      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029d4:	d008      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029da:	d81e      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e4:	d010      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029e6:	e018      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029e8:	4b86      	ldr	r3, [pc, #536]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a85      	ldr	r2, [pc, #532]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f4:	e015      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fabb 	bl	8002f78 <RCCEx_PLLSAI1_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a06:	e00c      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3320      	adds	r3, #32
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fba6 	bl	8003160 <RCCEx_PLLSAI2_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a18:	e003      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a1e:	e000      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10b      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a28:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a36:	4973      	ldr	r1, [pc, #460]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a3e:	e001      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d041      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a58:	d02a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a5e:	d824      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a64:	d008      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a6a:	d81e      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a74:	d010      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a76:	e018      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a78:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a61      	ldr	r2, [pc, #388]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a84:	e015      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fa73 	bl	8002f78 <RCCEx_PLLSAI1_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a96:	e00c      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3320      	adds	r3, #32
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fb5e 	bl	8003160 <RCCEx_PLLSAI2_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aa8:	e003      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	74fb      	strb	r3, [r7, #19]
      break;
 8002aae:	e000      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ab8:	4b52      	ldr	r3, [pc, #328]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac6:	494f      	ldr	r1, [pc, #316]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ace:	e001      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80a0 	beq.w	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00d      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afc:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	4a40      	ldr	r2, [pc, #256]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6593      	str	r3, [r2, #88]	; 0x58
 8002b08:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b14:	2301      	movs	r3, #1
 8002b16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b18:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a3a      	ldr	r2, [pc, #232]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b24:	f7fe fe02 	bl	800172c <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b2a:	e009      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2c:	f7fe fdfe 	bl	800172c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d902      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b3e:	e005      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ef      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d15c      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b52:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01f      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d019      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b9c:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe fdbd 	bl	800172c <HAL_GetTick>
 8002bb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb4:	e00b      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe fdb9 	bl	800172c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d902      	bls.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	74fb      	strb	r3, [r7, #19]
            break;
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ec      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf2:	4904      	ldr	r1, [pc, #16]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bfa:	e009      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	74bb      	strb	r3, [r7, #18]
 8002c00:	e006      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c10:	7c7b      	ldrb	r3, [r7, #17]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4b9e      	ldr	r3, [pc, #632]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	4a9d      	ldr	r2, [pc, #628]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c2e:	4b98      	ldr	r3, [pc, #608]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f023 0203 	bic.w	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	4994      	ldr	r1, [pc, #592]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c50:	4b8f      	ldr	r3, [pc, #572]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f023 020c 	bic.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	498c      	ldr	r1, [pc, #560]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c72:	4b87      	ldr	r3, [pc, #540]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	4983      	ldr	r1, [pc, #524]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c94:	4b7e      	ldr	r3, [pc, #504]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	497b      	ldr	r1, [pc, #492]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cb6:	4b76      	ldr	r3, [pc, #472]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc4:	4972      	ldr	r1, [pc, #456]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cd8:	4b6d      	ldr	r3, [pc, #436]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	496a      	ldr	r1, [pc, #424]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cfa:	4b65      	ldr	r3, [pc, #404]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	4961      	ldr	r1, [pc, #388]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d1c:	4b5c      	ldr	r3, [pc, #368]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	4959      	ldr	r1, [pc, #356]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d3e:	4b54      	ldr	r3, [pc, #336]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4c:	4950      	ldr	r1, [pc, #320]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d60:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	4948      	ldr	r1, [pc, #288]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d82:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	493f      	ldr	r1, [pc, #252]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d028      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db2:	4937      	ldr	r1, [pc, #220]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc4:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4a31      	ldr	r2, [pc, #196]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dce:	60d3      	str	r3, [r2, #12]
 8002dd0:	e011      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f8c8 	bl	8002f78 <RCCEx_PLLSAI1_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d028      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	491f      	ldr	r1, [pc, #124]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e20:	d106      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2c:	60d3      	str	r3, [r2, #12]
 8002e2e:	e011      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f899 	bl	8002f78 <RCCEx_PLLSAI1_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02b      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	4908      	ldr	r1, [pc, #32]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7e:	d109      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a02      	ldr	r2, [pc, #8]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8a:	60d3      	str	r3, [r2, #12]
 8002e8c:	e014      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f867 	bl	8002f78 <RCCEx_PLLSAI1_Config>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eae:	7cfb      	ldrb	r3, [r7, #19]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d02f      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed2:	4928      	ldr	r1, [pc, #160]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ee2:	d10d      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	2102      	movs	r1, #2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f844 	bl	8002f78 <RCCEx_PLLSAI1_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d014      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	74bb      	strb	r3, [r7, #18]
 8002efe:	e011      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3320      	adds	r3, #32
 8002f0e:	2102      	movs	r1, #2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 f925 	bl	8003160 <RCCEx_PLLSAI2_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3e:	490d      	ldr	r1, [pc, #52]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f62:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000

08002f78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f86:	4b75      	ldr	r3, [pc, #468]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d018      	beq.n	8002fc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f92:	4b72      	ldr	r3, [pc, #456]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0203 	and.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d10d      	bne.n	8002fbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002faa:	4b6c      	ldr	r3, [pc, #432]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d047      	beq.n	800304e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	e044      	b.n	800304e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d018      	beq.n	8002ffe <RCCEx_PLLSAI1_Config+0x86>
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d825      	bhi.n	800301c <RCCEx_PLLSAI1_Config+0xa4>
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d002      	beq.n	8002fda <RCCEx_PLLSAI1_Config+0x62>
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d009      	beq.n	8002fec <RCCEx_PLLSAI1_Config+0x74>
 8002fd8:	e020      	b.n	800301c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fda:	4b60      	ldr	r3, [pc, #384]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d11d      	bne.n	8003022 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fea:	e01a      	b.n	8003022 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fec:	4b5b      	ldr	r3, [pc, #364]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d116      	bne.n	8003026 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffc:	e013      	b.n	8003026 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ffe:	4b57      	ldr	r3, [pc, #348]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800300a:	4b54      	ldr	r3, [pc, #336]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800301a:	e006      	b.n	800302a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      break;
 8003020:	e004      	b.n	800302c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003022:	bf00      	nop
 8003024:	e002      	b.n	800302c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302a:	bf00      	nop
    }

    if(status == HAL_OK)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003032:	4b4a      	ldr	r3, [pc, #296]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	430b      	orrs	r3, r1
 8003048:	4944      	ldr	r1, [pc, #272]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d17d      	bne.n	8003150 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003054:	4b41      	ldr	r3, [pc, #260]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a40      	ldr	r2, [pc, #256]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 800305a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800305e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003060:	f7fe fb64 	bl	800172c <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003066:	e009      	b.n	800307c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003068:	f7fe fb60 	bl	800172c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d902      	bls.n	800307c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	73fb      	strb	r3, [r7, #15]
        break;
 800307a:	e005      	b.n	8003088 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800307c:	4b37      	ldr	r3, [pc, #220]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ef      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d160      	bne.n	8003150 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d111      	bne.n	80030b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003094:	4b31      	ldr	r3, [pc, #196]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800309c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6892      	ldr	r2, [r2, #8]
 80030a4:	0211      	lsls	r1, r2, #8
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68d2      	ldr	r2, [r2, #12]
 80030aa:	0912      	lsrs	r2, r2, #4
 80030ac:	0452      	lsls	r2, r2, #17
 80030ae:	430a      	orrs	r2, r1
 80030b0:	492a      	ldr	r1, [pc, #168]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	610b      	str	r3, [r1, #16]
 80030b6:	e027      	b.n	8003108 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d112      	bne.n	80030e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6892      	ldr	r2, [r2, #8]
 80030ce:	0211      	lsls	r1, r2, #8
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6912      	ldr	r2, [r2, #16]
 80030d4:	0852      	lsrs	r2, r2, #1
 80030d6:	3a01      	subs	r2, #1
 80030d8:	0552      	lsls	r2, r2, #21
 80030da:	430a      	orrs	r2, r1
 80030dc:	491f      	ldr	r1, [pc, #124]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	610b      	str	r3, [r1, #16]
 80030e2:	e011      	b.n	8003108 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6892      	ldr	r2, [r2, #8]
 80030f4:	0211      	lsls	r1, r2, #8
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6952      	ldr	r2, [r2, #20]
 80030fa:	0852      	lsrs	r2, r2, #1
 80030fc:	3a01      	subs	r2, #1
 80030fe:	0652      	lsls	r2, r2, #25
 8003100:	430a      	orrs	r2, r1
 8003102:	4916      	ldr	r1, [pc, #88]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 800310e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003112:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fe fb0a 	bl	800172c <HAL_GetTick>
 8003118:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800311a:	e009      	b.n	8003130 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800311c:	f7fe fb06 	bl	800172c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d902      	bls.n	8003130 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	73fb      	strb	r3, [r7, #15]
          break;
 800312e:	e005      	b.n	800313c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ef      	beq.n	800311c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	4904      	ldr	r1, [pc, #16]	; (800315c <RCCEx_PLLSAI1_Config+0x1e4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000

08003160 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800316e:	4b6a      	ldr	r3, [pc, #424]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d018      	beq.n	80031ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800317a:	4b67      	ldr	r3, [pc, #412]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0203 	and.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d10d      	bne.n	80031a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
       ||
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003192:	4b61      	ldr	r3, [pc, #388]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
       ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d047      	beq.n	8003236 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e044      	b.n	8003236 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d018      	beq.n	80031e6 <RCCEx_PLLSAI2_Config+0x86>
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d825      	bhi.n	8003204 <RCCEx_PLLSAI2_Config+0xa4>
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d002      	beq.n	80031c2 <RCCEx_PLLSAI2_Config+0x62>
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d009      	beq.n	80031d4 <RCCEx_PLLSAI2_Config+0x74>
 80031c0:	e020      	b.n	8003204 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031c2:	4b55      	ldr	r3, [pc, #340]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11d      	bne.n	800320a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d2:	e01a      	b.n	800320a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d116      	bne.n	800320e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e4:	e013      	b.n	800320e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031e6:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10f      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031f2:	4b49      	ldr	r3, [pc, #292]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003202:	e006      	b.n	8003212 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      break;
 8003208:	e004      	b.n	8003214 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800320a:	bf00      	nop
 800320c:	e002      	b.n	8003214 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003212:	bf00      	nop
    }

    if(status == HAL_OK)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	430b      	orrs	r3, r1
 8003230:	4939      	ldr	r1, [pc, #228]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003232:	4313      	orrs	r3, r2
 8003234:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d167      	bne.n	800330c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800323c:	4b36      	ldr	r3, [pc, #216]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a35      	ldr	r2, [pc, #212]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003248:	f7fe fa70 	bl	800172c <HAL_GetTick>
 800324c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800324e:	e009      	b.n	8003264 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003250:	f7fe fa6c 	bl	800172c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d902      	bls.n	8003264 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	73fb      	strb	r3, [r7, #15]
        break;
 8003262:	e005      	b.n	8003270 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003264:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ef      	bne.n	8003250 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d14a      	bne.n	800330c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d111      	bne.n	80032a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800327c:	4b26      	ldr	r3, [pc, #152]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6892      	ldr	r2, [r2, #8]
 800328c:	0211      	lsls	r1, r2, #8
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68d2      	ldr	r2, [r2, #12]
 8003292:	0912      	lsrs	r2, r2, #4
 8003294:	0452      	lsls	r2, r2, #17
 8003296:	430a      	orrs	r2, r1
 8003298:	491f      	ldr	r1, [pc, #124]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800329a:	4313      	orrs	r3, r2
 800329c:	614b      	str	r3, [r1, #20]
 800329e:	e011      	b.n	80032c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6892      	ldr	r2, [r2, #8]
 80032b0:	0211      	lsls	r1, r2, #8
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6912      	ldr	r2, [r2, #16]
 80032b6:	0852      	lsrs	r2, r2, #1
 80032b8:	3a01      	subs	r2, #1
 80032ba:	0652      	lsls	r2, r2, #25
 80032bc:	430a      	orrs	r2, r1
 80032be:	4916      	ldr	r1, [pc, #88]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a13      	ldr	r2, [pc, #76]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe fa2c 	bl	800172c <HAL_GetTick>
 80032d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032d6:	e009      	b.n	80032ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032d8:	f7fe fa28 	bl	800172c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d902      	bls.n	80032ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	73fb      	strb	r3, [r7, #15]
          break;
 80032ea:	e005      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ef      	beq.n	80032d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	4904      	ldr	r1, [pc, #16]	; (8003318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003308:	4313      	orrs	r3, r2
 800330a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000

0800331c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e040      	b.n	80033b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fffc 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb6a 	bl	8003a3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f8af 	bl	80034cc <UART_SetConfig>
 800336e:	4603      	mov	r3, r0
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e01b      	b.n	80033b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fbe9 	bl	8003b80 <UART_CheckIdleState>
 80033ae:	4603      	mov	r3, r0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d178      	bne.n	80034c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_Transmit+0x24>
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e071      	b.n	80034c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2221      	movs	r2, #33	; 0x21
 80033ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ee:	f7fe f99d 	bl	800172c <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	d108      	bne.n	8003420 <HAL_UART_Transmit+0x68>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e003      	b.n	8003428 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003428:	e030      	b.n	800348c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fc4b 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e03c      	b.n	80034c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800345c:	b292      	uxth	r2, r2
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	3302      	adds	r3, #2
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e008      	b.n	800347a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	b292      	uxth	r2, r2
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	3301      	adds	r3, #1
 8003478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1c8      	bne.n	800342a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2200      	movs	r2, #0
 80034a0:	2140      	movs	r1, #64	; 0x40
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fc14 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e005      	b.n	80034c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d0:	b08a      	sub	sp, #40	; 0x28
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4ba4      	ldr	r3, [pc, #656]	; (800378c <UART_SetConfig+0x2c0>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003504:	430b      	orrs	r3, r1
 8003506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a99      	ldr	r2, [pc, #612]	; (8003790 <UART_SetConfig+0x2c4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	4313      	orrs	r3, r2
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	430a      	orrs	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a90      	ldr	r2, [pc, #576]	; (8003794 <UART_SetConfig+0x2c8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d126      	bne.n	80035a4 <UART_SetConfig+0xd8>
 8003556:	4b90      	ldr	r3, [pc, #576]	; (8003798 <UART_SetConfig+0x2cc>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b03      	cmp	r3, #3
 8003562:	d81b      	bhi.n	800359c <UART_SetConfig+0xd0>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <UART_SetConfig+0xa0>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	0800357d 	.word	0x0800357d
 8003570:	0800358d 	.word	0x0800358d
 8003574:	08003585 	.word	0x08003585
 8003578:	08003595 	.word	0x08003595
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e116      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003584:	2302      	movs	r3, #2
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e112      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800358c:	2304      	movs	r3, #4
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e10e      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003594:	2308      	movs	r3, #8
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e10a      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800359c:	2310      	movs	r3, #16
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e106      	b.n	80037b2 <UART_SetConfig+0x2e6>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a7c      	ldr	r2, [pc, #496]	; (800379c <UART_SetConfig+0x2d0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d138      	bne.n	8003620 <UART_SetConfig+0x154>
 80035ae:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <UART_SetConfig+0x2cc>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d82d      	bhi.n	8003618 <UART_SetConfig+0x14c>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <UART_SetConfig+0xf8>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035f9 	.word	0x080035f9
 80035c8:	08003619 	.word	0x08003619
 80035cc:	08003619 	.word	0x08003619
 80035d0:	08003619 	.word	0x08003619
 80035d4:	08003609 	.word	0x08003609
 80035d8:	08003619 	.word	0x08003619
 80035dc:	08003619 	.word	0x08003619
 80035e0:	08003619 	.word	0x08003619
 80035e4:	08003601 	.word	0x08003601
 80035e8:	08003619 	.word	0x08003619
 80035ec:	08003619 	.word	0x08003619
 80035f0:	08003619 	.word	0x08003619
 80035f4:	08003611 	.word	0x08003611
 80035f8:	2300      	movs	r3, #0
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fe:	e0d8      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003600:	2302      	movs	r3, #2
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003606:	e0d4      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003608:	2304      	movs	r3, #4
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360e:	e0d0      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003610:	2308      	movs	r3, #8
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e0cc      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003618:	2310      	movs	r3, #16
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e0c8      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a5e      	ldr	r2, [pc, #376]	; (80037a0 <UART_SetConfig+0x2d4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d125      	bne.n	8003676 <UART_SetConfig+0x1aa>
 800362a:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <UART_SetConfig+0x2cc>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003634:	2b30      	cmp	r3, #48	; 0x30
 8003636:	d016      	beq.n	8003666 <UART_SetConfig+0x19a>
 8003638:	2b30      	cmp	r3, #48	; 0x30
 800363a:	d818      	bhi.n	800366e <UART_SetConfig+0x1a2>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d00a      	beq.n	8003656 <UART_SetConfig+0x18a>
 8003640:	2b20      	cmp	r3, #32
 8003642:	d814      	bhi.n	800366e <UART_SetConfig+0x1a2>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <UART_SetConfig+0x182>
 8003648:	2b10      	cmp	r3, #16
 800364a:	d008      	beq.n	800365e <UART_SetConfig+0x192>
 800364c:	e00f      	b.n	800366e <UART_SetConfig+0x1a2>
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003654:	e0ad      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003656:	2302      	movs	r3, #2
 8003658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365c:	e0a9      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800365e:	2304      	movs	r3, #4
 8003660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003664:	e0a5      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003666:	2308      	movs	r3, #8
 8003668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366c:	e0a1      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800366e:	2310      	movs	r3, #16
 8003670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003674:	e09d      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a4a      	ldr	r2, [pc, #296]	; (80037a4 <UART_SetConfig+0x2d8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d125      	bne.n	80036cc <UART_SetConfig+0x200>
 8003680:	4b45      	ldr	r3, [pc, #276]	; (8003798 <UART_SetConfig+0x2cc>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800368a:	2bc0      	cmp	r3, #192	; 0xc0
 800368c:	d016      	beq.n	80036bc <UART_SetConfig+0x1f0>
 800368e:	2bc0      	cmp	r3, #192	; 0xc0
 8003690:	d818      	bhi.n	80036c4 <UART_SetConfig+0x1f8>
 8003692:	2b80      	cmp	r3, #128	; 0x80
 8003694:	d00a      	beq.n	80036ac <UART_SetConfig+0x1e0>
 8003696:	2b80      	cmp	r3, #128	; 0x80
 8003698:	d814      	bhi.n	80036c4 <UART_SetConfig+0x1f8>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <UART_SetConfig+0x1d8>
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d008      	beq.n	80036b4 <UART_SetConfig+0x1e8>
 80036a2:	e00f      	b.n	80036c4 <UART_SetConfig+0x1f8>
 80036a4:	2300      	movs	r3, #0
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036aa:	e082      	b.n	80037b2 <UART_SetConfig+0x2e6>
 80036ac:	2302      	movs	r3, #2
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b2:	e07e      	b.n	80037b2 <UART_SetConfig+0x2e6>
 80036b4:	2304      	movs	r3, #4
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ba:	e07a      	b.n	80037b2 <UART_SetConfig+0x2e6>
 80036bc:	2308      	movs	r3, #8
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e076      	b.n	80037b2 <UART_SetConfig+0x2e6>
 80036c4:	2310      	movs	r3, #16
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e072      	b.n	80037b2 <UART_SetConfig+0x2e6>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a35      	ldr	r2, [pc, #212]	; (80037a8 <UART_SetConfig+0x2dc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d12a      	bne.n	800372c <UART_SetConfig+0x260>
 80036d6:	4b30      	ldr	r3, [pc, #192]	; (8003798 <UART_SetConfig+0x2cc>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e4:	d01a      	beq.n	800371c <UART_SetConfig+0x250>
 80036e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ea:	d81b      	bhi.n	8003724 <UART_SetConfig+0x258>
 80036ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f0:	d00c      	beq.n	800370c <UART_SetConfig+0x240>
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f6:	d815      	bhi.n	8003724 <UART_SetConfig+0x258>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <UART_SetConfig+0x238>
 80036fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003700:	d008      	beq.n	8003714 <UART_SetConfig+0x248>
 8003702:	e00f      	b.n	8003724 <UART_SetConfig+0x258>
 8003704:	2300      	movs	r3, #0
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e052      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800370c:	2302      	movs	r3, #2
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003712:	e04e      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003714:	2304      	movs	r3, #4
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e04a      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800371c:	2308      	movs	r3, #8
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e046      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003724:	2310      	movs	r3, #16
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e042      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a17      	ldr	r2, [pc, #92]	; (8003790 <UART_SetConfig+0x2c4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d13a      	bne.n	80037ac <UART_SetConfig+0x2e0>
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <UART_SetConfig+0x2cc>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003744:	d01a      	beq.n	800377c <UART_SetConfig+0x2b0>
 8003746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800374a:	d81b      	bhi.n	8003784 <UART_SetConfig+0x2b8>
 800374c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003750:	d00c      	beq.n	800376c <UART_SetConfig+0x2a0>
 8003752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003756:	d815      	bhi.n	8003784 <UART_SetConfig+0x2b8>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <UART_SetConfig+0x298>
 800375c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003760:	d008      	beq.n	8003774 <UART_SetConfig+0x2a8>
 8003762:	e00f      	b.n	8003784 <UART_SetConfig+0x2b8>
 8003764:	2300      	movs	r3, #0
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376a:	e022      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800376c:	2302      	movs	r3, #2
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003772:	e01e      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003774:	2304      	movs	r3, #4
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377a:	e01a      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800377c:	2308      	movs	r3, #8
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e016      	b.n	80037b2 <UART_SetConfig+0x2e6>
 8003784:	2310      	movs	r3, #16
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378a:	e012      	b.n	80037b2 <UART_SetConfig+0x2e6>
 800378c:	efff69f3 	.word	0xefff69f3
 8003790:	40008000 	.word	0x40008000
 8003794:	40013800 	.word	0x40013800
 8003798:	40021000 	.word	0x40021000
 800379c:	40004400 	.word	0x40004400
 80037a0:	40004800 	.word	0x40004800
 80037a4:	40004c00 	.word	0x40004c00
 80037a8:	40005000 	.word	0x40005000
 80037ac:	2310      	movs	r3, #16
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a9f      	ldr	r2, [pc, #636]	; (8003a34 <UART_SetConfig+0x568>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d17a      	bne.n	80038b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d824      	bhi.n	800380e <UART_SetConfig+0x342>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <UART_SetConfig+0x300>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	080037f1 	.word	0x080037f1
 80037d0:	0800380f 	.word	0x0800380f
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	0800380f 	.word	0x0800380f
 80037dc:	080037ff 	.word	0x080037ff
 80037e0:	0800380f 	.word	0x0800380f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800380f 	.word	0x0800380f
 80037ec:	08003807 	.word	0x08003807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7ff f84c 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 80037f4:	61f8      	str	r0, [r7, #28]
        break;
 80037f6:	e010      	b.n	800381a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f8:	4b8f      	ldr	r3, [pc, #572]	; (8003a38 <UART_SetConfig+0x56c>)
 80037fa:	61fb      	str	r3, [r7, #28]
        break;
 80037fc:	e00d      	b.n	800381a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fe:	f7fe ffad 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8003802:	61f8      	str	r0, [r7, #28]
        break;
 8003804:	e009      	b.n	800381a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380a:	61fb      	str	r3, [r7, #28]
        break;
 800380c:	e005      	b.n	800381a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80fb 	beq.w	8003a18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	429a      	cmp	r2, r3
 8003830:	d305      	bcc.n	800383e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	429a      	cmp	r2, r3
 800383c:	d903      	bls.n	8003846 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003844:	e0e8      	b.n	8003a18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	2200      	movs	r2, #0
 800384a:	461c      	mov	r4, r3
 800384c:	4615      	mov	r5, r2
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	022b      	lsls	r3, r5, #8
 8003858:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800385c:	0222      	lsls	r2, r4, #8
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	6849      	ldr	r1, [r1, #4]
 8003862:	0849      	lsrs	r1, r1, #1
 8003864:	2000      	movs	r0, #0
 8003866:	4688      	mov	r8, r1
 8003868:	4681      	mov	r9, r0
 800386a:	eb12 0a08 	adds.w	sl, r2, r8
 800386e:	eb43 0b09 	adc.w	fp, r3, r9
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003880:	4650      	mov	r0, sl
 8003882:	4659      	mov	r1, fp
 8003884:	f7fd f9e0 	bl	8000c48 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4613      	mov	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003896:	d308      	bcc.n	80038aa <UART_SetConfig+0x3de>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800389e:	d204      	bcs.n	80038aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e0b6      	b.n	8003a18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038b0:	e0b2      	b.n	8003a18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	d15e      	bne.n	800397a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d828      	bhi.n	8003916 <UART_SetConfig+0x44a>
 80038c4:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <UART_SetConfig+0x400>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	080038f1 	.word	0x080038f1
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	08003901 	.word	0x08003901
 80038d8:	08003917 	.word	0x08003917
 80038dc:	08003907 	.word	0x08003907
 80038e0:	08003917 	.word	0x08003917
 80038e4:	08003917 	.word	0x08003917
 80038e8:	08003917 	.word	0x08003917
 80038ec:	0800390f 	.word	0x0800390f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f0:	f7fe ffcc 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 80038f4:	61f8      	str	r0, [r7, #28]
        break;
 80038f6:	e014      	b.n	8003922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f8:	f7fe ffde 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 80038fc:	61f8      	str	r0, [r7, #28]
        break;
 80038fe:	e010      	b.n	8003922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003900:	4b4d      	ldr	r3, [pc, #308]	; (8003a38 <UART_SetConfig+0x56c>)
 8003902:	61fb      	str	r3, [r7, #28]
        break;
 8003904:	e00d      	b.n	8003922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003906:	f7fe ff29 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800390a:	61f8      	str	r0, [r7, #28]
        break;
 800390c:	e009      	b.n	8003922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003912:	61fb      	str	r3, [r7, #28]
        break;
 8003914:	e005      	b.n	8003922 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d077      	beq.n	8003a18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005a      	lsls	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	441a      	add	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b0f      	cmp	r3, #15
 8003942:	d916      	bls.n	8003972 <UART_SetConfig+0x4a6>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d212      	bcs.n	8003972 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	b29b      	uxth	r3, r3
 8003950:	f023 030f 	bic.w	r3, r3, #15
 8003954:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	b29b      	uxth	r3, r3
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	b29a      	uxth	r2, r3
 8003962:	8afb      	ldrh	r3, [r7, #22]
 8003964:	4313      	orrs	r3, r2
 8003966:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	8afa      	ldrh	r2, [r7, #22]
 800396e:	60da      	str	r2, [r3, #12]
 8003970:	e052      	b.n	8003a18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003978:	e04e      	b.n	8003a18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800397a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800397e:	2b08      	cmp	r3, #8
 8003980:	d827      	bhi.n	80039d2 <UART_SetConfig+0x506>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <UART_SetConfig+0x4bc>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039ad 	.word	0x080039ad
 800398c:	080039b5 	.word	0x080039b5
 8003990:	080039bd 	.word	0x080039bd
 8003994:	080039d3 	.word	0x080039d3
 8003998:	080039c3 	.word	0x080039c3
 800399c:	080039d3 	.word	0x080039d3
 80039a0:	080039d3 	.word	0x080039d3
 80039a4:	080039d3 	.word	0x080039d3
 80039a8:	080039cb 	.word	0x080039cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ac:	f7fe ff6e 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 80039b0:	61f8      	str	r0, [r7, #28]
        break;
 80039b2:	e014      	b.n	80039de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b4:	f7fe ff80 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 80039b8:	61f8      	str	r0, [r7, #28]
        break;
 80039ba:	e010      	b.n	80039de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039bc:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <UART_SetConfig+0x56c>)
 80039be:	61fb      	str	r3, [r7, #28]
        break;
 80039c0:	e00d      	b.n	80039de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c2:	f7fe fecb 	bl	800275c <HAL_RCC_GetSysClockFreq>
 80039c6:	61f8      	str	r0, [r7, #28]
        break;
 80039c8:	e009      	b.n	80039de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ce:	61fb      	str	r3, [r7, #28]
        break;
 80039d0:	e005      	b.n	80039de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039dc:	bf00      	nop
    }

    if (pclk != 0U)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d019      	beq.n	8003a18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	085a      	lsrs	r2, r3, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	441a      	add	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b0f      	cmp	r3, #15
 80039fc:	d909      	bls.n	8003a12 <UART_SetConfig+0x546>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d205      	bcs.n	8003a12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	e002      	b.n	8003a18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3728      	adds	r7, #40	; 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a32:	bf00      	nop
 8003a34:	40008000 	.word	0x40008000
 8003a38:	00f42400 	.word	0x00f42400

08003a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01a      	beq.n	8003b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3a:	d10a      	bne.n	8003b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b098      	sub	sp, #96	; 0x60
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b90:	f7fd fdcc 	bl	800172c <HAL_GetTick>
 8003b94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d12e      	bne.n	8003c02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f88c 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d021      	beq.n	8003c02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bde:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e6      	bne.n	8003bbe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e062      	b.n	8003cc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d149      	bne.n	8003ca4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f856 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d03c      	beq.n	8003ca4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	623b      	str	r3, [r7, #32]
   return(result);
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
 8003c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e6      	bne.n	8003c2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3308      	adds	r3, #8
 8003c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7c:	61fa      	str	r2, [r7, #28]
 8003c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e011      	b.n	8003cc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3758      	adds	r7, #88	; 0x58
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	e049      	b.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce8:	d045      	beq.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fd fd1f 	bl	800172c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e048      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d031      	beq.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d110      	bne.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f838 	bl	8003d9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2208      	movs	r2, #8
 8003d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e029      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d50:	d111      	bne.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f81e 	bl	8003d9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e00f      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d0a6      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b095      	sub	sp, #84	; 0x54
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8003dc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e6      	bne.n	8003da6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3308      	adds	r3, #8
 8003df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e5      	bne.n	8003dd8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d118      	bne.n	8003e46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f023 0310 	bic.w	r3, r3, #16
 8003e28:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	6979      	ldr	r1, [r7, #20]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e6      	bne.n	8003e14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e5a:	bf00      	nop
 8003e5c:	3754      	adds	r7, #84	; 0x54
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <arm_max_f32>:
 8003e68:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	4607      	mov	r7, r0
 8003e70:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8003e74:	ecf7 7a01 	vldmia	r7!, {s15}
 8003e78:	d060      	beq.n	8003f3c <arm_max_f32+0xd4>
 8003e7a:	2400      	movs	r4, #0
 8003e7c:	3014      	adds	r0, #20
 8003e7e:	4625      	mov	r5, r4
 8003e80:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8003e84:	ed10 7a04 	vldr	s14, [r0, #-16]
 8003e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e90:	bf48      	it	mi
 8003e92:	eef0 7a47 	vmovmi.f32	s15, s14
 8003e96:	ed10 7a03 	vldr	s14, [r0, #-12]
 8003e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9e:	bf48      	it	mi
 8003ea0:	1c65      	addmi	r5, r4, #1
 8003ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea6:	bf48      	it	mi
 8003ea8:	eef0 7a47 	vmovmi.f32	s15, s14
 8003eac:	ed10 7a02 	vldr	s14, [r0, #-8]
 8003eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb4:	bf48      	it	mi
 8003eb6:	1ca5      	addmi	r5, r4, #2
 8003eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ebc:	bf48      	it	mi
 8003ebe:	eef0 7a47 	vmovmi.f32	s15, s14
 8003ec2:	ed10 7a01 	vldr	s14, [r0, #-4]
 8003ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eca:	bf48      	it	mi
 8003ecc:	1ce5      	addmi	r5, r4, #3
 8003ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed2:	f104 0404 	add.w	r4, r4, #4
 8003ed6:	bf44      	itt	mi
 8003ed8:	eef0 7a47 	vmovmi.f32	s15, s14
 8003edc:	4625      	movmi	r5, r4
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	f100 0010 	add.w	r0, r0, #16
 8003ee4:	d1ce      	bne.n	8003e84 <arm_max_f32+0x1c>
 8003ee6:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8003eea:	f01c 0003 	ands.w	r0, ip, #3
 8003eee:	d021      	beq.n	8003f34 <arm_max_f32+0xcc>
 8003ef0:	ed97 7a00 	vldr	s14, [r7]
 8003ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efc:	bfc4      	itt	gt
 8003efe:	eef0 7a47 	vmovgt.f32	s15, s14
 8003f02:	1a0d      	subgt	r5, r1, r0
 8003f04:	3801      	subs	r0, #1
 8003f06:	d015      	beq.n	8003f34 <arm_max_f32+0xcc>
 8003f08:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f14:	bf44      	itt	mi
 8003f16:	eef0 7a47 	vmovmi.f32	s15, s14
 8003f1a:	1a0d      	submi	r5, r1, r0
 8003f1c:	2801      	cmp	r0, #1
 8003f1e:	d009      	beq.n	8003f34 <arm_max_f32+0xcc>
 8003f20:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2c:	bfc4      	itt	gt
 8003f2e:	eef0 7a47 	vmovgt.f32	s15, s14
 8003f32:	4665      	movgt	r5, ip
 8003f34:	edc2 7a00 	vstr	s15, [r2]
 8003f38:	601d      	str	r5, [r3, #0]
 8003f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3c:	4675      	mov	r5, lr
 8003f3e:	e7d4      	b.n	8003eea <arm_max_f32+0x82>

08003f40 <arm_rfft_32_fast_init_f32>:
 8003f40:	b178      	cbz	r0, 8003f62 <arm_rfft_32_fast_init_f32+0x22>
 8003f42:	b430      	push	{r4, r5}
 8003f44:	4908      	ldr	r1, [pc, #32]	; (8003f68 <arm_rfft_32_fast_init_f32+0x28>)
 8003f46:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <arm_rfft_32_fast_init_f32+0x2c>)
 8003f48:	2310      	movs	r3, #16
 8003f4a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003f4e:	8003      	strh	r3, [r0, #0]
 8003f50:	2520      	movs	r5, #32
 8003f52:	2414      	movs	r4, #20
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <arm_rfft_32_fast_init_f32+0x30>)
 8003f56:	8205      	strh	r5, [r0, #16]
 8003f58:	8184      	strh	r4, [r0, #12]
 8003f5a:	6143      	str	r3, [r0, #20]
 8003f5c:	bc30      	pop	{r4, r5}
 8003f5e:	2000      	movs	r0, #0
 8003f60:	4770      	bx	lr
 8003f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f66:	4770      	bx	lr
 8003f68:	08009044 	.word	0x08009044
 8003f6c:	0800e180 	.word	0x0800e180
 8003f70:	08016f00 	.word	0x08016f00

08003f74 <arm_rfft_64_fast_init_f32>:
 8003f74:	b178      	cbz	r0, 8003f96 <arm_rfft_64_fast_init_f32+0x22>
 8003f76:	b430      	push	{r4, r5}
 8003f78:	4908      	ldr	r1, [pc, #32]	; (8003f9c <arm_rfft_64_fast_init_f32+0x28>)
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <arm_rfft_64_fast_init_f32+0x2c>)
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003f82:	8003      	strh	r3, [r0, #0]
 8003f84:	2540      	movs	r5, #64	; 0x40
 8003f86:	2430      	movs	r4, #48	; 0x30
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <arm_rfft_64_fast_init_f32+0x30>)
 8003f8a:	8205      	strh	r5, [r0, #16]
 8003f8c:	8184      	strh	r4, [r0, #12]
 8003f8e:	6143      	str	r3, [r0, #20]
 8003f90:	bc30      	pop	{r4, r5}
 8003f92:	2000      	movs	r0, #0
 8003f94:	4770      	bx	lr
 8003f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f9a:	4770      	bx	lr
 8003f9c:	0800b19c 	.word	0x0800b19c
 8003fa0:	08012a00 	.word	0x08012a00
 8003fa4:	0801b780 	.word	0x0801b780

08003fa8 <arm_rfft_256_fast_init_f32>:
 8003fa8:	b180      	cbz	r0, 8003fcc <arm_rfft_256_fast_init_f32+0x24>
 8003faa:	b430      	push	{r4, r5}
 8003fac:	4909      	ldr	r1, [pc, #36]	; (8003fd4 <arm_rfft_256_fast_init_f32+0x2c>)
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <arm_rfft_256_fast_init_f32+0x30>)
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003fb6:	8003      	strh	r3, [r0, #0]
 8003fb8:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003fbc:	24d0      	movs	r4, #208	; 0xd0
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <arm_rfft_256_fast_init_f32+0x34>)
 8003fc0:	8205      	strh	r5, [r0, #16]
 8003fc2:	8184      	strh	r4, [r0, #12]
 8003fc4:	6143      	str	r3, [r0, #20]
 8003fc6:	bc30      	pop	{r4, r5}
 8003fc8:	2000      	movs	r0, #0
 8003fca:	4770      	bx	lr
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	08008ea4 	.word	0x08008ea4
 8003fd8:	0800dd80 	.word	0x0800dd80
 8003fdc:	08016b00 	.word	0x08016b00

08003fe0 <arm_rfft_512_fast_init_f32>:
 8003fe0:	b190      	cbz	r0, 8004008 <arm_rfft_512_fast_init_f32+0x28>
 8003fe2:	b430      	push	{r4, r5}
 8003fe4:	490a      	ldr	r1, [pc, #40]	; (8004010 <arm_rfft_512_fast_init_f32+0x30>)
 8003fe6:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <arm_rfft_512_fast_init_f32+0x34>)
 8003fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fec:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003ff0:	8003      	strh	r3, [r0, #0]
 8003ff2:	f44f 7500 	mov.w	r5, #512	; 0x200
 8003ff6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <arm_rfft_512_fast_init_f32+0x38>)
 8003ffc:	8205      	strh	r5, [r0, #16]
 8003ffe:	8184      	strh	r4, [r0, #12]
 8004000:	6143      	str	r3, [r0, #20]
 8004002:	bc30      	pop	{r4, r5}
 8004004:	2000      	movs	r0, #0
 8004006:	4770      	bx	lr
 8004008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	0800ae2c 	.word	0x0800ae2c
 8004014:	08012200 	.word	0x08012200
 8004018:	0801af80 	.word	0x0801af80

0800401c <arm_rfft_1024_fast_init_f32>:
 800401c:	b190      	cbz	r0, 8004044 <arm_rfft_1024_fast_init_f32+0x28>
 800401e:	b430      	push	{r4, r5}
 8004020:	490a      	ldr	r1, [pc, #40]	; (800404c <arm_rfft_1024_fast_init_f32+0x30>)
 8004022:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <arm_rfft_1024_fast_init_f32+0x34>)
 8004024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004028:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800402c:	8003      	strh	r3, [r0, #0]
 800402e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004032:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <arm_rfft_1024_fast_init_f32+0x38>)
 8004038:	8205      	strh	r5, [r0, #16]
 800403a:	8184      	strh	r4, [r0, #12]
 800403c:	6143      	str	r3, [r0, #20]
 800403e:	bc30      	pop	{r4, r5}
 8004040:	2000      	movs	r0, #0
 8004042:	4770      	bx	lr
 8004044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	0800b1fc 	.word	0x0800b1fc
 8004050:	08012b00 	.word	0x08012b00
 8004054:	08013b00 	.word	0x08013b00

08004058 <arm_rfft_2048_fast_init_f32>:
 8004058:	b190      	cbz	r0, 8004080 <arm_rfft_2048_fast_init_f32+0x28>
 800405a:	b430      	push	{r4, r5}
 800405c:	490a      	ldr	r1, [pc, #40]	; (8004088 <arm_rfft_2048_fast_init_f32+0x30>)
 800405e:	4a0b      	ldr	r2, [pc, #44]	; (800408c <arm_rfft_2048_fast_init_f32+0x34>)
 8004060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004064:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004068:	8003      	strh	r3, [r0, #0]
 800406a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800406e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <arm_rfft_2048_fast_init_f32+0x38>)
 8004074:	8205      	strh	r5, [r0, #16]
 8004076:	8184      	strh	r4, [r0, #12]
 8004078:	6143      	str	r3, [r0, #20]
 800407a:	bc30      	pop	{r4, r5}
 800407c:	2000      	movs	r0, #0
 800407e:	4770      	bx	lr
 8004080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	08008094 	.word	0x08008094
 800408c:	0800bd80 	.word	0x0800bd80
 8004090:	08014b00 	.word	0x08014b00

08004094 <arm_rfft_4096_fast_init_f32>:
 8004094:	b190      	cbz	r0, 80040bc <arm_rfft_4096_fast_init_f32+0x28>
 8004096:	b430      	push	{r4, r5}
 8004098:	490a      	ldr	r1, [pc, #40]	; (80040c4 <arm_rfft_4096_fast_init_f32+0x30>)
 800409a:	4a0b      	ldr	r2, [pc, #44]	; (80040c8 <arm_rfft_4096_fast_init_f32+0x34>)
 800409c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040a0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80040a4:	8003      	strh	r3, [r0, #0]
 80040a6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80040aa:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <arm_rfft_4096_fast_init_f32+0x38>)
 80040b0:	8205      	strh	r5, [r0, #16]
 80040b2:	8184      	strh	r4, [r0, #12]
 80040b4:	6143      	str	r3, [r0, #20]
 80040b6:	bc30      	pop	{r4, r5}
 80040b8:	2000      	movs	r0, #0
 80040ba:	4770      	bx	lr
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	0800906c 	.word	0x0800906c
 80040c8:	0800e200 	.word	0x0800e200
 80040cc:	08016f80 	.word	0x08016f80

080040d0 <arm_rfft_fast_init_f32>:
 80040d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80040d4:	d01f      	beq.n	8004116 <arm_rfft_fast_init_f32+0x46>
 80040d6:	d90b      	bls.n	80040f0 <arm_rfft_fast_init_f32+0x20>
 80040d8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80040dc:	d019      	beq.n	8004112 <arm_rfft_fast_init_f32+0x42>
 80040de:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80040e2:	d012      	beq.n	800410a <arm_rfft_fast_init_f32+0x3a>
 80040e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80040e8:	d00d      	beq.n	8004106 <arm_rfft_fast_init_f32+0x36>
 80040ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ee:	4770      	bx	lr
 80040f0:	2940      	cmp	r1, #64	; 0x40
 80040f2:	d00c      	beq.n	800410e <arm_rfft_fast_init_f32+0x3e>
 80040f4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80040f8:	d003      	beq.n	8004102 <arm_rfft_fast_init_f32+0x32>
 80040fa:	2920      	cmp	r1, #32
 80040fc:	d1f5      	bne.n	80040ea <arm_rfft_fast_init_f32+0x1a>
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <arm_rfft_fast_init_f32+0x4c>)
 8004100:	4718      	bx	r3
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <arm_rfft_fast_init_f32+0x50>)
 8004104:	4718      	bx	r3
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <arm_rfft_fast_init_f32+0x54>)
 8004108:	4718      	bx	r3
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <arm_rfft_fast_init_f32+0x58>)
 800410c:	4718      	bx	r3
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <arm_rfft_fast_init_f32+0x5c>)
 8004110:	e7f6      	b.n	8004100 <arm_rfft_fast_init_f32+0x30>
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <arm_rfft_fast_init_f32+0x60>)
 8004114:	e7f4      	b.n	8004100 <arm_rfft_fast_init_f32+0x30>
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <arm_rfft_fast_init_f32+0x64>)
 8004118:	e7f2      	b.n	8004100 <arm_rfft_fast_init_f32+0x30>
 800411a:	bf00      	nop
 800411c:	08003f41 	.word	0x08003f41
 8004120:	08003fa9 	.word	0x08003fa9
 8004124:	0800401d 	.word	0x0800401d
 8004128:	08004095 	.word	0x08004095
 800412c:	08003f75 	.word	0x08003f75
 8004130:	08004059 	.word	0x08004059
 8004134:	08003fe1 	.word	0x08003fe1

08004138 <stage_rfft_f32>:
 8004138:	b410      	push	{r4}
 800413a:	edd1 7a00 	vldr	s15, [r1]
 800413e:	ed91 7a01 	vldr	s14, [r1, #4]
 8004142:	8804      	ldrh	r4, [r0, #0]
 8004144:	6940      	ldr	r0, [r0, #20]
 8004146:	ee37 7a07 	vadd.f32	s14, s14, s14
 800414a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800414e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8004152:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800415a:	3c01      	subs	r4, #1
 800415c:	ee26 7a84 	vmul.f32	s14, s13, s8
 8004160:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004164:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8004168:	ed82 7a00 	vstr	s14, [r2]
 800416c:	edc2 7a01 	vstr	s15, [r2, #4]
 8004170:	3010      	adds	r0, #16
 8004172:	3210      	adds	r2, #16
 8004174:	3b08      	subs	r3, #8
 8004176:	3110      	adds	r1, #16
 8004178:	ed11 5a02 	vldr	s10, [r1, #-8]
 800417c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004180:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004184:	edd3 4a03 	vldr	s9, [r3, #12]
 8004188:	ed51 7a01 	vldr	s15, [r1, #-4]
 800418c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8004190:	ee77 5a45 	vsub.f32	s11, s14, s10
 8004194:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004198:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800419c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80041a0:	ee66 5a25 	vmul.f32	s11, s12, s11
 80041a4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80041a8:	ee37 7a23 	vadd.f32	s14, s14, s7
 80041ac:	ee66 6a85 	vmul.f32	s13, s13, s10
 80041b0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80041b4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80041b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80041bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80041c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80041c4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80041c8:	3c01      	subs	r4, #1
 80041ca:	ed02 7a02 	vstr	s14, [r2, #-8]
 80041ce:	ed42 7a01 	vstr	s15, [r2, #-4]
 80041d2:	f1a3 0308 	sub.w	r3, r3, #8
 80041d6:	f101 0108 	add.w	r1, r1, #8
 80041da:	f100 0008 	add.w	r0, r0, #8
 80041de:	f102 0208 	add.w	r2, r2, #8
 80041e2:	d1c9      	bne.n	8004178 <stage_rfft_f32+0x40>
 80041e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop

080041ec <merge_rfft_f32>:
 80041ec:	b410      	push	{r4}
 80041ee:	edd1 7a00 	vldr	s15, [r1]
 80041f2:	edd1 6a01 	vldr	s13, [r1, #4]
 80041f6:	8804      	ldrh	r4, [r0, #0]
 80041f8:	6940      	ldr	r0, [r0, #20]
 80041fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80041fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004202:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8004206:	ee27 7a04 	vmul.f32	s14, s14, s8
 800420a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800420e:	3c01      	subs	r4, #1
 8004210:	ed82 7a00 	vstr	s14, [r2]
 8004214:	edc2 7a01 	vstr	s15, [r2, #4]
 8004218:	b3dc      	cbz	r4, 8004292 <merge_rfft_f32+0xa6>
 800421a:	00e3      	lsls	r3, r4, #3
 800421c:	3b08      	subs	r3, #8
 800421e:	440b      	add	r3, r1
 8004220:	3010      	adds	r0, #16
 8004222:	3210      	adds	r2, #16
 8004224:	3110      	adds	r1, #16
 8004226:	ed11 5a02 	vldr	s10, [r1, #-8]
 800422a:	ed93 7a02 	vldr	s14, [r3, #8]
 800422e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004232:	edd3 4a03 	vldr	s9, [r3, #12]
 8004236:	ed51 7a01 	vldr	s15, [r1, #-4]
 800423a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800423e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8004242:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004246:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800424a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800424e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8004252:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004256:	ee37 7a63 	vsub.f32	s14, s14, s7
 800425a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800425e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8004262:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004266:	ee37 7a46 	vsub.f32	s14, s14, s12
 800426a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800426e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8004272:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004276:	3c01      	subs	r4, #1
 8004278:	ed02 7a02 	vstr	s14, [r2, #-8]
 800427c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004280:	f1a3 0308 	sub.w	r3, r3, #8
 8004284:	f101 0108 	add.w	r1, r1, #8
 8004288:	f100 0008 	add.w	r0, r0, #8
 800428c:	f102 0208 	add.w	r2, r2, #8
 8004290:	d1c9      	bne.n	8004226 <merge_rfft_f32+0x3a>
 8004292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004296:	4770      	bx	lr

08004298 <arm_rfft_fast_f32>:
 8004298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429c:	8a05      	ldrh	r5, [r0, #16]
 800429e:	086d      	lsrs	r5, r5, #1
 80042a0:	8005      	strh	r5, [r0, #0]
 80042a2:	4604      	mov	r4, r0
 80042a4:	4616      	mov	r6, r2
 80042a6:	461d      	mov	r5, r3
 80042a8:	b14b      	cbz	r3, 80042be <arm_rfft_fast_f32+0x26>
 80042aa:	f7ff ff9f 	bl	80041ec <merge_rfft_f32>
 80042ae:	462a      	mov	r2, r5
 80042b0:	4631      	mov	r1, r6
 80042b2:	4620      	mov	r0, r4
 80042b4:	2301      	movs	r3, #1
 80042b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ba:	f000 bb33 	b.w	8004924 <arm_cfft_f32>
 80042be:	460f      	mov	r7, r1
 80042c0:	461a      	mov	r2, r3
 80042c2:	2301      	movs	r3, #1
 80042c4:	f000 fb2e 	bl	8004924 <arm_cfft_f32>
 80042c8:	4632      	mov	r2, r6
 80042ca:	4639      	mov	r1, r7
 80042cc:	4620      	mov	r0, r4
 80042ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042d2:	f7ff bf31 	b.w	8004138 <stage_rfft_f32>
 80042d6:	bf00      	nop

080042d8 <arm_cfft_radix8by2_f32>:
 80042d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042dc:	ed2d 8b08 	vpush	{d8-d11}
 80042e0:	4607      	mov	r7, r0
 80042e2:	4608      	mov	r0, r1
 80042e4:	f8b7 c000 	ldrh.w	ip, [r7]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80042ee:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80042f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80042f6:	f000 80b0 	beq.w	800445a <arm_cfft_radix8by2_f32+0x182>
 80042fa:	008c      	lsls	r4, r1, #2
 80042fc:	3410      	adds	r4, #16
 80042fe:	f100 0310 	add.w	r3, r0, #16
 8004302:	1906      	adds	r6, r0, r4
 8004304:	3210      	adds	r2, #16
 8004306:	4444      	add	r4, r8
 8004308:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800430c:	f108 0510 	add.w	r5, r8, #16
 8004310:	ed15 2a04 	vldr	s4, [r5, #-16]
 8004314:	ed55 2a03 	vldr	s5, [r5, #-12]
 8004318:	ed54 4a04 	vldr	s9, [r4, #-16]
 800431c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8004320:	ed14 6a02 	vldr	s12, [r4, #-8]
 8004324:	ed54 5a01 	vldr	s11, [r4, #-4]
 8004328:	ed53 3a04 	vldr	s7, [r3, #-16]
 800432c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8004330:	ed55 0a01 	vldr	s1, [r5, #-4]
 8004334:	ed56 6a04 	vldr	s13, [r6, #-16]
 8004338:	ed16 3a03 	vldr	s6, [r6, #-12]
 800433c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8004340:	ed13 5a02 	vldr	s10, [r3, #-8]
 8004344:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004348:	ed16 1a02 	vldr	s2, [r6, #-8]
 800434c:	ed56 1a01 	vldr	s3, [r6, #-4]
 8004350:	ee73 ba82 	vadd.f32	s23, s7, s4
 8004354:	ee37 ba22 	vadd.f32	s22, s14, s5
 8004358:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800435c:	ee33 9a04 	vadd.f32	s18, s6, s8
 8004360:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8004364:	ee75 aa00 	vadd.f32	s21, s10, s0
 8004368:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800436c:	ee71 8a06 	vadd.f32	s17, s2, s12
 8004370:	ed43 ba04 	vstr	s23, [r3, #-16]
 8004374:	ed03 ba03 	vstr	s22, [r3, #-12]
 8004378:	ed43 aa02 	vstr	s21, [r3, #-8]
 800437c:	ed03 aa01 	vstr	s20, [r3, #-4]
 8004380:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004384:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004388:	ed06 9a03 	vstr	s18, [r6, #-12]
 800438c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004390:	ee37 7a62 	vsub.f32	s14, s14, s5
 8004394:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8004398:	ee34 4a43 	vsub.f32	s8, s8, s6
 800439c:	ed52 6a03 	vldr	s13, [r2, #-12]
 80043a0:	ed12 3a04 	vldr	s6, [r2, #-16]
 80043a4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80043a8:	ee27 8a26 	vmul.f32	s16, s14, s13
 80043ac:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80043b0:	ee23 2a83 	vmul.f32	s4, s7, s6
 80043b4:	ee64 4a83 	vmul.f32	s9, s9, s6
 80043b8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80043bc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80043c0:	ee64 6a26 	vmul.f32	s13, s8, s13
 80043c4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80043c8:	ee37 7a63 	vsub.f32	s14, s14, s7
 80043cc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80043d0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80043d4:	ee32 3a08 	vadd.f32	s6, s4, s16
 80043d8:	ed05 7a03 	vstr	s14, [r5, #-12]
 80043dc:	ed05 3a04 	vstr	s6, [r5, #-16]
 80043e0:	ed04 4a04 	vstr	s8, [r4, #-16]
 80043e4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80043e8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80043ec:	ee76 6a41 	vsub.f32	s13, s12, s2
 80043f0:	ee35 5a40 	vsub.f32	s10, s10, s0
 80043f4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80043f8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80043fc:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004400:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004404:	ee66 4a87 	vmul.f32	s9, s13, s14
 8004408:	ee25 4a25 	vmul.f32	s8, s10, s11
 800440c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004410:	ee25 5a07 	vmul.f32	s10, s10, s14
 8004414:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004418:	ee26 7a07 	vmul.f32	s14, s12, s14
 800441c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004420:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004424:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004428:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800442c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004430:	3310      	adds	r3, #16
 8004432:	4563      	cmp	r3, ip
 8004434:	ed45 5a02 	vstr	s11, [r5, #-8]
 8004438:	f106 0610 	add.w	r6, r6, #16
 800443c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8004440:	f102 0210 	add.w	r2, r2, #16
 8004444:	ed04 6a02 	vstr	s12, [r4, #-8]
 8004448:	ed04 7a01 	vstr	s14, [r4, #-4]
 800444c:	f105 0510 	add.w	r5, r5, #16
 8004450:	f104 0410 	add.w	r4, r4, #16
 8004454:	f47f af5c 	bne.w	8004310 <arm_cfft_radix8by2_f32+0x38>
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	b28c      	uxth	r4, r1
 800445c:	4621      	mov	r1, r4
 800445e:	2302      	movs	r3, #2
 8004460:	f000 fc62 	bl	8004d28 <arm_radix8_butterfly_f32>
 8004464:	ecbd 8b08 	vpop	{d8-d11}
 8004468:	4621      	mov	r1, r4
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4640      	mov	r0, r8
 800446e:	2302      	movs	r3, #2
 8004470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004474:	f000 bc58 	b.w	8004d28 <arm_radix8_butterfly_f32>

08004478 <arm_cfft_radix8by4_f32>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	ed2d 8b0a 	vpush	{d8-d12}
 8004480:	b08d      	sub	sp, #52	; 0x34
 8004482:	460d      	mov	r5, r1
 8004484:	910b      	str	r1, [sp, #44]	; 0x2c
 8004486:	8801      	ldrh	r1, [r0, #0]
 8004488:	6842      	ldr	r2, [r0, #4]
 800448a:	900a      	str	r0, [sp, #40]	; 0x28
 800448c:	0849      	lsrs	r1, r1, #1
 800448e:	008b      	lsls	r3, r1, #2
 8004490:	18ee      	adds	r6, r5, r3
 8004492:	18f0      	adds	r0, r6, r3
 8004494:	edd0 5a00 	vldr	s11, [r0]
 8004498:	edd5 7a00 	vldr	s15, [r5]
 800449c:	ed96 7a00 	vldr	s14, [r6]
 80044a0:	edd0 3a01 	vldr	s7, [r0, #4]
 80044a4:	ed96 4a01 	vldr	s8, [r6, #4]
 80044a8:	ed95 5a01 	vldr	s10, [r5, #4]
 80044ac:	9008      	str	r0, [sp, #32]
 80044ae:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80044b2:	18c7      	adds	r7, r0, r3
 80044b4:	edd7 4a00 	vldr	s9, [r7]
 80044b8:	ed97 3a01 	vldr	s6, [r7, #4]
 80044bc:	9701      	str	r7, [sp, #4]
 80044be:	ee77 6a06 	vadd.f32	s13, s14, s12
 80044c2:	462c      	mov	r4, r5
 80044c4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80044c8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80044cc:	ee16 ca90 	vmov	ip, s13
 80044d0:	f844 cb08 	str.w	ip, [r4], #8
 80044d4:	ee75 6a23 	vadd.f32	s13, s10, s7
 80044d8:	edd6 5a01 	vldr	s11, [r6, #4]
 80044dc:	edd7 2a01 	vldr	s5, [r7, #4]
 80044e0:	9404      	str	r4, [sp, #16]
 80044e2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80044e6:	ee74 3a27 	vadd.f32	s7, s8, s15
 80044ea:	ee36 6a47 	vsub.f32	s12, s12, s14
 80044ee:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80044f2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80044f6:	0849      	lsrs	r1, r1, #1
 80044f8:	f102 0e08 	add.w	lr, r2, #8
 80044fc:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8004500:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8004504:	9109      	str	r1, [sp, #36]	; 0x24
 8004506:	ee35 4a47 	vsub.f32	s8, s10, s14
 800450a:	f1a1 0902 	sub.w	r9, r1, #2
 800450e:	f8cd e00c 	str.w	lr, [sp, #12]
 8004512:	4631      	mov	r1, r6
 8004514:	ee13 ea90 	vmov	lr, s7
 8004518:	ee36 6a64 	vsub.f32	s12, s12, s9
 800451c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8004520:	4604      	mov	r4, r0
 8004522:	edc5 5a01 	vstr	s11, [r5, #4]
 8004526:	ee37 7a05 	vadd.f32	s14, s14, s10
 800452a:	f841 eb08 	str.w	lr, [r1], #8
 800452e:	ee34 5a24 	vadd.f32	s10, s8, s9
 8004532:	ee16 ea10 	vmov	lr, s12
 8004536:	ed86 5a01 	vstr	s10, [r6, #4]
 800453a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800453e:	f844 eb08 	str.w	lr, [r4], #8
 8004542:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004546:	edc0 6a01 	vstr	s13, [r0, #4]
 800454a:	9405      	str	r4, [sp, #20]
 800454c:	4604      	mov	r4, r0
 800454e:	ee17 0a90 	vmov	r0, s15
 8004552:	9106      	str	r1, [sp, #24]
 8004554:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004558:	f102 0110 	add.w	r1, r2, #16
 800455c:	46bc      	mov	ip, r7
 800455e:	9100      	str	r1, [sp, #0]
 8004560:	f847 0b08 	str.w	r0, [r7], #8
 8004564:	f102 0118 	add.w	r1, r2, #24
 8004568:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800456c:	9102      	str	r1, [sp, #8]
 800456e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8004572:	9007      	str	r0, [sp, #28]
 8004574:	f000 8134 	beq.w	80047e0 <arm_cfft_radix8by4_f32+0x368>
 8004578:	f102 0920 	add.w	r9, r2, #32
 800457c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8004580:	9a01      	ldr	r2, [sp, #4]
 8004582:	f8dd a000 	ldr.w	sl, [sp]
 8004586:	3b0c      	subs	r3, #12
 8004588:	4683      	mov	fp, r0
 800458a:	4463      	add	r3, ip
 800458c:	f105 0e10 	add.w	lr, r5, #16
 8004590:	f1a4 010c 	sub.w	r1, r4, #12
 8004594:	f104 0510 	add.w	r5, r4, #16
 8004598:	f1a6 0c0c 	sub.w	ip, r6, #12
 800459c:	f1a2 040c 	sub.w	r4, r2, #12
 80045a0:	f106 0010 	add.w	r0, r6, #16
 80045a4:	3210      	adds	r2, #16
 80045a6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80045aa:	ed55 5a02 	vldr	s11, [r5, #-8]
 80045ae:	ed50 7a02 	vldr	s15, [r0, #-8]
 80045b2:	ed52 1a02 	vldr	s3, [r2, #-8]
 80045b6:	ed55 6a01 	vldr	s13, [r5, #-4]
 80045ba:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80045be:	ed12 1a01 	vldr	s2, [r2, #-4]
 80045c2:	ed10 8a01 	vldr	s16, [r0, #-4]
 80045c6:	ee35 4a25 	vadd.f32	s8, s10, s11
 80045ca:	ee30 6a26 	vadd.f32	s12, s0, s13
 80045ce:	ee37 7a84 	vadd.f32	s14, s15, s8
 80045d2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80045d6:	ee37 7a21 	vadd.f32	s14, s14, s3
 80045da:	ee75 5a65 	vsub.f32	s11, s10, s11
 80045de:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80045e2:	ed10 7a01 	vldr	s14, [r0, #-4]
 80045e6:	ed52 6a01 	vldr	s13, [r2, #-4]
 80045ea:	ee36 7a07 	vadd.f32	s14, s12, s14
 80045ee:	ee78 aa25 	vadd.f32	s21, s16, s11
 80045f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80045f6:	ee70 3a67 	vsub.f32	s7, s0, s15
 80045fa:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80045fe:	ed94 7a02 	vldr	s14, [r4, #8]
 8004602:	ed9c 2a02 	vldr	s4, [ip, #8]
 8004606:	ed91 ba02 	vldr	s22, [r1, #8]
 800460a:	edd3 9a02 	vldr	s19, [r3, #8]
 800460e:	edd4 2a01 	vldr	s5, [r4, #4]
 8004612:	ed9c 9a01 	vldr	s18, [ip, #4]
 8004616:	ed93 5a01 	vldr	s10, [r3, #4]
 800461a:	edd1 0a01 	vldr	s1, [r1, #4]
 800461e:	ee72 6a07 	vadd.f32	s13, s4, s14
 8004622:	ee32 2a47 	vsub.f32	s4, s4, s14
 8004626:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800462a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800462e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8004632:	ee79 2a62 	vsub.f32	s5, s18, s5
 8004636:	ed8c 7a02 	vstr	s14, [ip, #8]
 800463a:	ed91 7a01 	vldr	s14, [r1, #4]
 800463e:	edd3 8a01 	vldr	s17, [r3, #4]
 8004642:	ee34 7a87 	vadd.f32	s14, s9, s14
 8004646:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800464a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800464e:	ee32 9a60 	vsub.f32	s18, s4, s1
 8004652:	ed8c 7a01 	vstr	s14, [ip, #4]
 8004656:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800465a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800465e:	ee73 8a22 	vadd.f32	s17, s6, s5
 8004662:	ee39 9a05 	vadd.f32	s18, s18, s10
 8004666:	ee7a aac1 	vsub.f32	s21, s21, s2
 800466a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800466e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8004672:	ee69 ba07 	vmul.f32	s23, s18, s14
 8004676:	ee6a aa87 	vmul.f32	s21, s21, s14
 800467a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800467e:	ee63 ca87 	vmul.f32	s25, s7, s14
 8004682:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8004686:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800468a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800468e:	ee73 3aea 	vsub.f32	s7, s7, s21
 8004692:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004696:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800469a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800469e:	ee34 4a67 	vsub.f32	s8, s8, s15
 80046a2:	ee76 6acb 	vsub.f32	s13, s13, s22
 80046a6:	ee36 6a48 	vsub.f32	s12, s12, s16
 80046aa:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80046ae:	ed00 7a02 	vstr	s14, [r0, #-8]
 80046b2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80046b6:	edc1 8a01 	vstr	s17, [r1, #4]
 80046ba:	ed81 aa02 	vstr	s20, [r1, #8]
 80046be:	ed59 3a04 	vldr	s7, [r9, #-16]
 80046c2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80046c6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80046ca:	ed59 6a03 	vldr	s13, [r9, #-12]
 80046ce:	ee34 4a61 	vsub.f32	s8, s8, s3
 80046d2:	ee36 6a41 	vsub.f32	s12, s12, s2
 80046d6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80046da:	ee66 9a26 	vmul.f32	s19, s12, s13
 80046de:	ee24 9a23 	vmul.f32	s18, s8, s7
 80046e2:	ee26 6a23 	vmul.f32	s12, s12, s7
 80046e6:	ee24 4a26 	vmul.f32	s8, s8, s13
 80046ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 80046ee:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80046f2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80046f6:	ee36 6a44 	vsub.f32	s12, s12, s8
 80046fa:	ee37 7a64 	vsub.f32	s14, s14, s9
 80046fe:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8004702:	ee79 3a29 	vadd.f32	s7, s18, s19
 8004706:	ee75 6a60 	vsub.f32	s13, s10, s1
 800470a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800470e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004712:	ed45 3a02 	vstr	s7, [r5, #-8]
 8004716:	ed05 6a01 	vstr	s12, [r5, #-4]
 800471a:	ed84 7a01 	vstr	s14, [r4, #4]
 800471e:	ed84 4a02 	vstr	s8, [r4, #8]
 8004722:	ee35 6a81 	vadd.f32	s12, s11, s2
 8004726:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800472a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800472e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8004732:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004736:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800473a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800473e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8004742:	ee26 5a25 	vmul.f32	s10, s12, s11
 8004746:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800474a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800474e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004752:	ee63 6a26 	vmul.f32	s13, s6, s13
 8004756:	ee23 3a25 	vmul.f32	s6, s6, s11
 800475a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800475e:	ee75 5a24 	vadd.f32	s11, s10, s9
 8004762:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8004766:	ee36 7a87 	vadd.f32	s14, s13, s14
 800476a:	f1bb 0b01 	subs.w	fp, fp, #1
 800476e:	ed42 5a02 	vstr	s11, [r2, #-8]
 8004772:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004776:	f10e 0e08 	add.w	lr, lr, #8
 800477a:	ed83 3a02 	vstr	s6, [r3, #8]
 800477e:	ed83 7a01 	vstr	s14, [r3, #4]
 8004782:	f1ac 0c08 	sub.w	ip, ip, #8
 8004786:	f10a 0a08 	add.w	sl, sl, #8
 800478a:	f100 0008 	add.w	r0, r0, #8
 800478e:	f1a1 0108 	sub.w	r1, r1, #8
 8004792:	f109 0910 	add.w	r9, r9, #16
 8004796:	f105 0508 	add.w	r5, r5, #8
 800479a:	f1a4 0408 	sub.w	r4, r4, #8
 800479e:	f108 0818 	add.w	r8, r8, #24
 80047a2:	f102 0208 	add.w	r2, r2, #8
 80047a6:	f1a3 0308 	sub.w	r3, r3, #8
 80047aa:	f47f aefc 	bne.w	80045a6 <arm_cfft_radix8by4_f32+0x12e>
 80047ae:	9907      	ldr	r1, [sp, #28]
 80047b0:	9800      	ldr	r0, [sp, #0]
 80047b2:	00cb      	lsls	r3, r1, #3
 80047b4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80047b8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80047bc:	9100      	str	r1, [sp, #0]
 80047be:	9904      	ldr	r1, [sp, #16]
 80047c0:	4419      	add	r1, r3
 80047c2:	9104      	str	r1, [sp, #16]
 80047c4:	9903      	ldr	r1, [sp, #12]
 80047c6:	4419      	add	r1, r3
 80047c8:	9103      	str	r1, [sp, #12]
 80047ca:	9906      	ldr	r1, [sp, #24]
 80047cc:	4419      	add	r1, r3
 80047ce:	9106      	str	r1, [sp, #24]
 80047d0:	9905      	ldr	r1, [sp, #20]
 80047d2:	441f      	add	r7, r3
 80047d4:	4419      	add	r1, r3
 80047d6:	9b02      	ldr	r3, [sp, #8]
 80047d8:	9105      	str	r1, [sp, #20]
 80047da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047de:	9302      	str	r3, [sp, #8]
 80047e0:	9904      	ldr	r1, [sp, #16]
 80047e2:	9805      	ldr	r0, [sp, #20]
 80047e4:	ed91 4a00 	vldr	s8, [r1]
 80047e8:	edd0 6a00 	vldr	s13, [r0]
 80047ec:	9b06      	ldr	r3, [sp, #24]
 80047ee:	ed97 3a00 	vldr	s6, [r7]
 80047f2:	edd3 7a00 	vldr	s15, [r3]
 80047f6:	edd0 4a01 	vldr	s9, [r0, #4]
 80047fa:	edd1 3a01 	vldr	s7, [r1, #4]
 80047fe:	ed97 2a01 	vldr	s4, [r7, #4]
 8004802:	ed93 7a01 	vldr	s14, [r3, #4]
 8004806:	9a03      	ldr	r2, [sp, #12]
 8004808:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800480c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8004810:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8004814:	ee37 5a86 	vadd.f32	s10, s15, s12
 8004818:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800481c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004820:	ee74 6a66 	vsub.f32	s13, s8, s13
 8004824:	ed81 5a00 	vstr	s10, [r1]
 8004828:	ed93 5a01 	vldr	s10, [r3, #4]
 800482c:	edd7 4a01 	vldr	s9, [r7, #4]
 8004830:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004834:	ee37 4a26 	vadd.f32	s8, s14, s13
 8004838:	ee35 5a24 	vadd.f32	s10, s10, s9
 800483c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8004840:	ed81 5a01 	vstr	s10, [r1, #4]
 8004844:	edd2 1a00 	vldr	s3, [r2]
 8004848:	edd2 2a01 	vldr	s5, [r2, #4]
 800484c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004850:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004854:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004858:	ee64 4a21 	vmul.f32	s9, s8, s3
 800485c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004860:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004864:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004868:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800486c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004870:	edc3 2a00 	vstr	s5, [r3]
 8004874:	ed83 5a01 	vstr	s10, [r3, #4]
 8004878:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800487c:	9b00      	ldr	r3, [sp, #0]
 800487e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004882:	ed93 4a01 	vldr	s8, [r3, #4]
 8004886:	ed93 5a00 	vldr	s10, [r3]
 800488a:	9b02      	ldr	r3, [sp, #8]
 800488c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004890:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004894:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004898:	ee26 6a04 	vmul.f32	s12, s12, s8
 800489c:	ee65 5a84 	vmul.f32	s11, s11, s8
 80048a0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80048a4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80048a8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80048ac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80048b0:	ed80 6a01 	vstr	s12, [r0, #4]
 80048b4:	edc0 5a00 	vstr	s11, [r0]
 80048b8:	edd3 5a01 	vldr	s11, [r3, #4]
 80048bc:	edd3 6a00 	vldr	s13, [r3]
 80048c0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80048c4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80048c8:	ee27 6a26 	vmul.f32	s12, s14, s13
 80048cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80048d0:	ee27 7a25 	vmul.f32	s14, s14, s11
 80048d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80048d8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80048dc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80048e0:	ed87 7a01 	vstr	s14, [r7, #4]
 80048e4:	edc7 7a00 	vstr	s15, [r7]
 80048e8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 80048ec:	4621      	mov	r1, r4
 80048ee:	686a      	ldr	r2, [r5, #4]
 80048f0:	2304      	movs	r3, #4
 80048f2:	f000 fa19 	bl	8004d28 <arm_radix8_butterfly_f32>
 80048f6:	4630      	mov	r0, r6
 80048f8:	4621      	mov	r1, r4
 80048fa:	686a      	ldr	r2, [r5, #4]
 80048fc:	2304      	movs	r3, #4
 80048fe:	f000 fa13 	bl	8004d28 <arm_radix8_butterfly_f32>
 8004902:	9808      	ldr	r0, [sp, #32]
 8004904:	686a      	ldr	r2, [r5, #4]
 8004906:	4621      	mov	r1, r4
 8004908:	2304      	movs	r3, #4
 800490a:	f000 fa0d 	bl	8004d28 <arm_radix8_butterfly_f32>
 800490e:	686a      	ldr	r2, [r5, #4]
 8004910:	9801      	ldr	r0, [sp, #4]
 8004912:	4621      	mov	r1, r4
 8004914:	2304      	movs	r3, #4
 8004916:	b00d      	add	sp, #52	; 0x34
 8004918:	ecbd 8b0a 	vpop	{d8-d12}
 800491c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	f000 ba02 	b.w	8004d28 <arm_radix8_butterfly_f32>

08004924 <arm_cfft_f32>:
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	2a01      	cmp	r2, #1
 800492a:	4606      	mov	r6, r0
 800492c:	4617      	mov	r7, r2
 800492e:	460c      	mov	r4, r1
 8004930:	4698      	mov	r8, r3
 8004932:	8805      	ldrh	r5, [r0, #0]
 8004934:	d056      	beq.n	80049e4 <arm_cfft_f32+0xc0>
 8004936:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800493a:	d063      	beq.n	8004a04 <arm_cfft_f32+0xe0>
 800493c:	d916      	bls.n	800496c <arm_cfft_f32+0x48>
 800493e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004942:	d01a      	beq.n	800497a <arm_cfft_f32+0x56>
 8004944:	d947      	bls.n	80049d6 <arm_cfft_f32+0xb2>
 8004946:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800494a:	d05b      	beq.n	8004a04 <arm_cfft_f32+0xe0>
 800494c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004950:	d105      	bne.n	800495e <arm_cfft_f32+0x3a>
 8004952:	2301      	movs	r3, #1
 8004954:	6872      	ldr	r2, [r6, #4]
 8004956:	4629      	mov	r1, r5
 8004958:	4620      	mov	r0, r4
 800495a:	f000 f9e5 	bl	8004d28 <arm_radix8_butterfly_f32>
 800495e:	f1b8 0f00 	cmp.w	r8, #0
 8004962:	d111      	bne.n	8004988 <arm_cfft_f32+0x64>
 8004964:	2f01      	cmp	r7, #1
 8004966:	d016      	beq.n	8004996 <arm_cfft_f32+0x72>
 8004968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800496c:	2d20      	cmp	r5, #32
 800496e:	d049      	beq.n	8004a04 <arm_cfft_f32+0xe0>
 8004970:	d935      	bls.n	80049de <arm_cfft_f32+0xba>
 8004972:	2d40      	cmp	r5, #64	; 0x40
 8004974:	d0ed      	beq.n	8004952 <arm_cfft_f32+0x2e>
 8004976:	2d80      	cmp	r5, #128	; 0x80
 8004978:	d1f1      	bne.n	800495e <arm_cfft_f32+0x3a>
 800497a:	4621      	mov	r1, r4
 800497c:	4630      	mov	r0, r6
 800497e:	f7ff fcab 	bl	80042d8 <arm_cfft_radix8by2_f32>
 8004982:	f1b8 0f00 	cmp.w	r8, #0
 8004986:	d0ed      	beq.n	8004964 <arm_cfft_f32+0x40>
 8004988:	68b2      	ldr	r2, [r6, #8]
 800498a:	89b1      	ldrh	r1, [r6, #12]
 800498c:	4620      	mov	r0, r4
 800498e:	f000 f841 	bl	8004a14 <arm_bitreversal_32>
 8004992:	2f01      	cmp	r7, #1
 8004994:	d1e8      	bne.n	8004968 <arm_cfft_f32+0x44>
 8004996:	ee07 5a90 	vmov	s15, r5
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	d0de      	beq.n	8004968 <arm_cfft_f32+0x44>
 80049aa:	f104 0108 	add.w	r1, r4, #8
 80049ae:	2300      	movs	r3, #0
 80049b0:	3301      	adds	r3, #1
 80049b2:	429d      	cmp	r5, r3
 80049b4:	f101 0108 	add.w	r1, r1, #8
 80049b8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80049bc:	ed51 7a03 	vldr	s15, [r1, #-12]
 80049c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80049c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80049c8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80049cc:	ed41 7a03 	vstr	s15, [r1, #-12]
 80049d0:	d1ee      	bne.n	80049b0 <arm_cfft_f32+0x8c>
 80049d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80049da:	d0ba      	beq.n	8004952 <arm_cfft_f32+0x2e>
 80049dc:	e7bf      	b.n	800495e <arm_cfft_f32+0x3a>
 80049de:	2d10      	cmp	r5, #16
 80049e0:	d0cb      	beq.n	800497a <arm_cfft_f32+0x56>
 80049e2:	e7bc      	b.n	800495e <arm_cfft_f32+0x3a>
 80049e4:	b19d      	cbz	r5, 8004a0e <arm_cfft_f32+0xea>
 80049e6:	f101 030c 	add.w	r3, r1, #12
 80049ea:	2200      	movs	r2, #0
 80049ec:	ed53 7a02 	vldr	s15, [r3, #-8]
 80049f0:	3201      	adds	r2, #1
 80049f2:	eef1 7a67 	vneg.f32	s15, s15
 80049f6:	4295      	cmp	r5, r2
 80049f8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80049fc:	f103 0308 	add.w	r3, r3, #8
 8004a00:	d1f4      	bne.n	80049ec <arm_cfft_f32+0xc8>
 8004a02:	e798      	b.n	8004936 <arm_cfft_f32+0x12>
 8004a04:	4621      	mov	r1, r4
 8004a06:	4630      	mov	r0, r6
 8004a08:	f7ff fd36 	bl	8004478 <arm_cfft_radix8by4_f32>
 8004a0c:	e7a7      	b.n	800495e <arm_cfft_f32+0x3a>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0aa      	beq.n	8004968 <arm_cfft_f32+0x44>
 8004a12:	e7b9      	b.n	8004988 <arm_cfft_f32+0x64>

08004a14 <arm_bitreversal_32>:
 8004a14:	b1e9      	cbz	r1, 8004a52 <arm_bitreversal_32+0x3e>
 8004a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a18:	2500      	movs	r5, #0
 8004a1a:	f102 0e02 	add.w	lr, r2, #2
 8004a1e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8004a22:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8004a26:	08a4      	lsrs	r4, r4, #2
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8004a2e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8004a32:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8004a36:	00a6      	lsls	r6, r4, #2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	1d34      	adds	r4, r6, #4
 8004a42:	3502      	adds	r5, #2
 8004a44:	58c6      	ldr	r6, [r0, r3]
 8004a46:	5907      	ldr	r7, [r0, r4]
 8004a48:	50c7      	str	r7, [r0, r3]
 8004a4a:	428d      	cmp	r5, r1
 8004a4c:	5106      	str	r6, [r0, r4]
 8004a4e:	d3e6      	bcc.n	8004a1e <arm_bitreversal_32+0xa>
 8004a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a52:	4770      	bx	lr

08004a54 <arm_cmplx_mag_f32>:
 8004a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a58:	ed2d 8b02 	vpush	{d8}
 8004a5c:	0897      	lsrs	r7, r2, #2
 8004a5e:	b084      	sub	sp, #16
 8004a60:	d077      	beq.n	8004b52 <arm_cmplx_mag_f32+0xfe>
 8004a62:	f04f 0800 	mov.w	r8, #0
 8004a66:	f100 0420 	add.w	r4, r0, #32
 8004a6a:	f101 0510 	add.w	r5, r1, #16
 8004a6e:	463e      	mov	r6, r7
 8004a70:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8004a74:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8004a78:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004a7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a80:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004a84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	f2c0 80c5 	blt.w	8004c1a <arm_cmplx_mag_f32+0x1c6>
 8004a90:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a98:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004a9c:	f100 80cb 	bmi.w	8004c36 <arm_cmplx_mag_f32+0x1e2>
 8004aa0:	ed05 8a04 	vstr	s16, [r5, #-16]
 8004aa4:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8004aa8:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8004aac:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004ab0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ab4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004ab8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac0:	f2c0 80a8 	blt.w	8004c14 <arm_cmplx_mag_f32+0x1c0>
 8004ac4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004acc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004ad0:	f100 80a8 	bmi.w	8004c24 <arm_cmplx_mag_f32+0x1d0>
 8004ad4:	ed05 8a03 	vstr	s16, [r5, #-12]
 8004ad8:	ed14 0a04 	vldr	s0, [r4, #-16]
 8004adc:	ed54 7a03 	vldr	s15, [r4, #-12]
 8004ae0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004ae4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ae8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004aec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af4:	f2c0 808b 	blt.w	8004c0e <arm_cmplx_mag_f32+0x1ba>
 8004af8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004b04:	f100 80a9 	bmi.w	8004c5a <arm_cmplx_mag_f32+0x206>
 8004b08:	ed05 8a02 	vstr	s16, [r5, #-8]
 8004b0c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004b10:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004b14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004b18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	db6e      	blt.n	8004c08 <arm_cmplx_mag_f32+0x1b4>
 8004b2a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b32:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004b36:	f100 8087 	bmi.w	8004c48 <arm_cmplx_mag_f32+0x1f4>
 8004b3a:	ed05 8a01 	vstr	s16, [r5, #-4]
 8004b3e:	3e01      	subs	r6, #1
 8004b40:	f104 0420 	add.w	r4, r4, #32
 8004b44:	f105 0510 	add.w	r5, r5, #16
 8004b48:	d192      	bne.n	8004a70 <arm_cmplx_mag_f32+0x1c>
 8004b4a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8004b4e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8004b52:	f012 0203 	ands.w	r2, r2, #3
 8004b56:	d052      	beq.n	8004bfe <arm_cmplx_mag_f32+0x1aa>
 8004b58:	ed90 0a00 	vldr	s0, [r0]
 8004b5c:	edd0 7a01 	vldr	s15, [r0, #4]
 8004b60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004b64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b68:	2300      	movs	r3, #0
 8004b6a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004b6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b76:	bfb8      	it	lt
 8004b78:	600b      	strlt	r3, [r1, #0]
 8004b7a:	db08      	blt.n	8004b8e <arm_cmplx_mag_f32+0x13a>
 8004b7c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b84:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004b88:	d479      	bmi.n	8004c7e <arm_cmplx_mag_f32+0x22a>
 8004b8a:	ed81 8a00 	vstr	s16, [r1]
 8004b8e:	3a01      	subs	r2, #1
 8004b90:	d035      	beq.n	8004bfe <arm_cmplx_mag_f32+0x1aa>
 8004b92:	ed90 0a02 	vldr	s0, [r0, #8]
 8004b96:	edd0 7a03 	vldr	s15, [r0, #12]
 8004b9a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004b9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004ba8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	bfb8      	it	lt
 8004bb2:	604b      	strlt	r3, [r1, #4]
 8004bb4:	db08      	blt.n	8004bc8 <arm_cmplx_mag_f32+0x174>
 8004bb6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbe:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004bc2:	d453      	bmi.n	8004c6c <arm_cmplx_mag_f32+0x218>
 8004bc4:	ed81 8a01 	vstr	s16, [r1, #4]
 8004bc8:	2a01      	cmp	r2, #1
 8004bca:	d018      	beq.n	8004bfe <arm_cmplx_mag_f32+0x1aa>
 8004bcc:	ed90 0a04 	vldr	s0, [r0, #16]
 8004bd0:	edd0 7a05 	vldr	s15, [r0, #20]
 8004bd4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004bd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004bdc:	2300      	movs	r3, #0
 8004bde:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004be2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bea:	db19      	blt.n	8004c20 <arm_cmplx_mag_f32+0x1cc>
 8004bec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004bf8:	d44a      	bmi.n	8004c90 <arm_cmplx_mag_f32+0x23c>
 8004bfa:	ed81 8a02 	vstr	s16, [r1, #8]
 8004bfe:	b004      	add	sp, #16
 8004c00:	ecbd 8b02 	vpop	{d8}
 8004c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c08:	f845 8c04 	str.w	r8, [r5, #-4]
 8004c0c:	e797      	b.n	8004b3e <arm_cmplx_mag_f32+0xea>
 8004c0e:	f845 8c08 	str.w	r8, [r5, #-8]
 8004c12:	e77b      	b.n	8004b0c <arm_cmplx_mag_f32+0xb8>
 8004c14:	f845 8c0c 	str.w	r8, [r5, #-12]
 8004c18:	e75e      	b.n	8004ad8 <arm_cmplx_mag_f32+0x84>
 8004c1a:	f845 8c10 	str.w	r8, [r5, #-16]
 8004c1e:	e741      	b.n	8004aa4 <arm_cmplx_mag_f32+0x50>
 8004c20:	608b      	str	r3, [r1, #8]
 8004c22:	e7ec      	b.n	8004bfe <arm_cmplx_mag_f32+0x1aa>
 8004c24:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004c28:	9001      	str	r0, [sp, #4]
 8004c2a:	f003 f9c1 	bl	8007fb0 <sqrtf>
 8004c2e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004c32:	9801      	ldr	r0, [sp, #4]
 8004c34:	e74e      	b.n	8004ad4 <arm_cmplx_mag_f32+0x80>
 8004c36:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004c3a:	9001      	str	r0, [sp, #4]
 8004c3c:	f003 f9b8 	bl	8007fb0 <sqrtf>
 8004c40:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004c44:	9801      	ldr	r0, [sp, #4]
 8004c46:	e72b      	b.n	8004aa0 <arm_cmplx_mag_f32+0x4c>
 8004c48:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004c4c:	9001      	str	r0, [sp, #4]
 8004c4e:	f003 f9af 	bl	8007fb0 <sqrtf>
 8004c52:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004c56:	9801      	ldr	r0, [sp, #4]
 8004c58:	e76f      	b.n	8004b3a <arm_cmplx_mag_f32+0xe6>
 8004c5a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004c5e:	9001      	str	r0, [sp, #4]
 8004c60:	f003 f9a6 	bl	8007fb0 <sqrtf>
 8004c64:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004c68:	9801      	ldr	r0, [sp, #4]
 8004c6a:	e74d      	b.n	8004b08 <arm_cmplx_mag_f32+0xb4>
 8004c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c70:	9201      	str	r2, [sp, #4]
 8004c72:	f003 f99d 	bl	8007fb0 <sqrtf>
 8004c76:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8004c7a:	9903      	ldr	r1, [sp, #12]
 8004c7c:	e7a2      	b.n	8004bc4 <arm_cmplx_mag_f32+0x170>
 8004c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c82:	9201      	str	r2, [sp, #4]
 8004c84:	f003 f994 	bl	8007fb0 <sqrtf>
 8004c88:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8004c8c:	9903      	ldr	r1, [sp, #12]
 8004c8e:	e77c      	b.n	8004b8a <arm_cmplx_mag_f32+0x136>
 8004c90:	9101      	str	r1, [sp, #4]
 8004c92:	f003 f98d 	bl	8007fb0 <sqrtf>
 8004c96:	9901      	ldr	r1, [sp, #4]
 8004c98:	e7af      	b.n	8004bfa <arm_cmplx_mag_f32+0x1a6>
 8004c9a:	bf00      	nop

08004c9c <arm_sin_f32>:
 8004c9c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004d1c <arm_sin_f32+0x80>
 8004ca0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004ca4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004cb0:	d504      	bpl.n	8004cbc <arm_sin_f32+0x20>
 8004cb2:	ee17 3a90 	vmov	r3, s15
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	ee07 3a90 	vmov	s15, r3
 8004cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004d20 <arm_sin_f32+0x84>
 8004cc4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004cc8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004ccc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004cd0:	ee17 3a90 	vmov	r3, s15
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cda:	d21a      	bcs.n	8004d12 <arm_sin_f32+0x76>
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce4:	1c59      	adds	r1, r3, #1
 8004ce6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004cea:	4a0e      	ldr	r2, [pc, #56]	; (8004d24 <arm_sin_f32+0x88>)
 8004cec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004cf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004cf4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004cf8:	ed93 7a00 	vldr	s14, [r3]
 8004cfc:	edd2 6a00 	vldr	s13, [r2]
 8004d00:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004d04:	ee20 0a26 	vmul.f32	s0, s0, s13
 8004d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d0c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004d10:	4770      	bx	lr
 8004d12:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004d16:	2101      	movs	r1, #1
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e7e6      	b.n	8004cea <arm_sin_f32+0x4e>
 8004d1c:	3e22f983 	.word	0x3e22f983
 8004d20:	44000000 	.word	0x44000000
 8004d24:	0800b57c 	.word	0x0800b57c

08004d28 <arm_radix8_butterfly_f32>:
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	ed2d 8b10 	vpush	{d8-d15}
 8004d30:	b095      	sub	sp, #84	; 0x54
 8004d32:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8004d36:	4603      	mov	r3, r0
 8004d38:	3304      	adds	r3, #4
 8004d3a:	ed9f bab9 	vldr	s22, [pc, #740]	; 8005020 <arm_radix8_butterfly_f32+0x2f8>
 8004d3e:	9012      	str	r0, [sp, #72]	; 0x48
 8004d40:	468b      	mov	fp, r1
 8004d42:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d44:	4689      	mov	r9, r1
 8004d46:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8004d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d4c:	960f      	str	r6, [sp, #60]	; 0x3c
 8004d4e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8004d52:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8004d56:	eb03 0508 	add.w	r5, r3, r8
 8004d5a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8004d5e:	eb05 040e 	add.w	r4, r5, lr
 8004d62:	0137      	lsls	r7, r6, #4
 8004d64:	eba6 030a 	sub.w	r3, r6, sl
 8004d68:	eb04 000e 	add.w	r0, r4, lr
 8004d6c:	44b2      	add	sl, r6
 8004d6e:	1d3a      	adds	r2, r7, #4
 8004d70:	9702      	str	r7, [sp, #8]
 8004d72:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004d76:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8004d7a:	ebae 0c06 	sub.w	ip, lr, r6
 8004d7e:	9703      	str	r7, [sp, #12]
 8004d80:	eb03 0708 	add.w	r7, r3, r8
 8004d84:	9701      	str	r7, [sp, #4]
 8004d86:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8004d8a:	9706      	str	r7, [sp, #24]
 8004d8c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8004d8e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004d92:	f10e 0104 	add.w	r1, lr, #4
 8004d96:	4439      	add	r1, r7
 8004d98:	443a      	add	r2, r7
 8004d9a:	0137      	lsls	r7, r6, #4
 8004d9c:	00f6      	lsls	r6, r6, #3
 8004d9e:	9704      	str	r7, [sp, #16]
 8004da0:	9605      	str	r6, [sp, #20]
 8004da2:	9f01      	ldr	r7, [sp, #4]
 8004da4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8004da6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8004daa:	f04f 0c00 	mov.w	ip, #0
 8004dae:	edd4 6a00 	vldr	s13, [r4]
 8004db2:	edd7 1a00 	vldr	s3, [r7]
 8004db6:	ed16 aa01 	vldr	s20, [r6, #-4]
 8004dba:	edd5 5a00 	vldr	s11, [r5]
 8004dbe:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004dc2:	ed90 6a00 	vldr	s12, [r0]
 8004dc6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004dca:	ed93 3a00 	vldr	s6, [r3]
 8004dce:	ee39 0a86 	vadd.f32	s0, s19, s12
 8004dd2:	ee33 2a21 	vadd.f32	s4, s6, s3
 8004dd6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8004dda:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8004dde:	ee35 7a02 	vadd.f32	s14, s10, s4
 8004de2:	ee34 4a80 	vadd.f32	s8, s9, s0
 8004de6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004dea:	ee74 6a07 	vadd.f32	s13, s8, s14
 8004dee:	ee34 4a47 	vsub.f32	s8, s8, s14
 8004df2:	ed46 6a01 	vstr	s13, [r6, #-4]
 8004df6:	ed85 4a00 	vstr	s8, [r5]
 8004dfa:	edd1 6a00 	vldr	s13, [r1]
 8004dfe:	ed94 9a01 	vldr	s18, [r4, #4]
 8004e02:	edd3 2a01 	vldr	s5, [r3, #4]
 8004e06:	edd7 8a01 	vldr	s17, [r7, #4]
 8004e0a:	edd6 0a00 	vldr	s1, [r6]
 8004e0e:	edd5 3a01 	vldr	s7, [r5, #4]
 8004e12:	ed90 8a01 	vldr	s16, [r0, #4]
 8004e16:	ed92 7a00 	vldr	s14, [r2]
 8004e1a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004e1e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8004e22:	ee72 aae8 	vsub.f32	s21, s5, s17
 8004e26:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8004e2a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8004e2e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004e32:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8004e36:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8004e3a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8004e3e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8004e42:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8004e46:	ee77 0a08 	vadd.f32	s1, s14, s16
 8004e4a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8004e4e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004e52:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8004e56:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8004e5a:	ee76 6a89 	vadd.f32	s13, s13, s18
 8004e5e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8004e62:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004e66:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004e6a:	ee35 5a42 	vsub.f32	s10, s10, s4
 8004e6e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8004e72:	ee33 2a20 	vadd.f32	s4, s6, s1
 8004e76:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004e7a:	ee33 3a60 	vsub.f32	s6, s6, s1
 8004e7e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8004e82:	ee77 0a01 	vadd.f32	s1, s14, s2
 8004e86:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8004e8a:	ee37 7a41 	vsub.f32	s14, s14, s2
 8004e8e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8004e92:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004e96:	ee76 3a27 	vadd.f32	s7, s12, s15
 8004e9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004e9e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8004ea2:	ee33 1a45 	vsub.f32	s2, s6, s10
 8004ea6:	ee32 2a40 	vsub.f32	s4, s4, s0
 8004eaa:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004eae:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8004eb2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8004eb6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8004eba:	ee34 6a67 	vsub.f32	s12, s8, s15
 8004ebe:	ee75 4a87 	vadd.f32	s9, s11, s14
 8004ec2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8004ec6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004eca:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004ece:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8004ed2:	44dc      	add	ip, fp
 8004ed4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8004ed8:	45e1      	cmp	r9, ip
 8004eda:	ed86 8a00 	vstr	s16, [r6]
 8004ede:	ed85 2a01 	vstr	s4, [r5, #4]
 8004ee2:	4456      	add	r6, sl
 8004ee4:	ed02 0a01 	vstr	s0, [r2, #-4]
 8004ee8:	4455      	add	r5, sl
 8004eea:	edc0 6a00 	vstr	s13, [r0]
 8004eee:	ed82 1a00 	vstr	s2, [r2]
 8004ef2:	ed80 5a01 	vstr	s10, [r0, #4]
 8004ef6:	4452      	add	r2, sl
 8004ef8:	ed01 3a01 	vstr	s6, [r1, #-4]
 8004efc:	4450      	add	r0, sl
 8004efe:	edc7 2a00 	vstr	s5, [r7]
 8004f02:	edc4 4a00 	vstr	s9, [r4]
 8004f06:	ed83 7a00 	vstr	s14, [r3]
 8004f0a:	edc1 5a00 	vstr	s11, [r1]
 8004f0e:	edc7 3a01 	vstr	s7, [r7, #4]
 8004f12:	4451      	add	r1, sl
 8004f14:	ed84 6a01 	vstr	s12, [r4, #4]
 8004f18:	4457      	add	r7, sl
 8004f1a:	edc3 7a01 	vstr	s15, [r3, #4]
 8004f1e:	4454      	add	r4, sl
 8004f20:	4453      	add	r3, sl
 8004f22:	f63f af44 	bhi.w	8004dae <arm_radix8_butterfly_f32+0x86>
 8004f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f28:	2b07      	cmp	r3, #7
 8004f2a:	f240 81b7 	bls.w	800529c <arm_radix8_butterfly_f32+0x574>
 8004f2e:	9b06      	ldr	r3, [sp, #24]
 8004f30:	9903      	ldr	r1, [sp, #12]
 8004f32:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004f34:	9e05      	ldr	r6, [sp, #20]
 8004f36:	9a04      	ldr	r2, [sp, #16]
 8004f38:	f103 0c08 	add.w	ip, r3, #8
 8004f3c:	9b02      	ldr	r3, [sp, #8]
 8004f3e:	3108      	adds	r1, #8
 8004f40:	f108 0808 	add.w	r8, r8, #8
 8004f44:	1841      	adds	r1, r0, r1
 8004f46:	3608      	adds	r6, #8
 8004f48:	330c      	adds	r3, #12
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4444      	add	r4, r8
 8004f4e:	18c3      	adds	r3, r0, r3
 8004f50:	9109      	str	r1, [sp, #36]	; 0x24
 8004f52:	1981      	adds	r1, r0, r6
 8004f54:	f10e 0e08 	add.w	lr, lr, #8
 8004f58:	3208      	adds	r2, #8
 8004f5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f5c:	9107      	str	r1, [sp, #28]
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4601      	mov	r1, r0
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	f100 030c 	add.w	r3, r0, #12
 8004f68:	4474      	add	r4, lr
 8004f6a:	f04f 0801 	mov.w	r8, #1
 8004f6e:	1882      	adds	r2, r0, r2
 8004f70:	4461      	add	r1, ip
 8004f72:	9305      	str	r3, [sp, #20]
 8004f74:	464b      	mov	r3, r9
 8004f76:	940a      	str	r4, [sp, #40]	; 0x28
 8004f78:	46c1      	mov	r9, r8
 8004f7a:	9208      	str	r2, [sp, #32]
 8004f7c:	46d8      	mov	r8, fp
 8004f7e:	9106      	str	r1, [sp, #24]
 8004f80:	f04f 0e00 	mov.w	lr, #0
 8004f84:	469b      	mov	fp, r3
 8004f86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004f8a:	449e      	add	lr, r3
 8004f8c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8004f90:	441a      	add	r2, r3
 8004f92:	920e      	str	r2, [sp, #56]	; 0x38
 8004f94:	441a      	add	r2, r3
 8004f96:	18d4      	adds	r4, r2, r3
 8004f98:	18e5      	adds	r5, r4, r3
 8004f9a:	18ee      	adds	r6, r5, r3
 8004f9c:	18f7      	adds	r7, r6, r3
 8004f9e:	eb07 0c03 	add.w	ip, r7, r3
 8004fa2:	920d      	str	r2, [sp, #52]	; 0x34
 8004fa4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8004fa8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8004fac:	910c      	str	r1, [sp, #48]	; 0x30
 8004fae:	4419      	add	r1, r3
 8004fb0:	9103      	str	r1, [sp, #12]
 8004fb2:	4419      	add	r1, r3
 8004fb4:	18ca      	adds	r2, r1, r3
 8004fb6:	9202      	str	r2, [sp, #8]
 8004fb8:	441a      	add	r2, r3
 8004fba:	18d0      	adds	r0, r2, r3
 8004fbc:	ed92 ea01 	vldr	s28, [r2, #4]
 8004fc0:	9a02      	ldr	r2, [sp, #8]
 8004fc2:	edd4 7a00 	vldr	s15, [r4]
 8004fc6:	edd2 da01 	vldr	s27, [r2, #4]
 8004fca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fcc:	ed91 da01 	vldr	s26, [r1, #4]
 8004fd0:	ed92 ca01 	vldr	s24, [r2, #4]
 8004fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fd6:	9903      	ldr	r1, [sp, #12]
 8004fd8:	edcd 7a03 	vstr	s15, [sp, #12]
 8004fdc:	edd2 7a00 	vldr	s15, [r2]
 8004fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fe2:	edcd 7a02 	vstr	s15, [sp, #8]
 8004fe6:	edd2 7a00 	vldr	s15, [r2]
 8004fea:	edd0 ea01 	vldr	s29, [r0, #4]
 8004fee:	edd1 ca01 	vldr	s25, [r1, #4]
 8004ff2:	eddc ba00 	vldr	s23, [ip]
 8004ff6:	edd7 aa00 	vldr	s21, [r7]
 8004ffa:	ed96 aa00 	vldr	s20, [r6]
 8004ffe:	edd5 9a00 	vldr	s19, [r5]
 8005002:	edcd 7a01 	vstr	s15, [sp, #4]
 8005006:	4403      	add	r3, r0
 8005008:	ed93 fa01 	vldr	s30, [r3, #4]
 800500c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8005010:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8005014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005018:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800501c:	46cc      	mov	ip, r9
 800501e:	e001      	b.n	8005024 <arm_radix8_butterfly_f32+0x2fc>
 8005020:	3f3504f3 	.word	0x3f3504f3
 8005024:	ed91 6a00 	vldr	s12, [r1]
 8005028:	ed93 5a00 	vldr	s10, [r3]
 800502c:	edd0 fa00 	vldr	s31, [r0]
 8005030:	edd4 7a00 	vldr	s15, [r4]
 8005034:	ed95 7a00 	vldr	s14, [r5]
 8005038:	ed56 3a01 	vldr	s7, [r6, #-4]
 800503c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8005040:	ed92 2a00 	vldr	s4, [r2]
 8005044:	ed96 0a00 	vldr	s0, [r6]
 8005048:	ee33 8a85 	vadd.f32	s16, s7, s10
 800504c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8005050:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8005054:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005058:	ee78 1a04 	vadd.f32	s3, s16, s8
 800505c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8005060:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005064:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800506c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8005070:	edd4 8a01 	vldr	s17, [r4, #4]
 8005074:	ed92 9a01 	vldr	s18, [r2, #4]
 8005078:	edd7 0a00 	vldr	s1, [r7]
 800507c:	edd1 2a01 	vldr	s5, [r1, #4]
 8005080:	ed95 7a01 	vldr	s14, [r5, #4]
 8005084:	ed93 6a01 	vldr	s12, [r3, #4]
 8005088:	edd0 5a01 	vldr	s11, [r0, #4]
 800508c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005090:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8005094:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005098:	ee78 fac7 	vsub.f32	s31, s17, s14
 800509c:	ee38 4a44 	vsub.f32	s8, s16, s8
 80050a0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80050a4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80050a8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80050ac:	ee32 9a27 	vadd.f32	s18, s4, s15
 80050b0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80050b4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80050b8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80050bc:	ee71 4a64 	vsub.f32	s9, s2, s9
 80050c0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80050c4:	ee32 1a08 	vadd.f32	s2, s4, s16
 80050c8:	ee72 fa87 	vadd.f32	s31, s5, s14
 80050cc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80050d0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80050d4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80050d8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80050dc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80050e0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80050e4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80050e8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80050ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80050f0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80050f4:	ee74 0a22 	vadd.f32	s1, s8, s5
 80050f8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80050fc:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005100:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005104:	ee32 4a64 	vsub.f32	s8, s4, s9
 8005108:	ee73 8a09 	vadd.f32	s17, s6, s18
 800510c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8005110:	ee33 9a49 	vsub.f32	s18, s6, s18
 8005114:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8005118:	ee35 3a85 	vadd.f32	s6, s11, s10
 800511c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8005120:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8005124:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005128:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800512c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8005130:	ee35 8a03 	vadd.f32	s16, s10, s6
 8005134:	ee38 0a80 	vadd.f32	s0, s17, s0
 8005138:	ee73 3a82 	vadd.f32	s7, s7, s4
 800513c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8005140:	ed9d 2a01 	vldr	s4, [sp, #4]
 8005144:	eddd 1a02 	vldr	s3, [sp, #8]
 8005148:	ee35 5a43 	vsub.f32	s10, s10, s6
 800514c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8005150:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8005154:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8005158:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800515c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8005160:	ee76 5a49 	vsub.f32	s11, s12, s18
 8005164:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8005168:	ee39 6a06 	vadd.f32	s12, s18, s12
 800516c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8005170:	ee21 4a84 	vmul.f32	s8, s3, s8
 8005174:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8005178:	ee22 7a07 	vmul.f32	s14, s4, s14
 800517c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8005180:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005184:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8005188:	ee31 1a09 	vadd.f32	s2, s2, s18
 800518c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8005190:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8005194:	ee74 0a60 	vsub.f32	s1, s8, s1
 8005198:	ee37 7a48 	vsub.f32	s14, s14, s16
 800519c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80051a0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80051a4:	ee72 1a21 	vadd.f32	s3, s4, s3
 80051a8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80051ac:	ee38 2a89 	vadd.f32	s4, s17, s18
 80051b0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80051b4:	ee38 8a04 	vadd.f32	s16, s16, s8
 80051b8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80051bc:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80051c0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80051c4:	eddd 5a03 	vldr	s11, [sp, #12]
 80051c8:	edc6 fa00 	vstr	s31, [r6]
 80051cc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80051d0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80051d4:	ee30 0a45 	vsub.f32	s0, s0, s10
 80051d8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80051dc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80051e0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80051e4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80051e8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80051ec:	ee25 6a86 	vmul.f32	s12, s11, s12
 80051f0:	ee74 4a89 	vadd.f32	s9, s9, s18
 80051f4:	ee34 3a43 	vsub.f32	s6, s8, s6
 80051f8:	ee78 8a85 	vadd.f32	s17, s17, s10
 80051fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005200:	44c4      	add	ip, r8
 8005202:	45e3      	cmp	fp, ip
 8005204:	edc3 3a00 	vstr	s7, [r3]
 8005208:	edc3 6a01 	vstr	s13, [r3, #4]
 800520c:	4456      	add	r6, sl
 800520e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8005212:	edc7 0a00 	vstr	s1, [r7]
 8005216:	4453      	add	r3, sl
 8005218:	ed80 2a00 	vstr	s4, [r0]
 800521c:	edc0 2a01 	vstr	s5, [r0, #4]
 8005220:	4457      	add	r7, sl
 8005222:	edc2 1a00 	vstr	s3, [r2]
 8005226:	ed82 7a01 	vstr	s14, [r2, #4]
 800522a:	4450      	add	r0, sl
 800522c:	ed85 8a00 	vstr	s16, [r5]
 8005230:	ed85 0a01 	vstr	s0, [r5, #4]
 8005234:	4452      	add	r2, sl
 8005236:	edc1 4a00 	vstr	s9, [r1]
 800523a:	4455      	add	r5, sl
 800523c:	ed81 3a01 	vstr	s6, [r1, #4]
 8005240:	edc4 8a00 	vstr	s17, [r4]
 8005244:	ed84 6a01 	vstr	s12, [r4, #4]
 8005248:	4451      	add	r1, sl
 800524a:	4454      	add	r4, sl
 800524c:	f63f aeea 	bhi.w	8005024 <arm_radix8_butterfly_f32+0x2fc>
 8005250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005252:	3308      	adds	r3, #8
 8005254:	930b      	str	r3, [sp, #44]	; 0x2c
 8005256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005258:	3308      	adds	r3, #8
 800525a:	930a      	str	r3, [sp, #40]	; 0x28
 800525c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525e:	3308      	adds	r3, #8
 8005260:	9309      	str	r3, [sp, #36]	; 0x24
 8005262:	9b08      	ldr	r3, [sp, #32]
 8005264:	3308      	adds	r3, #8
 8005266:	9308      	str	r3, [sp, #32]
 8005268:	9b07      	ldr	r3, [sp, #28]
 800526a:	3308      	adds	r3, #8
 800526c:	9307      	str	r3, [sp, #28]
 800526e:	9b06      	ldr	r3, [sp, #24]
 8005270:	3308      	adds	r3, #8
 8005272:	9306      	str	r3, [sp, #24]
 8005274:	9b05      	ldr	r3, [sp, #20]
 8005276:	3308      	adds	r3, #8
 8005278:	9305      	str	r3, [sp, #20]
 800527a:	9b04      	ldr	r3, [sp, #16]
 800527c:	3308      	adds	r3, #8
 800527e:	9304      	str	r3, [sp, #16]
 8005280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005282:	f109 0901 	add.w	r9, r9, #1
 8005286:	454b      	cmp	r3, r9
 8005288:	f47f ae7d 	bne.w	8004f86 <arm_radix8_butterfly_f32+0x25e>
 800528c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	b29b      	uxth	r3, r3
 8005292:	46d9      	mov	r9, fp
 8005294:	9310      	str	r3, [sp, #64]	; 0x40
 8005296:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800529a:	e554      	b.n	8004d46 <arm_radix8_butterfly_f32+0x1e>
 800529c:	b015      	add	sp, #84	; 0x54
 800529e:	ecbd 8b10 	vpop	{d8-d15}
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	bf00      	nop

080052a8 <__cvt>:
 80052a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	ec55 4b10 	vmov	r4, r5, d0
 80052b0:	2d00      	cmp	r5, #0
 80052b2:	460e      	mov	r6, r1
 80052b4:	4619      	mov	r1, r3
 80052b6:	462b      	mov	r3, r5
 80052b8:	bfbb      	ittet	lt
 80052ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052be:	461d      	movlt	r5, r3
 80052c0:	2300      	movge	r3, #0
 80052c2:	232d      	movlt	r3, #45	; 0x2d
 80052c4:	700b      	strb	r3, [r1, #0]
 80052c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052cc:	4691      	mov	r9, r2
 80052ce:	f023 0820 	bic.w	r8, r3, #32
 80052d2:	bfbc      	itt	lt
 80052d4:	4622      	movlt	r2, r4
 80052d6:	4614      	movlt	r4, r2
 80052d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052dc:	d005      	beq.n	80052ea <__cvt+0x42>
 80052de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052e2:	d100      	bne.n	80052e6 <__cvt+0x3e>
 80052e4:	3601      	adds	r6, #1
 80052e6:	2102      	movs	r1, #2
 80052e8:	e000      	b.n	80052ec <__cvt+0x44>
 80052ea:	2103      	movs	r1, #3
 80052ec:	ab03      	add	r3, sp, #12
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	ab02      	add	r3, sp, #8
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	ec45 4b10 	vmov	d0, r4, r5
 80052f8:	4653      	mov	r3, sl
 80052fa:	4632      	mov	r2, r6
 80052fc:	f000 fe68 	bl	8005fd0 <_dtoa_r>
 8005300:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005304:	4607      	mov	r7, r0
 8005306:	d102      	bne.n	800530e <__cvt+0x66>
 8005308:	f019 0f01 	tst.w	r9, #1
 800530c:	d022      	beq.n	8005354 <__cvt+0xac>
 800530e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005312:	eb07 0906 	add.w	r9, r7, r6
 8005316:	d110      	bne.n	800533a <__cvt+0x92>
 8005318:	783b      	ldrb	r3, [r7, #0]
 800531a:	2b30      	cmp	r3, #48	; 0x30
 800531c:	d10a      	bne.n	8005334 <__cvt+0x8c>
 800531e:	2200      	movs	r2, #0
 8005320:	2300      	movs	r3, #0
 8005322:	4620      	mov	r0, r4
 8005324:	4629      	mov	r1, r5
 8005326:	f7fb fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800532a:	b918      	cbnz	r0, 8005334 <__cvt+0x8c>
 800532c:	f1c6 0601 	rsb	r6, r6, #1
 8005330:	f8ca 6000 	str.w	r6, [sl]
 8005334:	f8da 3000 	ldr.w	r3, [sl]
 8005338:	4499      	add	r9, r3
 800533a:	2200      	movs	r2, #0
 800533c:	2300      	movs	r3, #0
 800533e:	4620      	mov	r0, r4
 8005340:	4629      	mov	r1, r5
 8005342:	f7fb fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005346:	b108      	cbz	r0, 800534c <__cvt+0xa4>
 8005348:	f8cd 900c 	str.w	r9, [sp, #12]
 800534c:	2230      	movs	r2, #48	; 0x30
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	454b      	cmp	r3, r9
 8005352:	d307      	bcc.n	8005364 <__cvt+0xbc>
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005358:	1bdb      	subs	r3, r3, r7
 800535a:	4638      	mov	r0, r7
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	b004      	add	sp, #16
 8005360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005364:	1c59      	adds	r1, r3, #1
 8005366:	9103      	str	r1, [sp, #12]
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	e7f0      	b.n	800534e <__cvt+0xa6>

0800536c <__exponent>:
 800536c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800536e:	4603      	mov	r3, r0
 8005370:	2900      	cmp	r1, #0
 8005372:	bfb8      	it	lt
 8005374:	4249      	neglt	r1, r1
 8005376:	f803 2b02 	strb.w	r2, [r3], #2
 800537a:	bfb4      	ite	lt
 800537c:	222d      	movlt	r2, #45	; 0x2d
 800537e:	222b      	movge	r2, #43	; 0x2b
 8005380:	2909      	cmp	r1, #9
 8005382:	7042      	strb	r2, [r0, #1]
 8005384:	dd2a      	ble.n	80053dc <__exponent+0x70>
 8005386:	f10d 0207 	add.w	r2, sp, #7
 800538a:	4617      	mov	r7, r2
 800538c:	260a      	movs	r6, #10
 800538e:	4694      	mov	ip, r2
 8005390:	fb91 f5f6 	sdiv	r5, r1, r6
 8005394:	fb06 1415 	mls	r4, r6, r5, r1
 8005398:	3430      	adds	r4, #48	; 0x30
 800539a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800539e:	460c      	mov	r4, r1
 80053a0:	2c63      	cmp	r4, #99	; 0x63
 80053a2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80053a6:	4629      	mov	r1, r5
 80053a8:	dcf1      	bgt.n	800538e <__exponent+0x22>
 80053aa:	3130      	adds	r1, #48	; 0x30
 80053ac:	f1ac 0402 	sub.w	r4, ip, #2
 80053b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80053b4:	1c41      	adds	r1, r0, #1
 80053b6:	4622      	mov	r2, r4
 80053b8:	42ba      	cmp	r2, r7
 80053ba:	d30a      	bcc.n	80053d2 <__exponent+0x66>
 80053bc:	f10d 0209 	add.w	r2, sp, #9
 80053c0:	eba2 020c 	sub.w	r2, r2, ip
 80053c4:	42bc      	cmp	r4, r7
 80053c6:	bf88      	it	hi
 80053c8:	2200      	movhi	r2, #0
 80053ca:	4413      	add	r3, r2
 80053cc:	1a18      	subs	r0, r3, r0
 80053ce:	b003      	add	sp, #12
 80053d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80053d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80053da:	e7ed      	b.n	80053b8 <__exponent+0x4c>
 80053dc:	2330      	movs	r3, #48	; 0x30
 80053de:	3130      	adds	r1, #48	; 0x30
 80053e0:	7083      	strb	r3, [r0, #2]
 80053e2:	70c1      	strb	r1, [r0, #3]
 80053e4:	1d03      	adds	r3, r0, #4
 80053e6:	e7f1      	b.n	80053cc <__exponent+0x60>

080053e8 <_printf_float>:
 80053e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ec:	ed2d 8b02 	vpush	{d8}
 80053f0:	b08d      	sub	sp, #52	; 0x34
 80053f2:	460c      	mov	r4, r1
 80053f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053f8:	4616      	mov	r6, r2
 80053fa:	461f      	mov	r7, r3
 80053fc:	4605      	mov	r5, r0
 80053fe:	f000 fce7 	bl	8005dd0 <_localeconv_r>
 8005402:	f8d0 a000 	ldr.w	sl, [r0]
 8005406:	4650      	mov	r0, sl
 8005408:	f7fa ff32 	bl	8000270 <strlen>
 800540c:	2300      	movs	r3, #0
 800540e:	930a      	str	r3, [sp, #40]	; 0x28
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	9305      	str	r3, [sp, #20]
 8005414:	f8d8 3000 	ldr.w	r3, [r8]
 8005418:	f894 b018 	ldrb.w	fp, [r4, #24]
 800541c:	3307      	adds	r3, #7
 800541e:	f023 0307 	bic.w	r3, r3, #7
 8005422:	f103 0208 	add.w	r2, r3, #8
 8005426:	f8c8 2000 	str.w	r2, [r8]
 800542a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800542e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005432:	9307      	str	r3, [sp, #28]
 8005434:	f8cd 8018 	str.w	r8, [sp, #24]
 8005438:	ee08 0a10 	vmov	s16, r0
 800543c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005444:	4b9e      	ldr	r3, [pc, #632]	; (80056c0 <_printf_float+0x2d8>)
 8005446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800544a:	f7fb fb6f 	bl	8000b2c <__aeabi_dcmpun>
 800544e:	bb88      	cbnz	r0, 80054b4 <_printf_float+0xcc>
 8005450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005454:	4b9a      	ldr	r3, [pc, #616]	; (80056c0 <_printf_float+0x2d8>)
 8005456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800545a:	f7fb fb49 	bl	8000af0 <__aeabi_dcmple>
 800545e:	bb48      	cbnz	r0, 80054b4 <_printf_float+0xcc>
 8005460:	2200      	movs	r2, #0
 8005462:	2300      	movs	r3, #0
 8005464:	4640      	mov	r0, r8
 8005466:	4649      	mov	r1, r9
 8005468:	f7fb fb38 	bl	8000adc <__aeabi_dcmplt>
 800546c:	b110      	cbz	r0, 8005474 <_printf_float+0x8c>
 800546e:	232d      	movs	r3, #45	; 0x2d
 8005470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005474:	4a93      	ldr	r2, [pc, #588]	; (80056c4 <_printf_float+0x2dc>)
 8005476:	4b94      	ldr	r3, [pc, #592]	; (80056c8 <_printf_float+0x2e0>)
 8005478:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800547c:	bf94      	ite	ls
 800547e:	4690      	movls	r8, r2
 8005480:	4698      	movhi	r8, r3
 8005482:	2303      	movs	r3, #3
 8005484:	6123      	str	r3, [r4, #16]
 8005486:	9b05      	ldr	r3, [sp, #20]
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	f04f 0900 	mov.w	r9, #0
 8005492:	9700      	str	r7, [sp, #0]
 8005494:	4633      	mov	r3, r6
 8005496:	aa0b      	add	r2, sp, #44	; 0x2c
 8005498:	4621      	mov	r1, r4
 800549a:	4628      	mov	r0, r5
 800549c:	f000 f9da 	bl	8005854 <_printf_common>
 80054a0:	3001      	adds	r0, #1
 80054a2:	f040 8090 	bne.w	80055c6 <_printf_float+0x1de>
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054aa:	b00d      	add	sp, #52	; 0x34
 80054ac:	ecbd 8b02 	vpop	{d8}
 80054b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	4640      	mov	r0, r8
 80054ba:	4649      	mov	r1, r9
 80054bc:	f7fb fb36 	bl	8000b2c <__aeabi_dcmpun>
 80054c0:	b140      	cbz	r0, 80054d4 <_printf_float+0xec>
 80054c2:	464b      	mov	r3, r9
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bfbc      	itt	lt
 80054c8:	232d      	movlt	r3, #45	; 0x2d
 80054ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054ce:	4a7f      	ldr	r2, [pc, #508]	; (80056cc <_printf_float+0x2e4>)
 80054d0:	4b7f      	ldr	r3, [pc, #508]	; (80056d0 <_printf_float+0x2e8>)
 80054d2:	e7d1      	b.n	8005478 <_printf_float+0x90>
 80054d4:	6863      	ldr	r3, [r4, #4]
 80054d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054da:	9206      	str	r2, [sp, #24]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	d13f      	bne.n	8005560 <_printf_float+0x178>
 80054e0:	2306      	movs	r3, #6
 80054e2:	6063      	str	r3, [r4, #4]
 80054e4:	9b05      	ldr	r3, [sp, #20]
 80054e6:	6861      	ldr	r1, [r4, #4]
 80054e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054ec:	2300      	movs	r3, #0
 80054ee:	9303      	str	r3, [sp, #12]
 80054f0:	ab0a      	add	r3, sp, #40	; 0x28
 80054f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054f6:	ab09      	add	r3, sp, #36	; 0x24
 80054f8:	ec49 8b10 	vmov	d0, r8, r9
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	6022      	str	r2, [r4, #0]
 8005500:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005504:	4628      	mov	r0, r5
 8005506:	f7ff fecf 	bl	80052a8 <__cvt>
 800550a:	9b06      	ldr	r3, [sp, #24]
 800550c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800550e:	2b47      	cmp	r3, #71	; 0x47
 8005510:	4680      	mov	r8, r0
 8005512:	d108      	bne.n	8005526 <_printf_float+0x13e>
 8005514:	1cc8      	adds	r0, r1, #3
 8005516:	db02      	blt.n	800551e <_printf_float+0x136>
 8005518:	6863      	ldr	r3, [r4, #4]
 800551a:	4299      	cmp	r1, r3
 800551c:	dd41      	ble.n	80055a2 <_printf_float+0x1ba>
 800551e:	f1ab 0302 	sub.w	r3, fp, #2
 8005522:	fa5f fb83 	uxtb.w	fp, r3
 8005526:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800552a:	d820      	bhi.n	800556e <_printf_float+0x186>
 800552c:	3901      	subs	r1, #1
 800552e:	465a      	mov	r2, fp
 8005530:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005534:	9109      	str	r1, [sp, #36]	; 0x24
 8005536:	f7ff ff19 	bl	800536c <__exponent>
 800553a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800553c:	1813      	adds	r3, r2, r0
 800553e:	2a01      	cmp	r2, #1
 8005540:	4681      	mov	r9, r0
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	dc02      	bgt.n	800554c <_printf_float+0x164>
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	07d2      	lsls	r2, r2, #31
 800554a:	d501      	bpl.n	8005550 <_printf_float+0x168>
 800554c:	3301      	adds	r3, #1
 800554e:	6123      	str	r3, [r4, #16]
 8005550:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005554:	2b00      	cmp	r3, #0
 8005556:	d09c      	beq.n	8005492 <_printf_float+0xaa>
 8005558:	232d      	movs	r3, #45	; 0x2d
 800555a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800555e:	e798      	b.n	8005492 <_printf_float+0xaa>
 8005560:	9a06      	ldr	r2, [sp, #24]
 8005562:	2a47      	cmp	r2, #71	; 0x47
 8005564:	d1be      	bne.n	80054e4 <_printf_float+0xfc>
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1bc      	bne.n	80054e4 <_printf_float+0xfc>
 800556a:	2301      	movs	r3, #1
 800556c:	e7b9      	b.n	80054e2 <_printf_float+0xfa>
 800556e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005572:	d118      	bne.n	80055a6 <_printf_float+0x1be>
 8005574:	2900      	cmp	r1, #0
 8005576:	6863      	ldr	r3, [r4, #4]
 8005578:	dd0b      	ble.n	8005592 <_printf_float+0x1aa>
 800557a:	6121      	str	r1, [r4, #16]
 800557c:	b913      	cbnz	r3, 8005584 <_printf_float+0x19c>
 800557e:	6822      	ldr	r2, [r4, #0]
 8005580:	07d0      	lsls	r0, r2, #31
 8005582:	d502      	bpl.n	800558a <_printf_float+0x1a2>
 8005584:	3301      	adds	r3, #1
 8005586:	440b      	add	r3, r1
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	65a1      	str	r1, [r4, #88]	; 0x58
 800558c:	f04f 0900 	mov.w	r9, #0
 8005590:	e7de      	b.n	8005550 <_printf_float+0x168>
 8005592:	b913      	cbnz	r3, 800559a <_printf_float+0x1b2>
 8005594:	6822      	ldr	r2, [r4, #0]
 8005596:	07d2      	lsls	r2, r2, #31
 8005598:	d501      	bpl.n	800559e <_printf_float+0x1b6>
 800559a:	3302      	adds	r3, #2
 800559c:	e7f4      	b.n	8005588 <_printf_float+0x1a0>
 800559e:	2301      	movs	r3, #1
 80055a0:	e7f2      	b.n	8005588 <_printf_float+0x1a0>
 80055a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a8:	4299      	cmp	r1, r3
 80055aa:	db05      	blt.n	80055b8 <_printf_float+0x1d0>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	6121      	str	r1, [r4, #16]
 80055b0:	07d8      	lsls	r0, r3, #31
 80055b2:	d5ea      	bpl.n	800558a <_printf_float+0x1a2>
 80055b4:	1c4b      	adds	r3, r1, #1
 80055b6:	e7e7      	b.n	8005588 <_printf_float+0x1a0>
 80055b8:	2900      	cmp	r1, #0
 80055ba:	bfd4      	ite	le
 80055bc:	f1c1 0202 	rsble	r2, r1, #2
 80055c0:	2201      	movgt	r2, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	e7e0      	b.n	8005588 <_printf_float+0x1a0>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	055a      	lsls	r2, r3, #21
 80055ca:	d407      	bmi.n	80055dc <_printf_float+0x1f4>
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	4642      	mov	r2, r8
 80055d0:	4631      	mov	r1, r6
 80055d2:	4628      	mov	r0, r5
 80055d4:	47b8      	blx	r7
 80055d6:	3001      	adds	r0, #1
 80055d8:	d12c      	bne.n	8005634 <_printf_float+0x24c>
 80055da:	e764      	b.n	80054a6 <_printf_float+0xbe>
 80055dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055e0:	f240 80e0 	bls.w	80057a4 <_printf_float+0x3bc>
 80055e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055e8:	2200      	movs	r2, #0
 80055ea:	2300      	movs	r3, #0
 80055ec:	f7fb fa6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d034      	beq.n	800565e <_printf_float+0x276>
 80055f4:	4a37      	ldr	r2, [pc, #220]	; (80056d4 <_printf_float+0x2ec>)
 80055f6:	2301      	movs	r3, #1
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	f43f af51 	beq.w	80054a6 <_printf_float+0xbe>
 8005604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005608:	429a      	cmp	r2, r3
 800560a:	db02      	blt.n	8005612 <_printf_float+0x22a>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	07d8      	lsls	r0, r3, #31
 8005610:	d510      	bpl.n	8005634 <_printf_float+0x24c>
 8005612:	ee18 3a10 	vmov	r3, s16
 8005616:	4652      	mov	r2, sl
 8005618:	4631      	mov	r1, r6
 800561a:	4628      	mov	r0, r5
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	f43f af41 	beq.w	80054a6 <_printf_float+0xbe>
 8005624:	f04f 0800 	mov.w	r8, #0
 8005628:	f104 091a 	add.w	r9, r4, #26
 800562c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562e:	3b01      	subs	r3, #1
 8005630:	4543      	cmp	r3, r8
 8005632:	dc09      	bgt.n	8005648 <_printf_float+0x260>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	079b      	lsls	r3, r3, #30
 8005638:	f100 8107 	bmi.w	800584a <_printf_float+0x462>
 800563c:	68e0      	ldr	r0, [r4, #12]
 800563e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005640:	4298      	cmp	r0, r3
 8005642:	bfb8      	it	lt
 8005644:	4618      	movlt	r0, r3
 8005646:	e730      	b.n	80054aa <_printf_float+0xc2>
 8005648:	2301      	movs	r3, #1
 800564a:	464a      	mov	r2, r9
 800564c:	4631      	mov	r1, r6
 800564e:	4628      	mov	r0, r5
 8005650:	47b8      	blx	r7
 8005652:	3001      	adds	r0, #1
 8005654:	f43f af27 	beq.w	80054a6 <_printf_float+0xbe>
 8005658:	f108 0801 	add.w	r8, r8, #1
 800565c:	e7e6      	b.n	800562c <_printf_float+0x244>
 800565e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	dc39      	bgt.n	80056d8 <_printf_float+0x2f0>
 8005664:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <_printf_float+0x2ec>)
 8005666:	2301      	movs	r3, #1
 8005668:	4631      	mov	r1, r6
 800566a:	4628      	mov	r0, r5
 800566c:	47b8      	blx	r7
 800566e:	3001      	adds	r0, #1
 8005670:	f43f af19 	beq.w	80054a6 <_printf_float+0xbe>
 8005674:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005678:	4313      	orrs	r3, r2
 800567a:	d102      	bne.n	8005682 <_printf_float+0x29a>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	07d9      	lsls	r1, r3, #31
 8005680:	d5d8      	bpl.n	8005634 <_printf_float+0x24c>
 8005682:	ee18 3a10 	vmov	r3, s16
 8005686:	4652      	mov	r2, sl
 8005688:	4631      	mov	r1, r6
 800568a:	4628      	mov	r0, r5
 800568c:	47b8      	blx	r7
 800568e:	3001      	adds	r0, #1
 8005690:	f43f af09 	beq.w	80054a6 <_printf_float+0xbe>
 8005694:	f04f 0900 	mov.w	r9, #0
 8005698:	f104 0a1a 	add.w	sl, r4, #26
 800569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569e:	425b      	negs	r3, r3
 80056a0:	454b      	cmp	r3, r9
 80056a2:	dc01      	bgt.n	80056a8 <_printf_float+0x2c0>
 80056a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056a6:	e792      	b.n	80055ce <_printf_float+0x1e6>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4652      	mov	r2, sl
 80056ac:	4631      	mov	r1, r6
 80056ae:	4628      	mov	r0, r5
 80056b0:	47b8      	blx	r7
 80056b2:	3001      	adds	r0, #1
 80056b4:	f43f aef7 	beq.w	80054a6 <_printf_float+0xbe>
 80056b8:	f109 0901 	add.w	r9, r9, #1
 80056bc:	e7ee      	b.n	800569c <_printf_float+0x2b4>
 80056be:	bf00      	nop
 80056c0:	7fefffff 	.word	0x7fefffff
 80056c4:	0801b880 	.word	0x0801b880
 80056c8:	0801b884 	.word	0x0801b884
 80056cc:	0801b888 	.word	0x0801b888
 80056d0:	0801b88c 	.word	0x0801b88c
 80056d4:	0801b890 	.word	0x0801b890
 80056d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056dc:	429a      	cmp	r2, r3
 80056de:	bfa8      	it	ge
 80056e0:	461a      	movge	r2, r3
 80056e2:	2a00      	cmp	r2, #0
 80056e4:	4691      	mov	r9, r2
 80056e6:	dc37      	bgt.n	8005758 <_printf_float+0x370>
 80056e8:	f04f 0b00 	mov.w	fp, #0
 80056ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056f0:	f104 021a 	add.w	r2, r4, #26
 80056f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056f6:	9305      	str	r3, [sp, #20]
 80056f8:	eba3 0309 	sub.w	r3, r3, r9
 80056fc:	455b      	cmp	r3, fp
 80056fe:	dc33      	bgt.n	8005768 <_printf_float+0x380>
 8005700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005704:	429a      	cmp	r2, r3
 8005706:	db3b      	blt.n	8005780 <_printf_float+0x398>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	07da      	lsls	r2, r3, #31
 800570c:	d438      	bmi.n	8005780 <_printf_float+0x398>
 800570e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005712:	eba2 0903 	sub.w	r9, r2, r3
 8005716:	9b05      	ldr	r3, [sp, #20]
 8005718:	1ad2      	subs	r2, r2, r3
 800571a:	4591      	cmp	r9, r2
 800571c:	bfa8      	it	ge
 800571e:	4691      	movge	r9, r2
 8005720:	f1b9 0f00 	cmp.w	r9, #0
 8005724:	dc35      	bgt.n	8005792 <_printf_float+0x3aa>
 8005726:	f04f 0800 	mov.w	r8, #0
 800572a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800572e:	f104 0a1a 	add.w	sl, r4, #26
 8005732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	eba3 0309 	sub.w	r3, r3, r9
 800573c:	4543      	cmp	r3, r8
 800573e:	f77f af79 	ble.w	8005634 <_printf_float+0x24c>
 8005742:	2301      	movs	r3, #1
 8005744:	4652      	mov	r2, sl
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	47b8      	blx	r7
 800574c:	3001      	adds	r0, #1
 800574e:	f43f aeaa 	beq.w	80054a6 <_printf_float+0xbe>
 8005752:	f108 0801 	add.w	r8, r8, #1
 8005756:	e7ec      	b.n	8005732 <_printf_float+0x34a>
 8005758:	4613      	mov	r3, r2
 800575a:	4631      	mov	r1, r6
 800575c:	4642      	mov	r2, r8
 800575e:	4628      	mov	r0, r5
 8005760:	47b8      	blx	r7
 8005762:	3001      	adds	r0, #1
 8005764:	d1c0      	bne.n	80056e8 <_printf_float+0x300>
 8005766:	e69e      	b.n	80054a6 <_printf_float+0xbe>
 8005768:	2301      	movs	r3, #1
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	9205      	str	r2, [sp, #20]
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	f43f ae97 	beq.w	80054a6 <_printf_float+0xbe>
 8005778:	9a05      	ldr	r2, [sp, #20]
 800577a:	f10b 0b01 	add.w	fp, fp, #1
 800577e:	e7b9      	b.n	80056f4 <_printf_float+0x30c>
 8005780:	ee18 3a10 	vmov	r3, s16
 8005784:	4652      	mov	r2, sl
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	d1be      	bne.n	800570e <_printf_float+0x326>
 8005790:	e689      	b.n	80054a6 <_printf_float+0xbe>
 8005792:	9a05      	ldr	r2, [sp, #20]
 8005794:	464b      	mov	r3, r9
 8005796:	4442      	add	r2, r8
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	d1c1      	bne.n	8005726 <_printf_float+0x33e>
 80057a2:	e680      	b.n	80054a6 <_printf_float+0xbe>
 80057a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057a6:	2a01      	cmp	r2, #1
 80057a8:	dc01      	bgt.n	80057ae <_printf_float+0x3c6>
 80057aa:	07db      	lsls	r3, r3, #31
 80057ac:	d53a      	bpl.n	8005824 <_printf_float+0x43c>
 80057ae:	2301      	movs	r3, #1
 80057b0:	4642      	mov	r2, r8
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b8      	blx	r7
 80057b8:	3001      	adds	r0, #1
 80057ba:	f43f ae74 	beq.w	80054a6 <_printf_float+0xbe>
 80057be:	ee18 3a10 	vmov	r3, s16
 80057c2:	4652      	mov	r2, sl
 80057c4:	4631      	mov	r1, r6
 80057c6:	4628      	mov	r0, r5
 80057c8:	47b8      	blx	r7
 80057ca:	3001      	adds	r0, #1
 80057cc:	f43f ae6b 	beq.w	80054a6 <_printf_float+0xbe>
 80057d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057d4:	2200      	movs	r2, #0
 80057d6:	2300      	movs	r3, #0
 80057d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80057dc:	f7fb f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80057e0:	b9d8      	cbnz	r0, 800581a <_printf_float+0x432>
 80057e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80057e6:	f108 0201 	add.w	r2, r8, #1
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b8      	blx	r7
 80057f0:	3001      	adds	r0, #1
 80057f2:	d10e      	bne.n	8005812 <_printf_float+0x42a>
 80057f4:	e657      	b.n	80054a6 <_printf_float+0xbe>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4652      	mov	r2, sl
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	f43f ae50 	beq.w	80054a6 <_printf_float+0xbe>
 8005806:	f108 0801 	add.w	r8, r8, #1
 800580a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800580c:	3b01      	subs	r3, #1
 800580e:	4543      	cmp	r3, r8
 8005810:	dcf1      	bgt.n	80057f6 <_printf_float+0x40e>
 8005812:	464b      	mov	r3, r9
 8005814:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005818:	e6da      	b.n	80055d0 <_printf_float+0x1e8>
 800581a:	f04f 0800 	mov.w	r8, #0
 800581e:	f104 0a1a 	add.w	sl, r4, #26
 8005822:	e7f2      	b.n	800580a <_printf_float+0x422>
 8005824:	2301      	movs	r3, #1
 8005826:	4642      	mov	r2, r8
 8005828:	e7df      	b.n	80057ea <_printf_float+0x402>
 800582a:	2301      	movs	r3, #1
 800582c:	464a      	mov	r2, r9
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	47b8      	blx	r7
 8005834:	3001      	adds	r0, #1
 8005836:	f43f ae36 	beq.w	80054a6 <_printf_float+0xbe>
 800583a:	f108 0801 	add.w	r8, r8, #1
 800583e:	68e3      	ldr	r3, [r4, #12]
 8005840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005842:	1a5b      	subs	r3, r3, r1
 8005844:	4543      	cmp	r3, r8
 8005846:	dcf0      	bgt.n	800582a <_printf_float+0x442>
 8005848:	e6f8      	b.n	800563c <_printf_float+0x254>
 800584a:	f04f 0800 	mov.w	r8, #0
 800584e:	f104 0919 	add.w	r9, r4, #25
 8005852:	e7f4      	b.n	800583e <_printf_float+0x456>

08005854 <_printf_common>:
 8005854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005858:	4616      	mov	r6, r2
 800585a:	4699      	mov	r9, r3
 800585c:	688a      	ldr	r2, [r1, #8]
 800585e:	690b      	ldr	r3, [r1, #16]
 8005860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005864:	4293      	cmp	r3, r2
 8005866:	bfb8      	it	lt
 8005868:	4613      	movlt	r3, r2
 800586a:	6033      	str	r3, [r6, #0]
 800586c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005870:	4607      	mov	r7, r0
 8005872:	460c      	mov	r4, r1
 8005874:	b10a      	cbz	r2, 800587a <_printf_common+0x26>
 8005876:	3301      	adds	r3, #1
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	0699      	lsls	r1, r3, #26
 800587e:	bf42      	ittt	mi
 8005880:	6833      	ldrmi	r3, [r6, #0]
 8005882:	3302      	addmi	r3, #2
 8005884:	6033      	strmi	r3, [r6, #0]
 8005886:	6825      	ldr	r5, [r4, #0]
 8005888:	f015 0506 	ands.w	r5, r5, #6
 800588c:	d106      	bne.n	800589c <_printf_common+0x48>
 800588e:	f104 0a19 	add.w	sl, r4, #25
 8005892:	68e3      	ldr	r3, [r4, #12]
 8005894:	6832      	ldr	r2, [r6, #0]
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	42ab      	cmp	r3, r5
 800589a:	dc26      	bgt.n	80058ea <_printf_common+0x96>
 800589c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058a0:	1e13      	subs	r3, r2, #0
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	bf18      	it	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	0692      	lsls	r2, r2, #26
 80058aa:	d42b      	bmi.n	8005904 <_printf_common+0xb0>
 80058ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058b0:	4649      	mov	r1, r9
 80058b2:	4638      	mov	r0, r7
 80058b4:	47c0      	blx	r8
 80058b6:	3001      	adds	r0, #1
 80058b8:	d01e      	beq.n	80058f8 <_printf_common+0xa4>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	f003 0306 	and.w	r3, r3, #6
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf02      	ittt	eq
 80058c6:	68e5      	ldreq	r5, [r4, #12]
 80058c8:	6833      	ldreq	r3, [r6, #0]
 80058ca:	1aed      	subeq	r5, r5, r3
 80058cc:	68a3      	ldr	r3, [r4, #8]
 80058ce:	bf0c      	ite	eq
 80058d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058d4:	2500      	movne	r5, #0
 80058d6:	4293      	cmp	r3, r2
 80058d8:	bfc4      	itt	gt
 80058da:	1a9b      	subgt	r3, r3, r2
 80058dc:	18ed      	addgt	r5, r5, r3
 80058de:	2600      	movs	r6, #0
 80058e0:	341a      	adds	r4, #26
 80058e2:	42b5      	cmp	r5, r6
 80058e4:	d11a      	bne.n	800591c <_printf_common+0xc8>
 80058e6:	2000      	movs	r0, #0
 80058e8:	e008      	b.n	80058fc <_printf_common+0xa8>
 80058ea:	2301      	movs	r3, #1
 80058ec:	4652      	mov	r2, sl
 80058ee:	4649      	mov	r1, r9
 80058f0:	4638      	mov	r0, r7
 80058f2:	47c0      	blx	r8
 80058f4:	3001      	adds	r0, #1
 80058f6:	d103      	bne.n	8005900 <_printf_common+0xac>
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005900:	3501      	adds	r5, #1
 8005902:	e7c6      	b.n	8005892 <_printf_common+0x3e>
 8005904:	18e1      	adds	r1, r4, r3
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	2030      	movs	r0, #48	; 0x30
 800590a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800590e:	4422      	add	r2, r4
 8005910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005918:	3302      	adds	r3, #2
 800591a:	e7c7      	b.n	80058ac <_printf_common+0x58>
 800591c:	2301      	movs	r3, #1
 800591e:	4622      	mov	r2, r4
 8005920:	4649      	mov	r1, r9
 8005922:	4638      	mov	r0, r7
 8005924:	47c0      	blx	r8
 8005926:	3001      	adds	r0, #1
 8005928:	d0e6      	beq.n	80058f8 <_printf_common+0xa4>
 800592a:	3601      	adds	r6, #1
 800592c:	e7d9      	b.n	80058e2 <_printf_common+0x8e>
	...

08005930 <_printf_i>:
 8005930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005934:	7e0f      	ldrb	r7, [r1, #24]
 8005936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005938:	2f78      	cmp	r7, #120	; 0x78
 800593a:	4691      	mov	r9, r2
 800593c:	4680      	mov	r8, r0
 800593e:	460c      	mov	r4, r1
 8005940:	469a      	mov	sl, r3
 8005942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005946:	d807      	bhi.n	8005958 <_printf_i+0x28>
 8005948:	2f62      	cmp	r7, #98	; 0x62
 800594a:	d80a      	bhi.n	8005962 <_printf_i+0x32>
 800594c:	2f00      	cmp	r7, #0
 800594e:	f000 80d4 	beq.w	8005afa <_printf_i+0x1ca>
 8005952:	2f58      	cmp	r7, #88	; 0x58
 8005954:	f000 80c0 	beq.w	8005ad8 <_printf_i+0x1a8>
 8005958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800595c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005960:	e03a      	b.n	80059d8 <_printf_i+0xa8>
 8005962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005966:	2b15      	cmp	r3, #21
 8005968:	d8f6      	bhi.n	8005958 <_printf_i+0x28>
 800596a:	a101      	add	r1, pc, #4	; (adr r1, 8005970 <_printf_i+0x40>)
 800596c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005970:	080059c9 	.word	0x080059c9
 8005974:	080059dd 	.word	0x080059dd
 8005978:	08005959 	.word	0x08005959
 800597c:	08005959 	.word	0x08005959
 8005980:	08005959 	.word	0x08005959
 8005984:	08005959 	.word	0x08005959
 8005988:	080059dd 	.word	0x080059dd
 800598c:	08005959 	.word	0x08005959
 8005990:	08005959 	.word	0x08005959
 8005994:	08005959 	.word	0x08005959
 8005998:	08005959 	.word	0x08005959
 800599c:	08005ae1 	.word	0x08005ae1
 80059a0:	08005a09 	.word	0x08005a09
 80059a4:	08005a9b 	.word	0x08005a9b
 80059a8:	08005959 	.word	0x08005959
 80059ac:	08005959 	.word	0x08005959
 80059b0:	08005b03 	.word	0x08005b03
 80059b4:	08005959 	.word	0x08005959
 80059b8:	08005a09 	.word	0x08005a09
 80059bc:	08005959 	.word	0x08005959
 80059c0:	08005959 	.word	0x08005959
 80059c4:	08005aa3 	.word	0x08005aa3
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	1d1a      	adds	r2, r3, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	602a      	str	r2, [r5, #0]
 80059d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059d8:	2301      	movs	r3, #1
 80059da:	e09f      	b.n	8005b1c <_printf_i+0x1ec>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	0607      	lsls	r7, r0, #24
 80059e2:	f103 0104 	add.w	r1, r3, #4
 80059e6:	6029      	str	r1, [r5, #0]
 80059e8:	d501      	bpl.n	80059ee <_printf_i+0xbe>
 80059ea:	681e      	ldr	r6, [r3, #0]
 80059ec:	e003      	b.n	80059f6 <_printf_i+0xc6>
 80059ee:	0646      	lsls	r6, r0, #25
 80059f0:	d5fb      	bpl.n	80059ea <_printf_i+0xba>
 80059f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059f6:	2e00      	cmp	r6, #0
 80059f8:	da03      	bge.n	8005a02 <_printf_i+0xd2>
 80059fa:	232d      	movs	r3, #45	; 0x2d
 80059fc:	4276      	negs	r6, r6
 80059fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a02:	485a      	ldr	r0, [pc, #360]	; (8005b6c <_printf_i+0x23c>)
 8005a04:	230a      	movs	r3, #10
 8005a06:	e012      	b.n	8005a2e <_printf_i+0xfe>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	6820      	ldr	r0, [r4, #0]
 8005a0c:	1d19      	adds	r1, r3, #4
 8005a0e:	6029      	str	r1, [r5, #0]
 8005a10:	0605      	lsls	r5, r0, #24
 8005a12:	d501      	bpl.n	8005a18 <_printf_i+0xe8>
 8005a14:	681e      	ldr	r6, [r3, #0]
 8005a16:	e002      	b.n	8005a1e <_printf_i+0xee>
 8005a18:	0641      	lsls	r1, r0, #25
 8005a1a:	d5fb      	bpl.n	8005a14 <_printf_i+0xe4>
 8005a1c:	881e      	ldrh	r6, [r3, #0]
 8005a1e:	4853      	ldr	r0, [pc, #332]	; (8005b6c <_printf_i+0x23c>)
 8005a20:	2f6f      	cmp	r7, #111	; 0x6f
 8005a22:	bf0c      	ite	eq
 8005a24:	2308      	moveq	r3, #8
 8005a26:	230a      	movne	r3, #10
 8005a28:	2100      	movs	r1, #0
 8005a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a2e:	6865      	ldr	r5, [r4, #4]
 8005a30:	60a5      	str	r5, [r4, #8]
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	bfa2      	ittt	ge
 8005a36:	6821      	ldrge	r1, [r4, #0]
 8005a38:	f021 0104 	bicge.w	r1, r1, #4
 8005a3c:	6021      	strge	r1, [r4, #0]
 8005a3e:	b90e      	cbnz	r6, 8005a44 <_printf_i+0x114>
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	d04b      	beq.n	8005adc <_printf_i+0x1ac>
 8005a44:	4615      	mov	r5, r2
 8005a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a4e:	5dc7      	ldrb	r7, [r0, r7]
 8005a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a54:	4637      	mov	r7, r6
 8005a56:	42bb      	cmp	r3, r7
 8005a58:	460e      	mov	r6, r1
 8005a5a:	d9f4      	bls.n	8005a46 <_printf_i+0x116>
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d10b      	bne.n	8005a78 <_printf_i+0x148>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	07de      	lsls	r6, r3, #31
 8005a64:	d508      	bpl.n	8005a78 <_printf_i+0x148>
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	6861      	ldr	r1, [r4, #4]
 8005a6a:	4299      	cmp	r1, r3
 8005a6c:	bfde      	ittt	le
 8005a6e:	2330      	movle	r3, #48	; 0x30
 8005a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a78:	1b52      	subs	r2, r2, r5
 8005a7a:	6122      	str	r2, [r4, #16]
 8005a7c:	f8cd a000 	str.w	sl, [sp]
 8005a80:	464b      	mov	r3, r9
 8005a82:	aa03      	add	r2, sp, #12
 8005a84:	4621      	mov	r1, r4
 8005a86:	4640      	mov	r0, r8
 8005a88:	f7ff fee4 	bl	8005854 <_printf_common>
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d14a      	bne.n	8005b26 <_printf_i+0x1f6>
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a94:	b004      	add	sp, #16
 8005a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	f043 0320 	orr.w	r3, r3, #32
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	4833      	ldr	r0, [pc, #204]	; (8005b70 <_printf_i+0x240>)
 8005aa4:	2778      	movs	r7, #120	; 0x78
 8005aa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	6829      	ldr	r1, [r5, #0]
 8005aae:	061f      	lsls	r7, r3, #24
 8005ab0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ab4:	d402      	bmi.n	8005abc <_printf_i+0x18c>
 8005ab6:	065f      	lsls	r7, r3, #25
 8005ab8:	bf48      	it	mi
 8005aba:	b2b6      	uxthmi	r6, r6
 8005abc:	07df      	lsls	r7, r3, #31
 8005abe:	bf48      	it	mi
 8005ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac4:	6029      	str	r1, [r5, #0]
 8005ac6:	bf48      	it	mi
 8005ac8:	6023      	strmi	r3, [r4, #0]
 8005aca:	b91e      	cbnz	r6, 8005ad4 <_printf_i+0x1a4>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	f023 0320 	bic.w	r3, r3, #32
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	e7a7      	b.n	8005a28 <_printf_i+0xf8>
 8005ad8:	4824      	ldr	r0, [pc, #144]	; (8005b6c <_printf_i+0x23c>)
 8005ada:	e7e4      	b.n	8005aa6 <_printf_i+0x176>
 8005adc:	4615      	mov	r5, r2
 8005ade:	e7bd      	b.n	8005a5c <_printf_i+0x12c>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	6826      	ldr	r6, [r4, #0]
 8005ae4:	6961      	ldr	r1, [r4, #20]
 8005ae6:	1d18      	adds	r0, r3, #4
 8005ae8:	6028      	str	r0, [r5, #0]
 8005aea:	0635      	lsls	r5, r6, #24
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	d501      	bpl.n	8005af4 <_printf_i+0x1c4>
 8005af0:	6019      	str	r1, [r3, #0]
 8005af2:	e002      	b.n	8005afa <_printf_i+0x1ca>
 8005af4:	0670      	lsls	r0, r6, #25
 8005af6:	d5fb      	bpl.n	8005af0 <_printf_i+0x1c0>
 8005af8:	8019      	strh	r1, [r3, #0]
 8005afa:	2300      	movs	r3, #0
 8005afc:	6123      	str	r3, [r4, #16]
 8005afe:	4615      	mov	r5, r2
 8005b00:	e7bc      	b.n	8005a7c <_printf_i+0x14c>
 8005b02:	682b      	ldr	r3, [r5, #0]
 8005b04:	1d1a      	adds	r2, r3, #4
 8005b06:	602a      	str	r2, [r5, #0]
 8005b08:	681d      	ldr	r5, [r3, #0]
 8005b0a:	6862      	ldr	r2, [r4, #4]
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f7fa fb5e 	bl	80001d0 <memchr>
 8005b14:	b108      	cbz	r0, 8005b1a <_printf_i+0x1ea>
 8005b16:	1b40      	subs	r0, r0, r5
 8005b18:	6060      	str	r0, [r4, #4]
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b24:	e7aa      	b.n	8005a7c <_printf_i+0x14c>
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	462a      	mov	r2, r5
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	47d0      	blx	sl
 8005b30:	3001      	adds	r0, #1
 8005b32:	d0ad      	beq.n	8005a90 <_printf_i+0x160>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	079b      	lsls	r3, r3, #30
 8005b38:	d413      	bmi.n	8005b62 <_printf_i+0x232>
 8005b3a:	68e0      	ldr	r0, [r4, #12]
 8005b3c:	9b03      	ldr	r3, [sp, #12]
 8005b3e:	4298      	cmp	r0, r3
 8005b40:	bfb8      	it	lt
 8005b42:	4618      	movlt	r0, r3
 8005b44:	e7a6      	b.n	8005a94 <_printf_i+0x164>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	47d0      	blx	sl
 8005b50:	3001      	adds	r0, #1
 8005b52:	d09d      	beq.n	8005a90 <_printf_i+0x160>
 8005b54:	3501      	adds	r5, #1
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	9903      	ldr	r1, [sp, #12]
 8005b5a:	1a5b      	subs	r3, r3, r1
 8005b5c:	42ab      	cmp	r3, r5
 8005b5e:	dcf2      	bgt.n	8005b46 <_printf_i+0x216>
 8005b60:	e7eb      	b.n	8005b3a <_printf_i+0x20a>
 8005b62:	2500      	movs	r5, #0
 8005b64:	f104 0619 	add.w	r6, r4, #25
 8005b68:	e7f5      	b.n	8005b56 <_printf_i+0x226>
 8005b6a:	bf00      	nop
 8005b6c:	0801b892 	.word	0x0801b892
 8005b70:	0801b8a3 	.word	0x0801b8a3

08005b74 <std>:
 8005b74:	2300      	movs	r3, #0
 8005b76:	b510      	push	{r4, lr}
 8005b78:	4604      	mov	r4, r0
 8005b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b82:	6083      	str	r3, [r0, #8]
 8005b84:	8181      	strh	r1, [r0, #12]
 8005b86:	6643      	str	r3, [r0, #100]	; 0x64
 8005b88:	81c2      	strh	r2, [r0, #14]
 8005b8a:	6183      	str	r3, [r0, #24]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	2208      	movs	r2, #8
 8005b90:	305c      	adds	r0, #92	; 0x5c
 8005b92:	f000 f914 	bl	8005dbe <memset>
 8005b96:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <std+0x58>)
 8005b98:	6263      	str	r3, [r4, #36]	; 0x24
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <std+0x5c>)
 8005b9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <std+0x60>)
 8005ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <std+0x64>)
 8005ba4:	6323      	str	r3, [r4, #48]	; 0x30
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <std+0x68>)
 8005ba8:	6224      	str	r4, [r4, #32]
 8005baa:	429c      	cmp	r4, r3
 8005bac:	d006      	beq.n	8005bbc <std+0x48>
 8005bae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005bb2:	4294      	cmp	r4, r2
 8005bb4:	d002      	beq.n	8005bbc <std+0x48>
 8005bb6:	33d0      	adds	r3, #208	; 0xd0
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	d105      	bne.n	8005bc8 <std+0x54>
 8005bbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc4:	f000 b978 	b.w	8005eb8 <__retarget_lock_init_recursive>
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	bf00      	nop
 8005bcc:	08005d39 	.word	0x08005d39
 8005bd0:	08005d5b 	.word	0x08005d5b
 8005bd4:	08005d93 	.word	0x08005d93
 8005bd8:	08005db7 	.word	0x08005db7
 8005bdc:	20000c9c 	.word	0x20000c9c

08005be0 <stdio_exit_handler>:
 8005be0:	4a02      	ldr	r2, [pc, #8]	; (8005bec <stdio_exit_handler+0xc>)
 8005be2:	4903      	ldr	r1, [pc, #12]	; (8005bf0 <stdio_exit_handler+0x10>)
 8005be4:	4803      	ldr	r0, [pc, #12]	; (8005bf4 <stdio_exit_handler+0x14>)
 8005be6:	f000 b869 	b.w	8005cbc <_fwalk_sglue>
 8005bea:	bf00      	nop
 8005bec:	20000010 	.word	0x20000010
 8005bf0:	08007869 	.word	0x08007869
 8005bf4:	2000001c 	.word	0x2000001c

08005bf8 <cleanup_stdio>:
 8005bf8:	6841      	ldr	r1, [r0, #4]
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <cleanup_stdio+0x34>)
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	4604      	mov	r4, r0
 8005c02:	d001      	beq.n	8005c08 <cleanup_stdio+0x10>
 8005c04:	f001 fe30 	bl	8007868 <_fflush_r>
 8005c08:	68a1      	ldr	r1, [r4, #8]
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <cleanup_stdio+0x38>)
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	d002      	beq.n	8005c16 <cleanup_stdio+0x1e>
 8005c10:	4620      	mov	r0, r4
 8005c12:	f001 fe29 	bl	8007868 <_fflush_r>
 8005c16:	68e1      	ldr	r1, [r4, #12]
 8005c18:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <cleanup_stdio+0x3c>)
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	d004      	beq.n	8005c28 <cleanup_stdio+0x30>
 8005c1e:	4620      	mov	r0, r4
 8005c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c24:	f001 be20 	b.w	8007868 <_fflush_r>
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000c9c 	.word	0x20000c9c
 8005c30:	20000d04 	.word	0x20000d04
 8005c34:	20000d6c 	.word	0x20000d6c

08005c38 <global_stdio_init.part.0>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <global_stdio_init.part.0+0x30>)
 8005c3c:	4c0b      	ldr	r4, [pc, #44]	; (8005c6c <global_stdio_init.part.0+0x34>)
 8005c3e:	4a0c      	ldr	r2, [pc, #48]	; (8005c70 <global_stdio_init.part.0+0x38>)
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	4620      	mov	r0, r4
 8005c44:	2200      	movs	r2, #0
 8005c46:	2104      	movs	r1, #4
 8005c48:	f7ff ff94 	bl	8005b74 <std>
 8005c4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c50:	2201      	movs	r2, #1
 8005c52:	2109      	movs	r1, #9
 8005c54:	f7ff ff8e 	bl	8005b74 <std>
 8005c58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c62:	2112      	movs	r1, #18
 8005c64:	f7ff bf86 	b.w	8005b74 <std>
 8005c68:	20000dd4 	.word	0x20000dd4
 8005c6c:	20000c9c 	.word	0x20000c9c
 8005c70:	08005be1 	.word	0x08005be1

08005c74 <__sfp_lock_acquire>:
 8005c74:	4801      	ldr	r0, [pc, #4]	; (8005c7c <__sfp_lock_acquire+0x8>)
 8005c76:	f000 b920 	b.w	8005eba <__retarget_lock_acquire_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	20000ddd 	.word	0x20000ddd

08005c80 <__sfp_lock_release>:
 8005c80:	4801      	ldr	r0, [pc, #4]	; (8005c88 <__sfp_lock_release+0x8>)
 8005c82:	f000 b91b 	b.w	8005ebc <__retarget_lock_release_recursive>
 8005c86:	bf00      	nop
 8005c88:	20000ddd 	.word	0x20000ddd

08005c8c <__sinit>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	4604      	mov	r4, r0
 8005c90:	f7ff fff0 	bl	8005c74 <__sfp_lock_acquire>
 8005c94:	6a23      	ldr	r3, [r4, #32]
 8005c96:	b11b      	cbz	r3, 8005ca0 <__sinit+0x14>
 8005c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c9c:	f7ff bff0 	b.w	8005c80 <__sfp_lock_release>
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <__sinit+0x28>)
 8005ca2:	6223      	str	r3, [r4, #32]
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <__sinit+0x2c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f5      	bne.n	8005c98 <__sinit+0xc>
 8005cac:	f7ff ffc4 	bl	8005c38 <global_stdio_init.part.0>
 8005cb0:	e7f2      	b.n	8005c98 <__sinit+0xc>
 8005cb2:	bf00      	nop
 8005cb4:	08005bf9 	.word	0x08005bf9
 8005cb8:	20000dd4 	.word	0x20000dd4

08005cbc <_fwalk_sglue>:
 8005cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc0:	4607      	mov	r7, r0
 8005cc2:	4688      	mov	r8, r1
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ccc:	f1b9 0901 	subs.w	r9, r9, #1
 8005cd0:	d505      	bpl.n	8005cde <_fwalk_sglue+0x22>
 8005cd2:	6824      	ldr	r4, [r4, #0]
 8005cd4:	2c00      	cmp	r4, #0
 8005cd6:	d1f7      	bne.n	8005cc8 <_fwalk_sglue+0xc>
 8005cd8:	4630      	mov	r0, r6
 8005cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cde:	89ab      	ldrh	r3, [r5, #12]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d907      	bls.n	8005cf4 <_fwalk_sglue+0x38>
 8005ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	d003      	beq.n	8005cf4 <_fwalk_sglue+0x38>
 8005cec:	4629      	mov	r1, r5
 8005cee:	4638      	mov	r0, r7
 8005cf0:	47c0      	blx	r8
 8005cf2:	4306      	orrs	r6, r0
 8005cf4:	3568      	adds	r5, #104	; 0x68
 8005cf6:	e7e9      	b.n	8005ccc <_fwalk_sglue+0x10>

08005cf8 <siprintf>:
 8005cf8:	b40e      	push	{r1, r2, r3}
 8005cfa:	b500      	push	{lr}
 8005cfc:	b09c      	sub	sp, #112	; 0x70
 8005cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8005d00:	9002      	str	r0, [sp, #8]
 8005d02:	9006      	str	r0, [sp, #24]
 8005d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d08:	4809      	ldr	r0, [pc, #36]	; (8005d30 <siprintf+0x38>)
 8005d0a:	9107      	str	r1, [sp, #28]
 8005d0c:	9104      	str	r1, [sp, #16]
 8005d0e:	4909      	ldr	r1, [pc, #36]	; (8005d34 <siprintf+0x3c>)
 8005d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d14:	9105      	str	r1, [sp, #20]
 8005d16:	6800      	ldr	r0, [r0, #0]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	a902      	add	r1, sp, #8
 8005d1c:	f001 fc20 	bl	8007560 <_svfiprintf_r>
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	b01c      	add	sp, #112	; 0x70
 8005d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d2c:	b003      	add	sp, #12
 8005d2e:	4770      	bx	lr
 8005d30:	20000068 	.word	0x20000068
 8005d34:	ffff0208 	.word	0xffff0208

08005d38 <__sread>:
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d40:	f000 f86c 	bl	8005e1c <_read_r>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	bfab      	itete	ge
 8005d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d4c:	181b      	addge	r3, r3, r0
 8005d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d52:	bfac      	ite	ge
 8005d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d56:	81a3      	strhlt	r3, [r4, #12]
 8005d58:	bd10      	pop	{r4, pc}

08005d5a <__swrite>:
 8005d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5e:	461f      	mov	r7, r3
 8005d60:	898b      	ldrh	r3, [r1, #12]
 8005d62:	05db      	lsls	r3, r3, #23
 8005d64:	4605      	mov	r5, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	4616      	mov	r6, r2
 8005d6a:	d505      	bpl.n	8005d78 <__swrite+0x1e>
 8005d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d70:	2302      	movs	r3, #2
 8005d72:	2200      	movs	r2, #0
 8005d74:	f000 f840 	bl	8005df8 <_lseek_r>
 8005d78:	89a3      	ldrh	r3, [r4, #12]
 8005d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	4632      	mov	r2, r6
 8005d86:	463b      	mov	r3, r7
 8005d88:	4628      	mov	r0, r5
 8005d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8e:	f000 b857 	b.w	8005e40 <_write_r>

08005d92 <__sseek>:
 8005d92:	b510      	push	{r4, lr}
 8005d94:	460c      	mov	r4, r1
 8005d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d9a:	f000 f82d 	bl	8005df8 <_lseek_r>
 8005d9e:	1c43      	adds	r3, r0, #1
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	bf15      	itete	ne
 8005da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dae:	81a3      	strheq	r3, [r4, #12]
 8005db0:	bf18      	it	ne
 8005db2:	81a3      	strhne	r3, [r4, #12]
 8005db4:	bd10      	pop	{r4, pc}

08005db6 <__sclose>:
 8005db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dba:	f000 b80d 	b.w	8005dd8 <_close_r>

08005dbe <memset>:
 8005dbe:	4402      	add	r2, r0
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d100      	bne.n	8005dc8 <memset+0xa>
 8005dc6:	4770      	bx	lr
 8005dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dcc:	e7f9      	b.n	8005dc2 <memset+0x4>
	...

08005dd0 <_localeconv_r>:
 8005dd0:	4800      	ldr	r0, [pc, #0]	; (8005dd4 <_localeconv_r+0x4>)
 8005dd2:	4770      	bx	lr
 8005dd4:	2000015c 	.word	0x2000015c

08005dd8 <_close_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d06      	ldr	r5, [pc, #24]	; (8005df4 <_close_r+0x1c>)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	f7fb fb8b 	bl	80014fe <_close>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_close_r+0x1a>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_close_r+0x1a>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	20000dd8 	.word	0x20000dd8

08005df8 <_lseek_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d07      	ldr	r5, [pc, #28]	; (8005e18 <_lseek_r+0x20>)
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	2200      	movs	r2, #0
 8005e04:	602a      	str	r2, [r5, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f7fb fba0 	bl	800154c <_lseek>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_lseek_r+0x1e>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_lseek_r+0x1e>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	20000dd8 	.word	0x20000dd8

08005e1c <_read_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4d07      	ldr	r5, [pc, #28]	; (8005e3c <_read_r+0x20>)
 8005e20:	4604      	mov	r4, r0
 8005e22:	4608      	mov	r0, r1
 8005e24:	4611      	mov	r1, r2
 8005e26:	2200      	movs	r2, #0
 8005e28:	602a      	str	r2, [r5, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f7fb fb2e 	bl	800148c <_read>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_read_r+0x1e>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_read_r+0x1e>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20000dd8 	.word	0x20000dd8

08005e40 <_write_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d07      	ldr	r5, [pc, #28]	; (8005e60 <_write_r+0x20>)
 8005e44:	4604      	mov	r4, r0
 8005e46:	4608      	mov	r0, r1
 8005e48:	4611      	mov	r1, r2
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	602a      	str	r2, [r5, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7fb fb39 	bl	80014c6 <_write>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_write_r+0x1e>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_write_r+0x1e>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	20000dd8 	.word	0x20000dd8

08005e64 <__errno>:
 8005e64:	4b01      	ldr	r3, [pc, #4]	; (8005e6c <__errno+0x8>)
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000068 	.word	0x20000068

08005e70 <__libc_init_array>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	4d0d      	ldr	r5, [pc, #52]	; (8005ea8 <__libc_init_array+0x38>)
 8005e74:	4c0d      	ldr	r4, [pc, #52]	; (8005eac <__libc_init_array+0x3c>)
 8005e76:	1b64      	subs	r4, r4, r5
 8005e78:	10a4      	asrs	r4, r4, #2
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	42a6      	cmp	r6, r4
 8005e7e:	d109      	bne.n	8005e94 <__libc_init_array+0x24>
 8005e80:	4d0b      	ldr	r5, [pc, #44]	; (8005eb0 <__libc_init_array+0x40>)
 8005e82:	4c0c      	ldr	r4, [pc, #48]	; (8005eb4 <__libc_init_array+0x44>)
 8005e84:	f002 f8b6 	bl	8007ff4 <_init>
 8005e88:	1b64      	subs	r4, r4, r5
 8005e8a:	10a4      	asrs	r4, r4, #2
 8005e8c:	2600      	movs	r6, #0
 8005e8e:	42a6      	cmp	r6, r4
 8005e90:	d105      	bne.n	8005e9e <__libc_init_array+0x2e>
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e98:	4798      	blx	r3
 8005e9a:	3601      	adds	r6, #1
 8005e9c:	e7ee      	b.n	8005e7c <__libc_init_array+0xc>
 8005e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea2:	4798      	blx	r3
 8005ea4:	3601      	adds	r6, #1
 8005ea6:	e7f2      	b.n	8005e8e <__libc_init_array+0x1e>
 8005ea8:	0801bbfc 	.word	0x0801bbfc
 8005eac:	0801bbfc 	.word	0x0801bbfc
 8005eb0:	0801bbfc 	.word	0x0801bbfc
 8005eb4:	0801bc00 	.word	0x0801bc00

08005eb8 <__retarget_lock_init_recursive>:
 8005eb8:	4770      	bx	lr

08005eba <__retarget_lock_acquire_recursive>:
 8005eba:	4770      	bx	lr

08005ebc <__retarget_lock_release_recursive>:
 8005ebc:	4770      	bx	lr

08005ebe <quorem>:
 8005ebe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec2:	6903      	ldr	r3, [r0, #16]
 8005ec4:	690c      	ldr	r4, [r1, #16]
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	4607      	mov	r7, r0
 8005eca:	db7e      	blt.n	8005fca <quorem+0x10c>
 8005ecc:	3c01      	subs	r4, #1
 8005ece:	f101 0814 	add.w	r8, r1, #20
 8005ed2:	f100 0514 	add.w	r5, r0, #20
 8005ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005eec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ef4:	d331      	bcc.n	8005f5a <quorem+0x9c>
 8005ef6:	f04f 0e00 	mov.w	lr, #0
 8005efa:	4640      	mov	r0, r8
 8005efc:	46ac      	mov	ip, r5
 8005efe:	46f2      	mov	sl, lr
 8005f00:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f04:	b293      	uxth	r3, r2
 8005f06:	fb06 e303 	mla	r3, r6, r3, lr
 8005f0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f0e:	0c1a      	lsrs	r2, r3, #16
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	ebaa 0303 	sub.w	r3, sl, r3
 8005f16:	f8dc a000 	ldr.w	sl, [ip]
 8005f1a:	fa13 f38a 	uxtah	r3, r3, sl
 8005f1e:	fb06 220e 	mla	r2, r6, lr, r2
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	9b00      	ldr	r3, [sp, #0]
 8005f26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f2a:	b292      	uxth	r2, r2
 8005f2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f34:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f38:	4581      	cmp	r9, r0
 8005f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f3e:	f84c 3b04 	str.w	r3, [ip], #4
 8005f42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f46:	d2db      	bcs.n	8005f00 <quorem+0x42>
 8005f48:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f4c:	b92b      	cbnz	r3, 8005f5a <quorem+0x9c>
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	3b04      	subs	r3, #4
 8005f52:	429d      	cmp	r5, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	d32c      	bcc.n	8005fb2 <quorem+0xf4>
 8005f58:	613c      	str	r4, [r7, #16]
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	f001 f9a6 	bl	80072ac <__mcmp>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	db22      	blt.n	8005faa <quorem+0xec>
 8005f64:	3601      	adds	r6, #1
 8005f66:	4629      	mov	r1, r5
 8005f68:	2000      	movs	r0, #0
 8005f6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f6e:	f8d1 c000 	ldr.w	ip, [r1]
 8005f72:	b293      	uxth	r3, r2
 8005f74:	1ac3      	subs	r3, r0, r3
 8005f76:	0c12      	lsrs	r2, r2, #16
 8005f78:	fa13 f38c 	uxtah	r3, r3, ip
 8005f7c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f8a:	45c1      	cmp	r9, r8
 8005f8c:	f841 3b04 	str.w	r3, [r1], #4
 8005f90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f94:	d2e9      	bcs.n	8005f6a <quorem+0xac>
 8005f96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f9e:	b922      	cbnz	r2, 8005faa <quorem+0xec>
 8005fa0:	3b04      	subs	r3, #4
 8005fa2:	429d      	cmp	r5, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	d30a      	bcc.n	8005fbe <quorem+0x100>
 8005fa8:	613c      	str	r4, [r7, #16]
 8005faa:	4630      	mov	r0, r6
 8005fac:	b003      	add	sp, #12
 8005fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb2:	6812      	ldr	r2, [r2, #0]
 8005fb4:	3b04      	subs	r3, #4
 8005fb6:	2a00      	cmp	r2, #0
 8005fb8:	d1ce      	bne.n	8005f58 <quorem+0x9a>
 8005fba:	3c01      	subs	r4, #1
 8005fbc:	e7c9      	b.n	8005f52 <quorem+0x94>
 8005fbe:	6812      	ldr	r2, [r2, #0]
 8005fc0:	3b04      	subs	r3, #4
 8005fc2:	2a00      	cmp	r2, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <quorem+0xea>
 8005fc6:	3c01      	subs	r4, #1
 8005fc8:	e7eb      	b.n	8005fa2 <quorem+0xe4>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e7ee      	b.n	8005fac <quorem+0xee>
	...

08005fd0 <_dtoa_r>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	ed2d 8b04 	vpush	{d8-d9}
 8005fd8:	69c5      	ldr	r5, [r0, #28]
 8005fda:	b093      	sub	sp, #76	; 0x4c
 8005fdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fe0:	ec57 6b10 	vmov	r6, r7, d0
 8005fe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fe8:	9107      	str	r1, [sp, #28]
 8005fea:	4604      	mov	r4, r0
 8005fec:	920a      	str	r2, [sp, #40]	; 0x28
 8005fee:	930d      	str	r3, [sp, #52]	; 0x34
 8005ff0:	b975      	cbnz	r5, 8006010 <_dtoa_r+0x40>
 8005ff2:	2010      	movs	r0, #16
 8005ff4:	f000 fe2a 	bl	8006c4c <malloc>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	61e0      	str	r0, [r4, #28]
 8005ffc:	b920      	cbnz	r0, 8006008 <_dtoa_r+0x38>
 8005ffe:	4bae      	ldr	r3, [pc, #696]	; (80062b8 <_dtoa_r+0x2e8>)
 8006000:	21ef      	movs	r1, #239	; 0xef
 8006002:	48ae      	ldr	r0, [pc, #696]	; (80062bc <_dtoa_r+0x2ec>)
 8006004:	f001 fc90 	bl	8007928 <__assert_func>
 8006008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800600c:	6005      	str	r5, [r0, #0]
 800600e:	60c5      	str	r5, [r0, #12]
 8006010:	69e3      	ldr	r3, [r4, #28]
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	b151      	cbz	r1, 800602c <_dtoa_r+0x5c>
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	604a      	str	r2, [r1, #4]
 800601a:	2301      	movs	r3, #1
 800601c:	4093      	lsls	r3, r2
 800601e:	608b      	str	r3, [r1, #8]
 8006020:	4620      	mov	r0, r4
 8006022:	f000 ff07 	bl	8006e34 <_Bfree>
 8006026:	69e3      	ldr	r3, [r4, #28]
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	1e3b      	subs	r3, r7, #0
 800602e:	bfbb      	ittet	lt
 8006030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006034:	9303      	strlt	r3, [sp, #12]
 8006036:	2300      	movge	r3, #0
 8006038:	2201      	movlt	r2, #1
 800603a:	bfac      	ite	ge
 800603c:	f8c8 3000 	strge.w	r3, [r8]
 8006040:	f8c8 2000 	strlt.w	r2, [r8]
 8006044:	4b9e      	ldr	r3, [pc, #632]	; (80062c0 <_dtoa_r+0x2f0>)
 8006046:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800604a:	ea33 0308 	bics.w	r3, r3, r8
 800604e:	d11b      	bne.n	8006088 <_dtoa_r+0xb8>
 8006050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006052:	f242 730f 	movw	r3, #9999	; 0x270f
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800605c:	4333      	orrs	r3, r6
 800605e:	f000 8593 	beq.w	8006b88 <_dtoa_r+0xbb8>
 8006062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006064:	b963      	cbnz	r3, 8006080 <_dtoa_r+0xb0>
 8006066:	4b97      	ldr	r3, [pc, #604]	; (80062c4 <_dtoa_r+0x2f4>)
 8006068:	e027      	b.n	80060ba <_dtoa_r+0xea>
 800606a:	4b97      	ldr	r3, [pc, #604]	; (80062c8 <_dtoa_r+0x2f8>)
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	9800      	ldr	r0, [sp, #0]
 8006076:	b013      	add	sp, #76	; 0x4c
 8006078:	ecbd 8b04 	vpop	{d8-d9}
 800607c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006080:	4b90      	ldr	r3, [pc, #576]	; (80062c4 <_dtoa_r+0x2f4>)
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	3303      	adds	r3, #3
 8006086:	e7f3      	b.n	8006070 <_dtoa_r+0xa0>
 8006088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	ec51 0b17 	vmov	r0, r1, d7
 8006092:	eeb0 8a47 	vmov.f32	s16, s14
 8006096:	eef0 8a67 	vmov.f32	s17, s15
 800609a:	2300      	movs	r3, #0
 800609c:	f7fa fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 80060a0:	4681      	mov	r9, r0
 80060a2:	b160      	cbz	r0, 80060be <_dtoa_r+0xee>
 80060a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060a6:	2301      	movs	r3, #1
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8568 	beq.w	8006b82 <_dtoa_r+0xbb2>
 80060b2:	4b86      	ldr	r3, [pc, #536]	; (80062cc <_dtoa_r+0x2fc>)
 80060b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	e7da      	b.n	8006074 <_dtoa_r+0xa4>
 80060be:	aa10      	add	r2, sp, #64	; 0x40
 80060c0:	a911      	add	r1, sp, #68	; 0x44
 80060c2:	4620      	mov	r0, r4
 80060c4:	eeb0 0a48 	vmov.f32	s0, s16
 80060c8:	eef0 0a68 	vmov.f32	s1, s17
 80060cc:	f001 f994 	bl	80073f8 <__d2b>
 80060d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060d4:	4682      	mov	sl, r0
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	d07f      	beq.n	80061da <_dtoa_r+0x20a>
 80060da:	ee18 3a90 	vmov	r3, s17
 80060de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060e6:	ec51 0b18 	vmov	r0, r1, d8
 80060ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060f6:	4619      	mov	r1, r3
 80060f8:	2200      	movs	r2, #0
 80060fa:	4b75      	ldr	r3, [pc, #468]	; (80062d0 <_dtoa_r+0x300>)
 80060fc:	f7fa f8c4 	bl	8000288 <__aeabi_dsub>
 8006100:	a367      	add	r3, pc, #412	; (adr r3, 80062a0 <_dtoa_r+0x2d0>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa fa77 	bl	80005f8 <__aeabi_dmul>
 800610a:	a367      	add	r3, pc, #412	; (adr r3, 80062a8 <_dtoa_r+0x2d8>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f7fa f8bc 	bl	800028c <__adddf3>
 8006114:	4606      	mov	r6, r0
 8006116:	4628      	mov	r0, r5
 8006118:	460f      	mov	r7, r1
 800611a:	f7fa fa03 	bl	8000524 <__aeabi_i2d>
 800611e:	a364      	add	r3, pc, #400	; (adr r3, 80062b0 <_dtoa_r+0x2e0>)
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f7fa fa68 	bl	80005f8 <__aeabi_dmul>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4630      	mov	r0, r6
 800612e:	4639      	mov	r1, r7
 8006130:	f7fa f8ac 	bl	800028c <__adddf3>
 8006134:	4606      	mov	r6, r0
 8006136:	460f      	mov	r7, r1
 8006138:	f7fa fd0e 	bl	8000b58 <__aeabi_d2iz>
 800613c:	2200      	movs	r2, #0
 800613e:	4683      	mov	fp, r0
 8006140:	2300      	movs	r3, #0
 8006142:	4630      	mov	r0, r6
 8006144:	4639      	mov	r1, r7
 8006146:	f7fa fcc9 	bl	8000adc <__aeabi_dcmplt>
 800614a:	b148      	cbz	r0, 8006160 <_dtoa_r+0x190>
 800614c:	4658      	mov	r0, fp
 800614e:	f7fa f9e9 	bl	8000524 <__aeabi_i2d>
 8006152:	4632      	mov	r2, r6
 8006154:	463b      	mov	r3, r7
 8006156:	f7fa fcb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800615a:	b908      	cbnz	r0, 8006160 <_dtoa_r+0x190>
 800615c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006160:	f1bb 0f16 	cmp.w	fp, #22
 8006164:	d857      	bhi.n	8006216 <_dtoa_r+0x246>
 8006166:	4b5b      	ldr	r3, [pc, #364]	; (80062d4 <_dtoa_r+0x304>)
 8006168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	ec51 0b18 	vmov	r0, r1, d8
 8006174:	f7fa fcb2 	bl	8000adc <__aeabi_dcmplt>
 8006178:	2800      	cmp	r0, #0
 800617a:	d04e      	beq.n	800621a <_dtoa_r+0x24a>
 800617c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006180:	2300      	movs	r3, #0
 8006182:	930c      	str	r3, [sp, #48]	; 0x30
 8006184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006186:	1b5b      	subs	r3, r3, r5
 8006188:	1e5a      	subs	r2, r3, #1
 800618a:	bf45      	ittet	mi
 800618c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006190:	9305      	strmi	r3, [sp, #20]
 8006192:	2300      	movpl	r3, #0
 8006194:	2300      	movmi	r3, #0
 8006196:	9206      	str	r2, [sp, #24]
 8006198:	bf54      	ite	pl
 800619a:	9305      	strpl	r3, [sp, #20]
 800619c:	9306      	strmi	r3, [sp, #24]
 800619e:	f1bb 0f00 	cmp.w	fp, #0
 80061a2:	db3c      	blt.n	800621e <_dtoa_r+0x24e>
 80061a4:	9b06      	ldr	r3, [sp, #24]
 80061a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80061aa:	445b      	add	r3, fp
 80061ac:	9306      	str	r3, [sp, #24]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9308      	str	r3, [sp, #32]
 80061b2:	9b07      	ldr	r3, [sp, #28]
 80061b4:	2b09      	cmp	r3, #9
 80061b6:	d868      	bhi.n	800628a <_dtoa_r+0x2ba>
 80061b8:	2b05      	cmp	r3, #5
 80061ba:	bfc4      	itt	gt
 80061bc:	3b04      	subgt	r3, #4
 80061be:	9307      	strgt	r3, [sp, #28]
 80061c0:	9b07      	ldr	r3, [sp, #28]
 80061c2:	f1a3 0302 	sub.w	r3, r3, #2
 80061c6:	bfcc      	ite	gt
 80061c8:	2500      	movgt	r5, #0
 80061ca:	2501      	movle	r5, #1
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	f200 8085 	bhi.w	80062dc <_dtoa_r+0x30c>
 80061d2:	e8df f003 	tbb	[pc, r3]
 80061d6:	3b2e      	.short	0x3b2e
 80061d8:	5839      	.short	0x5839
 80061da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061de:	441d      	add	r5, r3
 80061e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	bfc1      	itttt	gt
 80061e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80061f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061f8:	bfd6      	itet	le
 80061fa:	f1c3 0320 	rsble	r3, r3, #32
 80061fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8006202:	fa06 f003 	lslle.w	r0, r6, r3
 8006206:	f7fa f97d 	bl	8000504 <__aeabi_ui2d>
 800620a:	2201      	movs	r2, #1
 800620c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006210:	3d01      	subs	r5, #1
 8006212:	920e      	str	r2, [sp, #56]	; 0x38
 8006214:	e76f      	b.n	80060f6 <_dtoa_r+0x126>
 8006216:	2301      	movs	r3, #1
 8006218:	e7b3      	b.n	8006182 <_dtoa_r+0x1b2>
 800621a:	900c      	str	r0, [sp, #48]	; 0x30
 800621c:	e7b2      	b.n	8006184 <_dtoa_r+0x1b4>
 800621e:	9b05      	ldr	r3, [sp, #20]
 8006220:	eba3 030b 	sub.w	r3, r3, fp
 8006224:	9305      	str	r3, [sp, #20]
 8006226:	f1cb 0300 	rsb	r3, fp, #0
 800622a:	9308      	str	r3, [sp, #32]
 800622c:	2300      	movs	r3, #0
 800622e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006230:	e7bf      	b.n	80061b2 <_dtoa_r+0x1e2>
 8006232:	2300      	movs	r3, #0
 8006234:	9309      	str	r3, [sp, #36]	; 0x24
 8006236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	dc52      	bgt.n	80062e2 <_dtoa_r+0x312>
 800623c:	2301      	movs	r3, #1
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	9304      	str	r3, [sp, #16]
 8006242:	461a      	mov	r2, r3
 8006244:	920a      	str	r2, [sp, #40]	; 0x28
 8006246:	e00b      	b.n	8006260 <_dtoa_r+0x290>
 8006248:	2301      	movs	r3, #1
 800624a:	e7f3      	b.n	8006234 <_dtoa_r+0x264>
 800624c:	2300      	movs	r3, #0
 800624e:	9309      	str	r3, [sp, #36]	; 0x24
 8006250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006252:	445b      	add	r3, fp
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	3301      	adds	r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	9304      	str	r3, [sp, #16]
 800625c:	bfb8      	it	lt
 800625e:	2301      	movlt	r3, #1
 8006260:	69e0      	ldr	r0, [r4, #28]
 8006262:	2100      	movs	r1, #0
 8006264:	2204      	movs	r2, #4
 8006266:	f102 0614 	add.w	r6, r2, #20
 800626a:	429e      	cmp	r6, r3
 800626c:	d93d      	bls.n	80062ea <_dtoa_r+0x31a>
 800626e:	6041      	str	r1, [r0, #4]
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fd9f 	bl	8006db4 <_Balloc>
 8006276:	9000      	str	r0, [sp, #0]
 8006278:	2800      	cmp	r0, #0
 800627a:	d139      	bne.n	80062f0 <_dtoa_r+0x320>
 800627c:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <_dtoa_r+0x308>)
 800627e:	4602      	mov	r2, r0
 8006280:	f240 11af 	movw	r1, #431	; 0x1af
 8006284:	e6bd      	b.n	8006002 <_dtoa_r+0x32>
 8006286:	2301      	movs	r3, #1
 8006288:	e7e1      	b.n	800624e <_dtoa_r+0x27e>
 800628a:	2501      	movs	r5, #1
 800628c:	2300      	movs	r3, #0
 800628e:	9307      	str	r3, [sp, #28]
 8006290:	9509      	str	r5, [sp, #36]	; 0x24
 8006292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	2200      	movs	r2, #0
 800629c:	2312      	movs	r3, #18
 800629e:	e7d1      	b.n	8006244 <_dtoa_r+0x274>
 80062a0:	636f4361 	.word	0x636f4361
 80062a4:	3fd287a7 	.word	0x3fd287a7
 80062a8:	8b60c8b3 	.word	0x8b60c8b3
 80062ac:	3fc68a28 	.word	0x3fc68a28
 80062b0:	509f79fb 	.word	0x509f79fb
 80062b4:	3fd34413 	.word	0x3fd34413
 80062b8:	0801b8c1 	.word	0x0801b8c1
 80062bc:	0801b8d8 	.word	0x0801b8d8
 80062c0:	7ff00000 	.word	0x7ff00000
 80062c4:	0801b8bd 	.word	0x0801b8bd
 80062c8:	0801b8b4 	.word	0x0801b8b4
 80062cc:	0801b891 	.word	0x0801b891
 80062d0:	3ff80000 	.word	0x3ff80000
 80062d4:	0801b9c8 	.word	0x0801b9c8
 80062d8:	0801b930 	.word	0x0801b930
 80062dc:	2301      	movs	r3, #1
 80062de:	9309      	str	r3, [sp, #36]	; 0x24
 80062e0:	e7d7      	b.n	8006292 <_dtoa_r+0x2c2>
 80062e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	e7ba      	b.n	8006260 <_dtoa_r+0x290>
 80062ea:	3101      	adds	r1, #1
 80062ec:	0052      	lsls	r2, r2, #1
 80062ee:	e7ba      	b.n	8006266 <_dtoa_r+0x296>
 80062f0:	69e3      	ldr	r3, [r4, #28]
 80062f2:	9a00      	ldr	r2, [sp, #0]
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	9b04      	ldr	r3, [sp, #16]
 80062f8:	2b0e      	cmp	r3, #14
 80062fa:	f200 80a8 	bhi.w	800644e <_dtoa_r+0x47e>
 80062fe:	2d00      	cmp	r5, #0
 8006300:	f000 80a5 	beq.w	800644e <_dtoa_r+0x47e>
 8006304:	f1bb 0f00 	cmp.w	fp, #0
 8006308:	dd38      	ble.n	800637c <_dtoa_r+0x3ac>
 800630a:	4bc0      	ldr	r3, [pc, #768]	; (800660c <_dtoa_r+0x63c>)
 800630c:	f00b 020f 	and.w	r2, fp, #15
 8006310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006314:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006318:	e9d3 6700 	ldrd	r6, r7, [r3]
 800631c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006320:	d019      	beq.n	8006356 <_dtoa_r+0x386>
 8006322:	4bbb      	ldr	r3, [pc, #748]	; (8006610 <_dtoa_r+0x640>)
 8006324:	ec51 0b18 	vmov	r0, r1, d8
 8006328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800632c:	f7fa fa8e 	bl	800084c <__aeabi_ddiv>
 8006330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006334:	f008 080f 	and.w	r8, r8, #15
 8006338:	2503      	movs	r5, #3
 800633a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006610 <_dtoa_r+0x640>
 800633e:	f1b8 0f00 	cmp.w	r8, #0
 8006342:	d10a      	bne.n	800635a <_dtoa_r+0x38a>
 8006344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006348:	4632      	mov	r2, r6
 800634a:	463b      	mov	r3, r7
 800634c:	f7fa fa7e 	bl	800084c <__aeabi_ddiv>
 8006350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006354:	e02b      	b.n	80063ae <_dtoa_r+0x3de>
 8006356:	2502      	movs	r5, #2
 8006358:	e7ef      	b.n	800633a <_dtoa_r+0x36a>
 800635a:	f018 0f01 	tst.w	r8, #1
 800635e:	d008      	beq.n	8006372 <_dtoa_r+0x3a2>
 8006360:	4630      	mov	r0, r6
 8006362:	4639      	mov	r1, r7
 8006364:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006368:	f7fa f946 	bl	80005f8 <__aeabi_dmul>
 800636c:	3501      	adds	r5, #1
 800636e:	4606      	mov	r6, r0
 8006370:	460f      	mov	r7, r1
 8006372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006376:	f109 0908 	add.w	r9, r9, #8
 800637a:	e7e0      	b.n	800633e <_dtoa_r+0x36e>
 800637c:	f000 809f 	beq.w	80064be <_dtoa_r+0x4ee>
 8006380:	f1cb 0600 	rsb	r6, fp, #0
 8006384:	4ba1      	ldr	r3, [pc, #644]	; (800660c <_dtoa_r+0x63c>)
 8006386:	4fa2      	ldr	r7, [pc, #648]	; (8006610 <_dtoa_r+0x640>)
 8006388:	f006 020f 	and.w	r2, r6, #15
 800638c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	ec51 0b18 	vmov	r0, r1, d8
 8006398:	f7fa f92e 	bl	80005f8 <__aeabi_dmul>
 800639c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a0:	1136      	asrs	r6, r6, #4
 80063a2:	2300      	movs	r3, #0
 80063a4:	2502      	movs	r5, #2
 80063a6:	2e00      	cmp	r6, #0
 80063a8:	d17e      	bne.n	80064a8 <_dtoa_r+0x4d8>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1d0      	bne.n	8006350 <_dtoa_r+0x380>
 80063ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8084 	beq.w	80064c2 <_dtoa_r+0x4f2>
 80063ba:	4b96      	ldr	r3, [pc, #600]	; (8006614 <_dtoa_r+0x644>)
 80063bc:	2200      	movs	r2, #0
 80063be:	4640      	mov	r0, r8
 80063c0:	4649      	mov	r1, r9
 80063c2:	f7fa fb8b 	bl	8000adc <__aeabi_dcmplt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d07b      	beq.n	80064c2 <_dtoa_r+0x4f2>
 80063ca:	9b04      	ldr	r3, [sp, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d078      	beq.n	80064c2 <_dtoa_r+0x4f2>
 80063d0:	9b01      	ldr	r3, [sp, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	dd39      	ble.n	800644a <_dtoa_r+0x47a>
 80063d6:	4b90      	ldr	r3, [pc, #576]	; (8006618 <_dtoa_r+0x648>)
 80063d8:	2200      	movs	r2, #0
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7fa f90b 	bl	80005f8 <__aeabi_dmul>
 80063e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063e6:	9e01      	ldr	r6, [sp, #4]
 80063e8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80063ec:	3501      	adds	r5, #1
 80063ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063f2:	4628      	mov	r0, r5
 80063f4:	f7fa f896 	bl	8000524 <__aeabi_i2d>
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	f7fa f8fc 	bl	80005f8 <__aeabi_dmul>
 8006400:	4b86      	ldr	r3, [pc, #536]	; (800661c <_dtoa_r+0x64c>)
 8006402:	2200      	movs	r2, #0
 8006404:	f7f9 ff42 	bl	800028c <__adddf3>
 8006408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800640c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006410:	9303      	str	r3, [sp, #12]
 8006412:	2e00      	cmp	r6, #0
 8006414:	d158      	bne.n	80064c8 <_dtoa_r+0x4f8>
 8006416:	4b82      	ldr	r3, [pc, #520]	; (8006620 <_dtoa_r+0x650>)
 8006418:	2200      	movs	r2, #0
 800641a:	4640      	mov	r0, r8
 800641c:	4649      	mov	r1, r9
 800641e:	f7f9 ff33 	bl	8000288 <__aeabi_dsub>
 8006422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006426:	4680      	mov	r8, r0
 8006428:	4689      	mov	r9, r1
 800642a:	f7fa fb75 	bl	8000b18 <__aeabi_dcmpgt>
 800642e:	2800      	cmp	r0, #0
 8006430:	f040 8296 	bne.w	8006960 <_dtoa_r+0x990>
 8006434:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006438:	4640      	mov	r0, r8
 800643a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800643e:	4649      	mov	r1, r9
 8006440:	f7fa fb4c 	bl	8000adc <__aeabi_dcmplt>
 8006444:	2800      	cmp	r0, #0
 8006446:	f040 8289 	bne.w	800695c <_dtoa_r+0x98c>
 800644a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800644e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006450:	2b00      	cmp	r3, #0
 8006452:	f2c0 814e 	blt.w	80066f2 <_dtoa_r+0x722>
 8006456:	f1bb 0f0e 	cmp.w	fp, #14
 800645a:	f300 814a 	bgt.w	80066f2 <_dtoa_r+0x722>
 800645e:	4b6b      	ldr	r3, [pc, #428]	; (800660c <_dtoa_r+0x63c>)
 8006460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	f280 80dc 	bge.w	8006628 <_dtoa_r+0x658>
 8006470:	9b04      	ldr	r3, [sp, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f300 80d8 	bgt.w	8006628 <_dtoa_r+0x658>
 8006478:	f040 826f 	bne.w	800695a <_dtoa_r+0x98a>
 800647c:	4b68      	ldr	r3, [pc, #416]	; (8006620 <_dtoa_r+0x650>)
 800647e:	2200      	movs	r2, #0
 8006480:	4640      	mov	r0, r8
 8006482:	4649      	mov	r1, r9
 8006484:	f7fa f8b8 	bl	80005f8 <__aeabi_dmul>
 8006488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800648c:	f7fa fb3a 	bl	8000b04 <__aeabi_dcmpge>
 8006490:	9e04      	ldr	r6, [sp, #16]
 8006492:	4637      	mov	r7, r6
 8006494:	2800      	cmp	r0, #0
 8006496:	f040 8245 	bne.w	8006924 <_dtoa_r+0x954>
 800649a:	9d00      	ldr	r5, [sp, #0]
 800649c:	2331      	movs	r3, #49	; 0x31
 800649e:	f805 3b01 	strb.w	r3, [r5], #1
 80064a2:	f10b 0b01 	add.w	fp, fp, #1
 80064a6:	e241      	b.n	800692c <_dtoa_r+0x95c>
 80064a8:	07f2      	lsls	r2, r6, #31
 80064aa:	d505      	bpl.n	80064b8 <_dtoa_r+0x4e8>
 80064ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b0:	f7fa f8a2 	bl	80005f8 <__aeabi_dmul>
 80064b4:	3501      	adds	r5, #1
 80064b6:	2301      	movs	r3, #1
 80064b8:	1076      	asrs	r6, r6, #1
 80064ba:	3708      	adds	r7, #8
 80064bc:	e773      	b.n	80063a6 <_dtoa_r+0x3d6>
 80064be:	2502      	movs	r5, #2
 80064c0:	e775      	b.n	80063ae <_dtoa_r+0x3de>
 80064c2:	9e04      	ldr	r6, [sp, #16]
 80064c4:	465f      	mov	r7, fp
 80064c6:	e792      	b.n	80063ee <_dtoa_r+0x41e>
 80064c8:	9900      	ldr	r1, [sp, #0]
 80064ca:	4b50      	ldr	r3, [pc, #320]	; (800660c <_dtoa_r+0x63c>)
 80064cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064d0:	4431      	add	r1, r6
 80064d2:	9102      	str	r1, [sp, #8]
 80064d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064d6:	eeb0 9a47 	vmov.f32	s18, s14
 80064da:	eef0 9a67 	vmov.f32	s19, s15
 80064de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064e6:	2900      	cmp	r1, #0
 80064e8:	d044      	beq.n	8006574 <_dtoa_r+0x5a4>
 80064ea:	494e      	ldr	r1, [pc, #312]	; (8006624 <_dtoa_r+0x654>)
 80064ec:	2000      	movs	r0, #0
 80064ee:	f7fa f9ad 	bl	800084c <__aeabi_ddiv>
 80064f2:	ec53 2b19 	vmov	r2, r3, d9
 80064f6:	f7f9 fec7 	bl	8000288 <__aeabi_dsub>
 80064fa:	9d00      	ldr	r5, [sp, #0]
 80064fc:	ec41 0b19 	vmov	d9, r0, r1
 8006500:	4649      	mov	r1, r9
 8006502:	4640      	mov	r0, r8
 8006504:	f7fa fb28 	bl	8000b58 <__aeabi_d2iz>
 8006508:	4606      	mov	r6, r0
 800650a:	f7fa f80b 	bl	8000524 <__aeabi_i2d>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4640      	mov	r0, r8
 8006514:	4649      	mov	r1, r9
 8006516:	f7f9 feb7 	bl	8000288 <__aeabi_dsub>
 800651a:	3630      	adds	r6, #48	; 0x30
 800651c:	f805 6b01 	strb.w	r6, [r5], #1
 8006520:	ec53 2b19 	vmov	r2, r3, d9
 8006524:	4680      	mov	r8, r0
 8006526:	4689      	mov	r9, r1
 8006528:	f7fa fad8 	bl	8000adc <__aeabi_dcmplt>
 800652c:	2800      	cmp	r0, #0
 800652e:	d164      	bne.n	80065fa <_dtoa_r+0x62a>
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	4937      	ldr	r1, [pc, #220]	; (8006614 <_dtoa_r+0x644>)
 8006536:	2000      	movs	r0, #0
 8006538:	f7f9 fea6 	bl	8000288 <__aeabi_dsub>
 800653c:	ec53 2b19 	vmov	r2, r3, d9
 8006540:	f7fa facc 	bl	8000adc <__aeabi_dcmplt>
 8006544:	2800      	cmp	r0, #0
 8006546:	f040 80b6 	bne.w	80066b6 <_dtoa_r+0x6e6>
 800654a:	9b02      	ldr	r3, [sp, #8]
 800654c:	429d      	cmp	r5, r3
 800654e:	f43f af7c 	beq.w	800644a <_dtoa_r+0x47a>
 8006552:	4b31      	ldr	r3, [pc, #196]	; (8006618 <_dtoa_r+0x648>)
 8006554:	ec51 0b19 	vmov	r0, r1, d9
 8006558:	2200      	movs	r2, #0
 800655a:	f7fa f84d 	bl	80005f8 <__aeabi_dmul>
 800655e:	4b2e      	ldr	r3, [pc, #184]	; (8006618 <_dtoa_r+0x648>)
 8006560:	ec41 0b19 	vmov	d9, r0, r1
 8006564:	2200      	movs	r2, #0
 8006566:	4640      	mov	r0, r8
 8006568:	4649      	mov	r1, r9
 800656a:	f7fa f845 	bl	80005f8 <__aeabi_dmul>
 800656e:	4680      	mov	r8, r0
 8006570:	4689      	mov	r9, r1
 8006572:	e7c5      	b.n	8006500 <_dtoa_r+0x530>
 8006574:	ec51 0b17 	vmov	r0, r1, d7
 8006578:	f7fa f83e 	bl	80005f8 <__aeabi_dmul>
 800657c:	9b02      	ldr	r3, [sp, #8]
 800657e:	9d00      	ldr	r5, [sp, #0]
 8006580:	930f      	str	r3, [sp, #60]	; 0x3c
 8006582:	ec41 0b19 	vmov	d9, r0, r1
 8006586:	4649      	mov	r1, r9
 8006588:	4640      	mov	r0, r8
 800658a:	f7fa fae5 	bl	8000b58 <__aeabi_d2iz>
 800658e:	4606      	mov	r6, r0
 8006590:	f7f9 ffc8 	bl	8000524 <__aeabi_i2d>
 8006594:	3630      	adds	r6, #48	; 0x30
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4640      	mov	r0, r8
 800659c:	4649      	mov	r1, r9
 800659e:	f7f9 fe73 	bl	8000288 <__aeabi_dsub>
 80065a2:	f805 6b01 	strb.w	r6, [r5], #1
 80065a6:	9b02      	ldr	r3, [sp, #8]
 80065a8:	429d      	cmp	r5, r3
 80065aa:	4680      	mov	r8, r0
 80065ac:	4689      	mov	r9, r1
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	d124      	bne.n	80065fe <_dtoa_r+0x62e>
 80065b4:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <_dtoa_r+0x654>)
 80065b6:	ec51 0b19 	vmov	r0, r1, d9
 80065ba:	f7f9 fe67 	bl	800028c <__adddf3>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4640      	mov	r0, r8
 80065c4:	4649      	mov	r1, r9
 80065c6:	f7fa faa7 	bl	8000b18 <__aeabi_dcmpgt>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d173      	bne.n	80066b6 <_dtoa_r+0x6e6>
 80065ce:	ec53 2b19 	vmov	r2, r3, d9
 80065d2:	4914      	ldr	r1, [pc, #80]	; (8006624 <_dtoa_r+0x654>)
 80065d4:	2000      	movs	r0, #0
 80065d6:	f7f9 fe57 	bl	8000288 <__aeabi_dsub>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4640      	mov	r0, r8
 80065e0:	4649      	mov	r1, r9
 80065e2:	f7fa fa7b 	bl	8000adc <__aeabi_dcmplt>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f43f af2f 	beq.w	800644a <_dtoa_r+0x47a>
 80065ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065ee:	1e6b      	subs	r3, r5, #1
 80065f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065f6:	2b30      	cmp	r3, #48	; 0x30
 80065f8:	d0f8      	beq.n	80065ec <_dtoa_r+0x61c>
 80065fa:	46bb      	mov	fp, r7
 80065fc:	e04a      	b.n	8006694 <_dtoa_r+0x6c4>
 80065fe:	4b06      	ldr	r3, [pc, #24]	; (8006618 <_dtoa_r+0x648>)
 8006600:	f7f9 fffa 	bl	80005f8 <__aeabi_dmul>
 8006604:	4680      	mov	r8, r0
 8006606:	4689      	mov	r9, r1
 8006608:	e7bd      	b.n	8006586 <_dtoa_r+0x5b6>
 800660a:	bf00      	nop
 800660c:	0801b9c8 	.word	0x0801b9c8
 8006610:	0801b9a0 	.word	0x0801b9a0
 8006614:	3ff00000 	.word	0x3ff00000
 8006618:	40240000 	.word	0x40240000
 800661c:	401c0000 	.word	0x401c0000
 8006620:	40140000 	.word	0x40140000
 8006624:	3fe00000 	.word	0x3fe00000
 8006628:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800662c:	9d00      	ldr	r5, [sp, #0]
 800662e:	4642      	mov	r2, r8
 8006630:	464b      	mov	r3, r9
 8006632:	4630      	mov	r0, r6
 8006634:	4639      	mov	r1, r7
 8006636:	f7fa f909 	bl	800084c <__aeabi_ddiv>
 800663a:	f7fa fa8d 	bl	8000b58 <__aeabi_d2iz>
 800663e:	9001      	str	r0, [sp, #4]
 8006640:	f7f9 ff70 	bl	8000524 <__aeabi_i2d>
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	f7f9 ffd6 	bl	80005f8 <__aeabi_dmul>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4630      	mov	r0, r6
 8006652:	4639      	mov	r1, r7
 8006654:	f7f9 fe18 	bl	8000288 <__aeabi_dsub>
 8006658:	9e01      	ldr	r6, [sp, #4]
 800665a:	9f04      	ldr	r7, [sp, #16]
 800665c:	3630      	adds	r6, #48	; 0x30
 800665e:	f805 6b01 	strb.w	r6, [r5], #1
 8006662:	9e00      	ldr	r6, [sp, #0]
 8006664:	1bae      	subs	r6, r5, r6
 8006666:	42b7      	cmp	r7, r6
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	d134      	bne.n	80066d8 <_dtoa_r+0x708>
 800666e:	f7f9 fe0d 	bl	800028c <__adddf3>
 8006672:	4642      	mov	r2, r8
 8006674:	464b      	mov	r3, r9
 8006676:	4606      	mov	r6, r0
 8006678:	460f      	mov	r7, r1
 800667a:	f7fa fa4d 	bl	8000b18 <__aeabi_dcmpgt>
 800667e:	b9c8      	cbnz	r0, 80066b4 <_dtoa_r+0x6e4>
 8006680:	4642      	mov	r2, r8
 8006682:	464b      	mov	r3, r9
 8006684:	4630      	mov	r0, r6
 8006686:	4639      	mov	r1, r7
 8006688:	f7fa fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800668c:	b110      	cbz	r0, 8006694 <_dtoa_r+0x6c4>
 800668e:	9b01      	ldr	r3, [sp, #4]
 8006690:	07db      	lsls	r3, r3, #31
 8006692:	d40f      	bmi.n	80066b4 <_dtoa_r+0x6e4>
 8006694:	4651      	mov	r1, sl
 8006696:	4620      	mov	r0, r4
 8006698:	f000 fbcc 	bl	8006e34 <_Bfree>
 800669c:	2300      	movs	r3, #0
 800669e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066a0:	702b      	strb	r3, [r5, #0]
 80066a2:	f10b 0301 	add.w	r3, fp, #1
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f43f ace2 	beq.w	8006074 <_dtoa_r+0xa4>
 80066b0:	601d      	str	r5, [r3, #0]
 80066b2:	e4df      	b.n	8006074 <_dtoa_r+0xa4>
 80066b4:	465f      	mov	r7, fp
 80066b6:	462b      	mov	r3, r5
 80066b8:	461d      	mov	r5, r3
 80066ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066be:	2a39      	cmp	r2, #57	; 0x39
 80066c0:	d106      	bne.n	80066d0 <_dtoa_r+0x700>
 80066c2:	9a00      	ldr	r2, [sp, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d1f7      	bne.n	80066b8 <_dtoa_r+0x6e8>
 80066c8:	9900      	ldr	r1, [sp, #0]
 80066ca:	2230      	movs	r2, #48	; 0x30
 80066cc:	3701      	adds	r7, #1
 80066ce:	700a      	strb	r2, [r1, #0]
 80066d0:	781a      	ldrb	r2, [r3, #0]
 80066d2:	3201      	adds	r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	e790      	b.n	80065fa <_dtoa_r+0x62a>
 80066d8:	4ba3      	ldr	r3, [pc, #652]	; (8006968 <_dtoa_r+0x998>)
 80066da:	2200      	movs	r2, #0
 80066dc:	f7f9 ff8c 	bl	80005f8 <__aeabi_dmul>
 80066e0:	2200      	movs	r2, #0
 80066e2:	2300      	movs	r3, #0
 80066e4:	4606      	mov	r6, r0
 80066e6:	460f      	mov	r7, r1
 80066e8:	f7fa f9ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d09e      	beq.n	800662e <_dtoa_r+0x65e>
 80066f0:	e7d0      	b.n	8006694 <_dtoa_r+0x6c4>
 80066f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	f000 80ca 	beq.w	800688e <_dtoa_r+0x8be>
 80066fa:	9a07      	ldr	r2, [sp, #28]
 80066fc:	2a01      	cmp	r2, #1
 80066fe:	f300 80ad 	bgt.w	800685c <_dtoa_r+0x88c>
 8006702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006704:	2a00      	cmp	r2, #0
 8006706:	f000 80a5 	beq.w	8006854 <_dtoa_r+0x884>
 800670a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800670e:	9e08      	ldr	r6, [sp, #32]
 8006710:	9d05      	ldr	r5, [sp, #20]
 8006712:	9a05      	ldr	r2, [sp, #20]
 8006714:	441a      	add	r2, r3
 8006716:	9205      	str	r2, [sp, #20]
 8006718:	9a06      	ldr	r2, [sp, #24]
 800671a:	2101      	movs	r1, #1
 800671c:	441a      	add	r2, r3
 800671e:	4620      	mov	r0, r4
 8006720:	9206      	str	r2, [sp, #24]
 8006722:	f000 fc3d 	bl	8006fa0 <__i2b>
 8006726:	4607      	mov	r7, r0
 8006728:	b165      	cbz	r5, 8006744 <_dtoa_r+0x774>
 800672a:	9b06      	ldr	r3, [sp, #24]
 800672c:	2b00      	cmp	r3, #0
 800672e:	dd09      	ble.n	8006744 <_dtoa_r+0x774>
 8006730:	42ab      	cmp	r3, r5
 8006732:	9a05      	ldr	r2, [sp, #20]
 8006734:	bfa8      	it	ge
 8006736:	462b      	movge	r3, r5
 8006738:	1ad2      	subs	r2, r2, r3
 800673a:	9205      	str	r2, [sp, #20]
 800673c:	9a06      	ldr	r2, [sp, #24]
 800673e:	1aed      	subs	r5, r5, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	9306      	str	r3, [sp, #24]
 8006744:	9b08      	ldr	r3, [sp, #32]
 8006746:	b1f3      	cbz	r3, 8006786 <_dtoa_r+0x7b6>
 8006748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80a3 	beq.w	8006896 <_dtoa_r+0x8c6>
 8006750:	2e00      	cmp	r6, #0
 8006752:	dd10      	ble.n	8006776 <_dtoa_r+0x7a6>
 8006754:	4639      	mov	r1, r7
 8006756:	4632      	mov	r2, r6
 8006758:	4620      	mov	r0, r4
 800675a:	f000 fce1 	bl	8007120 <__pow5mult>
 800675e:	4652      	mov	r2, sl
 8006760:	4601      	mov	r1, r0
 8006762:	4607      	mov	r7, r0
 8006764:	4620      	mov	r0, r4
 8006766:	f000 fc31 	bl	8006fcc <__multiply>
 800676a:	4651      	mov	r1, sl
 800676c:	4680      	mov	r8, r0
 800676e:	4620      	mov	r0, r4
 8006770:	f000 fb60 	bl	8006e34 <_Bfree>
 8006774:	46c2      	mov	sl, r8
 8006776:	9b08      	ldr	r3, [sp, #32]
 8006778:	1b9a      	subs	r2, r3, r6
 800677a:	d004      	beq.n	8006786 <_dtoa_r+0x7b6>
 800677c:	4651      	mov	r1, sl
 800677e:	4620      	mov	r0, r4
 8006780:	f000 fcce 	bl	8007120 <__pow5mult>
 8006784:	4682      	mov	sl, r0
 8006786:	2101      	movs	r1, #1
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fc09 	bl	8006fa0 <__i2b>
 800678e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006790:	2b00      	cmp	r3, #0
 8006792:	4606      	mov	r6, r0
 8006794:	f340 8081 	ble.w	800689a <_dtoa_r+0x8ca>
 8006798:	461a      	mov	r2, r3
 800679a:	4601      	mov	r1, r0
 800679c:	4620      	mov	r0, r4
 800679e:	f000 fcbf 	bl	8007120 <__pow5mult>
 80067a2:	9b07      	ldr	r3, [sp, #28]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	4606      	mov	r6, r0
 80067a8:	dd7a      	ble.n	80068a0 <_dtoa_r+0x8d0>
 80067aa:	f04f 0800 	mov.w	r8, #0
 80067ae:	6933      	ldr	r3, [r6, #16]
 80067b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067b4:	6918      	ldr	r0, [r3, #16]
 80067b6:	f000 fba5 	bl	8006f04 <__hi0bits>
 80067ba:	f1c0 0020 	rsb	r0, r0, #32
 80067be:	9b06      	ldr	r3, [sp, #24]
 80067c0:	4418      	add	r0, r3
 80067c2:	f010 001f 	ands.w	r0, r0, #31
 80067c6:	f000 8094 	beq.w	80068f2 <_dtoa_r+0x922>
 80067ca:	f1c0 0320 	rsb	r3, r0, #32
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	f340 8085 	ble.w	80068de <_dtoa_r+0x90e>
 80067d4:	9b05      	ldr	r3, [sp, #20]
 80067d6:	f1c0 001c 	rsb	r0, r0, #28
 80067da:	4403      	add	r3, r0
 80067dc:	9305      	str	r3, [sp, #20]
 80067de:	9b06      	ldr	r3, [sp, #24]
 80067e0:	4403      	add	r3, r0
 80067e2:	4405      	add	r5, r0
 80067e4:	9306      	str	r3, [sp, #24]
 80067e6:	9b05      	ldr	r3, [sp, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	dd05      	ble.n	80067f8 <_dtoa_r+0x828>
 80067ec:	4651      	mov	r1, sl
 80067ee:	461a      	mov	r2, r3
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 fcef 	bl	80071d4 <__lshift>
 80067f6:	4682      	mov	sl, r0
 80067f8:	9b06      	ldr	r3, [sp, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	dd05      	ble.n	800680a <_dtoa_r+0x83a>
 80067fe:	4631      	mov	r1, r6
 8006800:	461a      	mov	r2, r3
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fce6 	bl	80071d4 <__lshift>
 8006808:	4606      	mov	r6, r0
 800680a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800680c:	2b00      	cmp	r3, #0
 800680e:	d072      	beq.n	80068f6 <_dtoa_r+0x926>
 8006810:	4631      	mov	r1, r6
 8006812:	4650      	mov	r0, sl
 8006814:	f000 fd4a 	bl	80072ac <__mcmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	da6c      	bge.n	80068f6 <_dtoa_r+0x926>
 800681c:	2300      	movs	r3, #0
 800681e:	4651      	mov	r1, sl
 8006820:	220a      	movs	r2, #10
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fb28 	bl	8006e78 <__multadd>
 8006828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800682a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800682e:	4682      	mov	sl, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 81b0 	beq.w	8006b96 <_dtoa_r+0xbc6>
 8006836:	2300      	movs	r3, #0
 8006838:	4639      	mov	r1, r7
 800683a:	220a      	movs	r2, #10
 800683c:	4620      	mov	r0, r4
 800683e:	f000 fb1b 	bl	8006e78 <__multadd>
 8006842:	9b01      	ldr	r3, [sp, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	4607      	mov	r7, r0
 8006848:	f300 8096 	bgt.w	8006978 <_dtoa_r+0x9a8>
 800684c:	9b07      	ldr	r3, [sp, #28]
 800684e:	2b02      	cmp	r3, #2
 8006850:	dc59      	bgt.n	8006906 <_dtoa_r+0x936>
 8006852:	e091      	b.n	8006978 <_dtoa_r+0x9a8>
 8006854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800685a:	e758      	b.n	800670e <_dtoa_r+0x73e>
 800685c:	9b04      	ldr	r3, [sp, #16]
 800685e:	1e5e      	subs	r6, r3, #1
 8006860:	9b08      	ldr	r3, [sp, #32]
 8006862:	42b3      	cmp	r3, r6
 8006864:	bfbf      	itttt	lt
 8006866:	9b08      	ldrlt	r3, [sp, #32]
 8006868:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800686a:	9608      	strlt	r6, [sp, #32]
 800686c:	1af3      	sublt	r3, r6, r3
 800686e:	bfb4      	ite	lt
 8006870:	18d2      	addlt	r2, r2, r3
 8006872:	1b9e      	subge	r6, r3, r6
 8006874:	9b04      	ldr	r3, [sp, #16]
 8006876:	bfbc      	itt	lt
 8006878:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800687a:	2600      	movlt	r6, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	bfb7      	itett	lt
 8006880:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006884:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006888:	1a9d      	sublt	r5, r3, r2
 800688a:	2300      	movlt	r3, #0
 800688c:	e741      	b.n	8006712 <_dtoa_r+0x742>
 800688e:	9e08      	ldr	r6, [sp, #32]
 8006890:	9d05      	ldr	r5, [sp, #20]
 8006892:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006894:	e748      	b.n	8006728 <_dtoa_r+0x758>
 8006896:	9a08      	ldr	r2, [sp, #32]
 8006898:	e770      	b.n	800677c <_dtoa_r+0x7ac>
 800689a:	9b07      	ldr	r3, [sp, #28]
 800689c:	2b01      	cmp	r3, #1
 800689e:	dc19      	bgt.n	80068d4 <_dtoa_r+0x904>
 80068a0:	9b02      	ldr	r3, [sp, #8]
 80068a2:	b9bb      	cbnz	r3, 80068d4 <_dtoa_r+0x904>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068aa:	b99b      	cbnz	r3, 80068d4 <_dtoa_r+0x904>
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068b2:	0d1b      	lsrs	r3, r3, #20
 80068b4:	051b      	lsls	r3, r3, #20
 80068b6:	b183      	cbz	r3, 80068da <_dtoa_r+0x90a>
 80068b8:	9b05      	ldr	r3, [sp, #20]
 80068ba:	3301      	adds	r3, #1
 80068bc:	9305      	str	r3, [sp, #20]
 80068be:	9b06      	ldr	r3, [sp, #24]
 80068c0:	3301      	adds	r3, #1
 80068c2:	9306      	str	r3, [sp, #24]
 80068c4:	f04f 0801 	mov.w	r8, #1
 80068c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f47f af6f 	bne.w	80067ae <_dtoa_r+0x7de>
 80068d0:	2001      	movs	r0, #1
 80068d2:	e774      	b.n	80067be <_dtoa_r+0x7ee>
 80068d4:	f04f 0800 	mov.w	r8, #0
 80068d8:	e7f6      	b.n	80068c8 <_dtoa_r+0x8f8>
 80068da:	4698      	mov	r8, r3
 80068dc:	e7f4      	b.n	80068c8 <_dtoa_r+0x8f8>
 80068de:	d082      	beq.n	80067e6 <_dtoa_r+0x816>
 80068e0:	9a05      	ldr	r2, [sp, #20]
 80068e2:	331c      	adds	r3, #28
 80068e4:	441a      	add	r2, r3
 80068e6:	9205      	str	r2, [sp, #20]
 80068e8:	9a06      	ldr	r2, [sp, #24]
 80068ea:	441a      	add	r2, r3
 80068ec:	441d      	add	r5, r3
 80068ee:	9206      	str	r2, [sp, #24]
 80068f0:	e779      	b.n	80067e6 <_dtoa_r+0x816>
 80068f2:	4603      	mov	r3, r0
 80068f4:	e7f4      	b.n	80068e0 <_dtoa_r+0x910>
 80068f6:	9b04      	ldr	r3, [sp, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc37      	bgt.n	800696c <_dtoa_r+0x99c>
 80068fc:	9b07      	ldr	r3, [sp, #28]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	dd34      	ble.n	800696c <_dtoa_r+0x99c>
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	b963      	cbnz	r3, 8006924 <_dtoa_r+0x954>
 800690a:	4631      	mov	r1, r6
 800690c:	2205      	movs	r2, #5
 800690e:	4620      	mov	r0, r4
 8006910:	f000 fab2 	bl	8006e78 <__multadd>
 8006914:	4601      	mov	r1, r0
 8006916:	4606      	mov	r6, r0
 8006918:	4650      	mov	r0, sl
 800691a:	f000 fcc7 	bl	80072ac <__mcmp>
 800691e:	2800      	cmp	r0, #0
 8006920:	f73f adbb 	bgt.w	800649a <_dtoa_r+0x4ca>
 8006924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006926:	9d00      	ldr	r5, [sp, #0]
 8006928:	ea6f 0b03 	mvn.w	fp, r3
 800692c:	f04f 0800 	mov.w	r8, #0
 8006930:	4631      	mov	r1, r6
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fa7e 	bl	8006e34 <_Bfree>
 8006938:	2f00      	cmp	r7, #0
 800693a:	f43f aeab 	beq.w	8006694 <_dtoa_r+0x6c4>
 800693e:	f1b8 0f00 	cmp.w	r8, #0
 8006942:	d005      	beq.n	8006950 <_dtoa_r+0x980>
 8006944:	45b8      	cmp	r8, r7
 8006946:	d003      	beq.n	8006950 <_dtoa_r+0x980>
 8006948:	4641      	mov	r1, r8
 800694a:	4620      	mov	r0, r4
 800694c:	f000 fa72 	bl	8006e34 <_Bfree>
 8006950:	4639      	mov	r1, r7
 8006952:	4620      	mov	r0, r4
 8006954:	f000 fa6e 	bl	8006e34 <_Bfree>
 8006958:	e69c      	b.n	8006694 <_dtoa_r+0x6c4>
 800695a:	2600      	movs	r6, #0
 800695c:	4637      	mov	r7, r6
 800695e:	e7e1      	b.n	8006924 <_dtoa_r+0x954>
 8006960:	46bb      	mov	fp, r7
 8006962:	4637      	mov	r7, r6
 8006964:	e599      	b.n	800649a <_dtoa_r+0x4ca>
 8006966:	bf00      	nop
 8006968:	40240000 	.word	0x40240000
 800696c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 80c8 	beq.w	8006b04 <_dtoa_r+0xb34>
 8006974:	9b04      	ldr	r3, [sp, #16]
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	2d00      	cmp	r5, #0
 800697a:	dd05      	ble.n	8006988 <_dtoa_r+0x9b8>
 800697c:	4639      	mov	r1, r7
 800697e:	462a      	mov	r2, r5
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fc27 	bl	80071d4 <__lshift>
 8006986:	4607      	mov	r7, r0
 8006988:	f1b8 0f00 	cmp.w	r8, #0
 800698c:	d05b      	beq.n	8006a46 <_dtoa_r+0xa76>
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fa0f 	bl	8006db4 <_Balloc>
 8006996:	4605      	mov	r5, r0
 8006998:	b928      	cbnz	r0, 80069a6 <_dtoa_r+0x9d6>
 800699a:	4b83      	ldr	r3, [pc, #524]	; (8006ba8 <_dtoa_r+0xbd8>)
 800699c:	4602      	mov	r2, r0
 800699e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80069a2:	f7ff bb2e 	b.w	8006002 <_dtoa_r+0x32>
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	3202      	adds	r2, #2
 80069aa:	0092      	lsls	r2, r2, #2
 80069ac:	f107 010c 	add.w	r1, r7, #12
 80069b0:	300c      	adds	r0, #12
 80069b2:	f000 ffab 	bl	800790c <memcpy>
 80069b6:	2201      	movs	r2, #1
 80069b8:	4629      	mov	r1, r5
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 fc0a 	bl	80071d4 <__lshift>
 80069c0:	9b00      	ldr	r3, [sp, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ca:	4413      	add	r3, r2
 80069cc:	9308      	str	r3, [sp, #32]
 80069ce:	9b02      	ldr	r3, [sp, #8]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	46b8      	mov	r8, r7
 80069d6:	9306      	str	r3, [sp, #24]
 80069d8:	4607      	mov	r7, r0
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	4631      	mov	r1, r6
 80069de:	3b01      	subs	r3, #1
 80069e0:	4650      	mov	r0, sl
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	f7ff fa6b 	bl	8005ebe <quorem>
 80069e8:	4641      	mov	r1, r8
 80069ea:	9002      	str	r0, [sp, #8]
 80069ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069f0:	4650      	mov	r0, sl
 80069f2:	f000 fc5b 	bl	80072ac <__mcmp>
 80069f6:	463a      	mov	r2, r7
 80069f8:	9005      	str	r0, [sp, #20]
 80069fa:	4631      	mov	r1, r6
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 fc71 	bl	80072e4 <__mdiff>
 8006a02:	68c2      	ldr	r2, [r0, #12]
 8006a04:	4605      	mov	r5, r0
 8006a06:	bb02      	cbnz	r2, 8006a4a <_dtoa_r+0xa7a>
 8006a08:	4601      	mov	r1, r0
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	f000 fc4e 	bl	80072ac <__mcmp>
 8006a10:	4602      	mov	r2, r0
 8006a12:	4629      	mov	r1, r5
 8006a14:	4620      	mov	r0, r4
 8006a16:	9209      	str	r2, [sp, #36]	; 0x24
 8006a18:	f000 fa0c 	bl	8006e34 <_Bfree>
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a20:	9d04      	ldr	r5, [sp, #16]
 8006a22:	ea43 0102 	orr.w	r1, r3, r2
 8006a26:	9b06      	ldr	r3, [sp, #24]
 8006a28:	4319      	orrs	r1, r3
 8006a2a:	d110      	bne.n	8006a4e <_dtoa_r+0xa7e>
 8006a2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a30:	d029      	beq.n	8006a86 <_dtoa_r+0xab6>
 8006a32:	9b05      	ldr	r3, [sp, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd02      	ble.n	8006a3e <_dtoa_r+0xa6e>
 8006a38:	9b02      	ldr	r3, [sp, #8]
 8006a3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	f883 9000 	strb.w	r9, [r3]
 8006a44:	e774      	b.n	8006930 <_dtoa_r+0x960>
 8006a46:	4638      	mov	r0, r7
 8006a48:	e7ba      	b.n	80069c0 <_dtoa_r+0x9f0>
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	e7e1      	b.n	8006a12 <_dtoa_r+0xa42>
 8006a4e:	9b05      	ldr	r3, [sp, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	db04      	blt.n	8006a5e <_dtoa_r+0xa8e>
 8006a54:	9907      	ldr	r1, [sp, #28]
 8006a56:	430b      	orrs	r3, r1
 8006a58:	9906      	ldr	r1, [sp, #24]
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	d120      	bne.n	8006aa0 <_dtoa_r+0xad0>
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	dded      	ble.n	8006a3e <_dtoa_r+0xa6e>
 8006a62:	4651      	mov	r1, sl
 8006a64:	2201      	movs	r2, #1
 8006a66:	4620      	mov	r0, r4
 8006a68:	f000 fbb4 	bl	80071d4 <__lshift>
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4682      	mov	sl, r0
 8006a70:	f000 fc1c 	bl	80072ac <__mcmp>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	dc03      	bgt.n	8006a80 <_dtoa_r+0xab0>
 8006a78:	d1e1      	bne.n	8006a3e <_dtoa_r+0xa6e>
 8006a7a:	f019 0f01 	tst.w	r9, #1
 8006a7e:	d0de      	beq.n	8006a3e <_dtoa_r+0xa6e>
 8006a80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a84:	d1d8      	bne.n	8006a38 <_dtoa_r+0xa68>
 8006a86:	9a01      	ldr	r2, [sp, #4]
 8006a88:	2339      	movs	r3, #57	; 0x39
 8006a8a:	7013      	strb	r3, [r2, #0]
 8006a8c:	462b      	mov	r3, r5
 8006a8e:	461d      	mov	r5, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a96:	2a39      	cmp	r2, #57	; 0x39
 8006a98:	d06c      	beq.n	8006b74 <_dtoa_r+0xba4>
 8006a9a:	3201      	adds	r2, #1
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	e747      	b.n	8006930 <_dtoa_r+0x960>
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	dd07      	ble.n	8006ab4 <_dtoa_r+0xae4>
 8006aa4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006aa8:	d0ed      	beq.n	8006a86 <_dtoa_r+0xab6>
 8006aaa:	9a01      	ldr	r2, [sp, #4]
 8006aac:	f109 0301 	add.w	r3, r9, #1
 8006ab0:	7013      	strb	r3, [r2, #0]
 8006ab2:	e73d      	b.n	8006930 <_dtoa_r+0x960>
 8006ab4:	9b04      	ldr	r3, [sp, #16]
 8006ab6:	9a08      	ldr	r2, [sp, #32]
 8006ab8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d043      	beq.n	8006b48 <_dtoa_r+0xb78>
 8006ac0:	4651      	mov	r1, sl
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	220a      	movs	r2, #10
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 f9d6 	bl	8006e78 <__multadd>
 8006acc:	45b8      	cmp	r8, r7
 8006ace:	4682      	mov	sl, r0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	f04f 020a 	mov.w	r2, #10
 8006ad8:	4641      	mov	r1, r8
 8006ada:	4620      	mov	r0, r4
 8006adc:	d107      	bne.n	8006aee <_dtoa_r+0xb1e>
 8006ade:	f000 f9cb 	bl	8006e78 <__multadd>
 8006ae2:	4680      	mov	r8, r0
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	9b04      	ldr	r3, [sp, #16]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	9304      	str	r3, [sp, #16]
 8006aec:	e775      	b.n	80069da <_dtoa_r+0xa0a>
 8006aee:	f000 f9c3 	bl	8006e78 <__multadd>
 8006af2:	4639      	mov	r1, r7
 8006af4:	4680      	mov	r8, r0
 8006af6:	2300      	movs	r3, #0
 8006af8:	220a      	movs	r2, #10
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 f9bc 	bl	8006e78 <__multadd>
 8006b00:	4607      	mov	r7, r0
 8006b02:	e7f0      	b.n	8006ae6 <_dtoa_r+0xb16>
 8006b04:	9b04      	ldr	r3, [sp, #16]
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	9d00      	ldr	r5, [sp, #0]
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4650      	mov	r0, sl
 8006b0e:	f7ff f9d6 	bl	8005ebe <quorem>
 8006b12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b16:	9b00      	ldr	r3, [sp, #0]
 8006b18:	f805 9b01 	strb.w	r9, [r5], #1
 8006b1c:	1aea      	subs	r2, r5, r3
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	4293      	cmp	r3, r2
 8006b22:	dd07      	ble.n	8006b34 <_dtoa_r+0xb64>
 8006b24:	4651      	mov	r1, sl
 8006b26:	2300      	movs	r3, #0
 8006b28:	220a      	movs	r2, #10
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 f9a4 	bl	8006e78 <__multadd>
 8006b30:	4682      	mov	sl, r0
 8006b32:	e7ea      	b.n	8006b0a <_dtoa_r+0xb3a>
 8006b34:	9b01      	ldr	r3, [sp, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	bfc8      	it	gt
 8006b3a:	461d      	movgt	r5, r3
 8006b3c:	9b00      	ldr	r3, [sp, #0]
 8006b3e:	bfd8      	it	le
 8006b40:	2501      	movle	r5, #1
 8006b42:	441d      	add	r5, r3
 8006b44:	f04f 0800 	mov.w	r8, #0
 8006b48:	4651      	mov	r1, sl
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f000 fb41 	bl	80071d4 <__lshift>
 8006b52:	4631      	mov	r1, r6
 8006b54:	4682      	mov	sl, r0
 8006b56:	f000 fba9 	bl	80072ac <__mcmp>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	dc96      	bgt.n	8006a8c <_dtoa_r+0xabc>
 8006b5e:	d102      	bne.n	8006b66 <_dtoa_r+0xb96>
 8006b60:	f019 0f01 	tst.w	r9, #1
 8006b64:	d192      	bne.n	8006a8c <_dtoa_r+0xabc>
 8006b66:	462b      	mov	r3, r5
 8006b68:	461d      	mov	r5, r3
 8006b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b6e:	2a30      	cmp	r2, #48	; 0x30
 8006b70:	d0fa      	beq.n	8006b68 <_dtoa_r+0xb98>
 8006b72:	e6dd      	b.n	8006930 <_dtoa_r+0x960>
 8006b74:	9a00      	ldr	r2, [sp, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d189      	bne.n	8006a8e <_dtoa_r+0xabe>
 8006b7a:	f10b 0b01 	add.w	fp, fp, #1
 8006b7e:	2331      	movs	r3, #49	; 0x31
 8006b80:	e796      	b.n	8006ab0 <_dtoa_r+0xae0>
 8006b82:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <_dtoa_r+0xbdc>)
 8006b84:	f7ff ba99 	b.w	80060ba <_dtoa_r+0xea>
 8006b88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f47f aa6d 	bne.w	800606a <_dtoa_r+0x9a>
 8006b90:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <_dtoa_r+0xbe0>)
 8006b92:	f7ff ba92 	b.w	80060ba <_dtoa_r+0xea>
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	dcb5      	bgt.n	8006b08 <_dtoa_r+0xb38>
 8006b9c:	9b07      	ldr	r3, [sp, #28]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	f73f aeb1 	bgt.w	8006906 <_dtoa_r+0x936>
 8006ba4:	e7b0      	b.n	8006b08 <_dtoa_r+0xb38>
 8006ba6:	bf00      	nop
 8006ba8:	0801b930 	.word	0x0801b930
 8006bac:	0801b890 	.word	0x0801b890
 8006bb0:	0801b8b4 	.word	0x0801b8b4

08006bb4 <_free_r>:
 8006bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	d044      	beq.n	8006c44 <_free_r+0x90>
 8006bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bbe:	9001      	str	r0, [sp, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8006bc6:	bfb8      	it	lt
 8006bc8:	18e4      	addlt	r4, r4, r3
 8006bca:	f000 f8e7 	bl	8006d9c <__malloc_lock>
 8006bce:	4a1e      	ldr	r2, [pc, #120]	; (8006c48 <_free_r+0x94>)
 8006bd0:	9801      	ldr	r0, [sp, #4]
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	b933      	cbnz	r3, 8006be4 <_free_r+0x30>
 8006bd6:	6063      	str	r3, [r4, #4]
 8006bd8:	6014      	str	r4, [r2, #0]
 8006bda:	b003      	add	sp, #12
 8006bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006be0:	f000 b8e2 	b.w	8006da8 <__malloc_unlock>
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	d908      	bls.n	8006bfa <_free_r+0x46>
 8006be8:	6825      	ldr	r5, [r4, #0]
 8006bea:	1961      	adds	r1, r4, r5
 8006bec:	428b      	cmp	r3, r1
 8006bee:	bf01      	itttt	eq
 8006bf0:	6819      	ldreq	r1, [r3, #0]
 8006bf2:	685b      	ldreq	r3, [r3, #4]
 8006bf4:	1949      	addeq	r1, r1, r5
 8006bf6:	6021      	streq	r1, [r4, #0]
 8006bf8:	e7ed      	b.n	8006bd6 <_free_r+0x22>
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	b10b      	cbz	r3, 8006c04 <_free_r+0x50>
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	d9fa      	bls.n	8006bfa <_free_r+0x46>
 8006c04:	6811      	ldr	r1, [r2, #0]
 8006c06:	1855      	adds	r5, r2, r1
 8006c08:	42a5      	cmp	r5, r4
 8006c0a:	d10b      	bne.n	8006c24 <_free_r+0x70>
 8006c0c:	6824      	ldr	r4, [r4, #0]
 8006c0e:	4421      	add	r1, r4
 8006c10:	1854      	adds	r4, r2, r1
 8006c12:	42a3      	cmp	r3, r4
 8006c14:	6011      	str	r1, [r2, #0]
 8006c16:	d1e0      	bne.n	8006bda <_free_r+0x26>
 8006c18:	681c      	ldr	r4, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	6053      	str	r3, [r2, #4]
 8006c1e:	440c      	add	r4, r1
 8006c20:	6014      	str	r4, [r2, #0]
 8006c22:	e7da      	b.n	8006bda <_free_r+0x26>
 8006c24:	d902      	bls.n	8006c2c <_free_r+0x78>
 8006c26:	230c      	movs	r3, #12
 8006c28:	6003      	str	r3, [r0, #0]
 8006c2a:	e7d6      	b.n	8006bda <_free_r+0x26>
 8006c2c:	6825      	ldr	r5, [r4, #0]
 8006c2e:	1961      	adds	r1, r4, r5
 8006c30:	428b      	cmp	r3, r1
 8006c32:	bf04      	itt	eq
 8006c34:	6819      	ldreq	r1, [r3, #0]
 8006c36:	685b      	ldreq	r3, [r3, #4]
 8006c38:	6063      	str	r3, [r4, #4]
 8006c3a:	bf04      	itt	eq
 8006c3c:	1949      	addeq	r1, r1, r5
 8006c3e:	6021      	streq	r1, [r4, #0]
 8006c40:	6054      	str	r4, [r2, #4]
 8006c42:	e7ca      	b.n	8006bda <_free_r+0x26>
 8006c44:	b003      	add	sp, #12
 8006c46:	bd30      	pop	{r4, r5, pc}
 8006c48:	20000de0 	.word	0x20000de0

08006c4c <malloc>:
 8006c4c:	4b02      	ldr	r3, [pc, #8]	; (8006c58 <malloc+0xc>)
 8006c4e:	4601      	mov	r1, r0
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	f000 b823 	b.w	8006c9c <_malloc_r>
 8006c56:	bf00      	nop
 8006c58:	20000068 	.word	0x20000068

08006c5c <sbrk_aligned>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4e0e      	ldr	r6, [pc, #56]	; (8006c98 <sbrk_aligned+0x3c>)
 8006c60:	460c      	mov	r4, r1
 8006c62:	6831      	ldr	r1, [r6, #0]
 8006c64:	4605      	mov	r5, r0
 8006c66:	b911      	cbnz	r1, 8006c6e <sbrk_aligned+0x12>
 8006c68:	f000 fe40 	bl	80078ec <_sbrk_r>
 8006c6c:	6030      	str	r0, [r6, #0]
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4628      	mov	r0, r5
 8006c72:	f000 fe3b 	bl	80078ec <_sbrk_r>
 8006c76:	1c43      	adds	r3, r0, #1
 8006c78:	d00a      	beq.n	8006c90 <sbrk_aligned+0x34>
 8006c7a:	1cc4      	adds	r4, r0, #3
 8006c7c:	f024 0403 	bic.w	r4, r4, #3
 8006c80:	42a0      	cmp	r0, r4
 8006c82:	d007      	beq.n	8006c94 <sbrk_aligned+0x38>
 8006c84:	1a21      	subs	r1, r4, r0
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 fe30 	bl	80078ec <_sbrk_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d101      	bne.n	8006c94 <sbrk_aligned+0x38>
 8006c90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c94:	4620      	mov	r0, r4
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	20000de4 	.word	0x20000de4

08006c9c <_malloc_r>:
 8006c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	1ccd      	adds	r5, r1, #3
 8006ca2:	f025 0503 	bic.w	r5, r5, #3
 8006ca6:	3508      	adds	r5, #8
 8006ca8:	2d0c      	cmp	r5, #12
 8006caa:	bf38      	it	cc
 8006cac:	250c      	movcc	r5, #12
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	db01      	blt.n	8006cb8 <_malloc_r+0x1c>
 8006cb4:	42a9      	cmp	r1, r5
 8006cb6:	d905      	bls.n	8006cc4 <_malloc_r+0x28>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d98 <_malloc_r+0xfc>
 8006cc8:	f000 f868 	bl	8006d9c <__malloc_lock>
 8006ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd0:	461c      	mov	r4, r3
 8006cd2:	bb5c      	cbnz	r4, 8006d2c <_malloc_r+0x90>
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	f7ff ffc0 	bl	8006c5c <sbrk_aligned>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	4604      	mov	r4, r0
 8006ce0:	d155      	bne.n	8006d8e <_malloc_r+0xf2>
 8006ce2:	f8d8 4000 	ldr.w	r4, [r8]
 8006ce6:	4626      	mov	r6, r4
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	d145      	bne.n	8006d78 <_malloc_r+0xdc>
 8006cec:	2c00      	cmp	r4, #0
 8006cee:	d048      	beq.n	8006d82 <_malloc_r+0xe6>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	eb04 0903 	add.w	r9, r4, r3
 8006cfa:	f000 fdf7 	bl	80078ec <_sbrk_r>
 8006cfe:	4581      	cmp	r9, r0
 8006d00:	d13f      	bne.n	8006d82 <_malloc_r+0xe6>
 8006d02:	6821      	ldr	r1, [r4, #0]
 8006d04:	1a6d      	subs	r5, r5, r1
 8006d06:	4629      	mov	r1, r5
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f7ff ffa7 	bl	8006c5c <sbrk_aligned>
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d037      	beq.n	8006d82 <_malloc_r+0xe6>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	442b      	add	r3, r5
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	f8d8 3000 	ldr.w	r3, [r8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d038      	beq.n	8006d92 <_malloc_r+0xf6>
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	42a2      	cmp	r2, r4
 8006d24:	d12b      	bne.n	8006d7e <_malloc_r+0xe2>
 8006d26:	2200      	movs	r2, #0
 8006d28:	605a      	str	r2, [r3, #4]
 8006d2a:	e00f      	b.n	8006d4c <_malloc_r+0xb0>
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	1b52      	subs	r2, r2, r5
 8006d30:	d41f      	bmi.n	8006d72 <_malloc_r+0xd6>
 8006d32:	2a0b      	cmp	r2, #11
 8006d34:	d917      	bls.n	8006d66 <_malloc_r+0xca>
 8006d36:	1961      	adds	r1, r4, r5
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	6025      	str	r5, [r4, #0]
 8006d3c:	bf18      	it	ne
 8006d3e:	6059      	strne	r1, [r3, #4]
 8006d40:	6863      	ldr	r3, [r4, #4]
 8006d42:	bf08      	it	eq
 8006d44:	f8c8 1000 	streq.w	r1, [r8]
 8006d48:	5162      	str	r2, [r4, r5]
 8006d4a:	604b      	str	r3, [r1, #4]
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	f104 060b 	add.w	r6, r4, #11
 8006d52:	f000 f829 	bl	8006da8 <__malloc_unlock>
 8006d56:	f026 0607 	bic.w	r6, r6, #7
 8006d5a:	1d23      	adds	r3, r4, #4
 8006d5c:	1af2      	subs	r2, r6, r3
 8006d5e:	d0ae      	beq.n	8006cbe <_malloc_r+0x22>
 8006d60:	1b9b      	subs	r3, r3, r6
 8006d62:	50a3      	str	r3, [r4, r2]
 8006d64:	e7ab      	b.n	8006cbe <_malloc_r+0x22>
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	6862      	ldr	r2, [r4, #4]
 8006d6a:	d1dd      	bne.n	8006d28 <_malloc_r+0x8c>
 8006d6c:	f8c8 2000 	str.w	r2, [r8]
 8006d70:	e7ec      	b.n	8006d4c <_malloc_r+0xb0>
 8006d72:	4623      	mov	r3, r4
 8006d74:	6864      	ldr	r4, [r4, #4]
 8006d76:	e7ac      	b.n	8006cd2 <_malloc_r+0x36>
 8006d78:	4634      	mov	r4, r6
 8006d7a:	6876      	ldr	r6, [r6, #4]
 8006d7c:	e7b4      	b.n	8006ce8 <_malloc_r+0x4c>
 8006d7e:	4613      	mov	r3, r2
 8006d80:	e7cc      	b.n	8006d1c <_malloc_r+0x80>
 8006d82:	230c      	movs	r3, #12
 8006d84:	603b      	str	r3, [r7, #0]
 8006d86:	4638      	mov	r0, r7
 8006d88:	f000 f80e 	bl	8006da8 <__malloc_unlock>
 8006d8c:	e797      	b.n	8006cbe <_malloc_r+0x22>
 8006d8e:	6025      	str	r5, [r4, #0]
 8006d90:	e7dc      	b.n	8006d4c <_malloc_r+0xb0>
 8006d92:	605b      	str	r3, [r3, #4]
 8006d94:	deff      	udf	#255	; 0xff
 8006d96:	bf00      	nop
 8006d98:	20000de0 	.word	0x20000de0

08006d9c <__malloc_lock>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	; (8006da4 <__malloc_lock+0x8>)
 8006d9e:	f7ff b88c 	b.w	8005eba <__retarget_lock_acquire_recursive>
 8006da2:	bf00      	nop
 8006da4:	20000ddc 	.word	0x20000ddc

08006da8 <__malloc_unlock>:
 8006da8:	4801      	ldr	r0, [pc, #4]	; (8006db0 <__malloc_unlock+0x8>)
 8006daa:	f7ff b887 	b.w	8005ebc <__retarget_lock_release_recursive>
 8006dae:	bf00      	nop
 8006db0:	20000ddc 	.word	0x20000ddc

08006db4 <_Balloc>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	69c6      	ldr	r6, [r0, #28]
 8006db8:	4604      	mov	r4, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	b976      	cbnz	r6, 8006ddc <_Balloc+0x28>
 8006dbe:	2010      	movs	r0, #16
 8006dc0:	f7ff ff44 	bl	8006c4c <malloc>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	61e0      	str	r0, [r4, #28]
 8006dc8:	b920      	cbnz	r0, 8006dd4 <_Balloc+0x20>
 8006dca:	4b18      	ldr	r3, [pc, #96]	; (8006e2c <_Balloc+0x78>)
 8006dcc:	4818      	ldr	r0, [pc, #96]	; (8006e30 <_Balloc+0x7c>)
 8006dce:	216b      	movs	r1, #107	; 0x6b
 8006dd0:	f000 fdaa 	bl	8007928 <__assert_func>
 8006dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dd8:	6006      	str	r6, [r0, #0]
 8006dda:	60c6      	str	r6, [r0, #12]
 8006ddc:	69e6      	ldr	r6, [r4, #28]
 8006dde:	68f3      	ldr	r3, [r6, #12]
 8006de0:	b183      	cbz	r3, 8006e04 <_Balloc+0x50>
 8006de2:	69e3      	ldr	r3, [r4, #28]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dea:	b9b8      	cbnz	r0, 8006e1c <_Balloc+0x68>
 8006dec:	2101      	movs	r1, #1
 8006dee:	fa01 f605 	lsl.w	r6, r1, r5
 8006df2:	1d72      	adds	r2, r6, #5
 8006df4:	0092      	lsls	r2, r2, #2
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fdb4 	bl	8007964 <_calloc_r>
 8006dfc:	b160      	cbz	r0, 8006e18 <_Balloc+0x64>
 8006dfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e02:	e00e      	b.n	8006e22 <_Balloc+0x6e>
 8006e04:	2221      	movs	r2, #33	; 0x21
 8006e06:	2104      	movs	r1, #4
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fdab 	bl	8007964 <_calloc_r>
 8006e0e:	69e3      	ldr	r3, [r4, #28]
 8006e10:	60f0      	str	r0, [r6, #12]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e4      	bne.n	8006de2 <_Balloc+0x2e>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	6802      	ldr	r2, [r0, #0]
 8006e1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e22:	2300      	movs	r3, #0
 8006e24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e28:	e7f7      	b.n	8006e1a <_Balloc+0x66>
 8006e2a:	bf00      	nop
 8006e2c:	0801b8c1 	.word	0x0801b8c1
 8006e30:	0801b941 	.word	0x0801b941

08006e34 <_Bfree>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	69c6      	ldr	r6, [r0, #28]
 8006e38:	4605      	mov	r5, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	b976      	cbnz	r6, 8006e5c <_Bfree+0x28>
 8006e3e:	2010      	movs	r0, #16
 8006e40:	f7ff ff04 	bl	8006c4c <malloc>
 8006e44:	4602      	mov	r2, r0
 8006e46:	61e8      	str	r0, [r5, #28]
 8006e48:	b920      	cbnz	r0, 8006e54 <_Bfree+0x20>
 8006e4a:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <_Bfree+0x3c>)
 8006e4c:	4809      	ldr	r0, [pc, #36]	; (8006e74 <_Bfree+0x40>)
 8006e4e:	218f      	movs	r1, #143	; 0x8f
 8006e50:	f000 fd6a 	bl	8007928 <__assert_func>
 8006e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e58:	6006      	str	r6, [r0, #0]
 8006e5a:	60c6      	str	r6, [r0, #12]
 8006e5c:	b13c      	cbz	r4, 8006e6e <_Bfree+0x3a>
 8006e5e:	69eb      	ldr	r3, [r5, #28]
 8006e60:	6862      	ldr	r2, [r4, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e68:	6021      	str	r1, [r4, #0]
 8006e6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	0801b8c1 	.word	0x0801b8c1
 8006e74:	0801b941 	.word	0x0801b941

08006e78 <__multadd>:
 8006e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7c:	690d      	ldr	r5, [r1, #16]
 8006e7e:	4607      	mov	r7, r0
 8006e80:	460c      	mov	r4, r1
 8006e82:	461e      	mov	r6, r3
 8006e84:	f101 0c14 	add.w	ip, r1, #20
 8006e88:	2000      	movs	r0, #0
 8006e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8006e8e:	b299      	uxth	r1, r3
 8006e90:	fb02 6101 	mla	r1, r2, r1, r6
 8006e94:	0c1e      	lsrs	r6, r3, #16
 8006e96:	0c0b      	lsrs	r3, r1, #16
 8006e98:	fb02 3306 	mla	r3, r2, r6, r3
 8006e9c:	b289      	uxth	r1, r1
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ea4:	4285      	cmp	r5, r0
 8006ea6:	f84c 1b04 	str.w	r1, [ip], #4
 8006eaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006eae:	dcec      	bgt.n	8006e8a <__multadd+0x12>
 8006eb0:	b30e      	cbz	r6, 8006ef6 <__multadd+0x7e>
 8006eb2:	68a3      	ldr	r3, [r4, #8]
 8006eb4:	42ab      	cmp	r3, r5
 8006eb6:	dc19      	bgt.n	8006eec <__multadd+0x74>
 8006eb8:	6861      	ldr	r1, [r4, #4]
 8006eba:	4638      	mov	r0, r7
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	f7ff ff79 	bl	8006db4 <_Balloc>
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	b928      	cbnz	r0, 8006ed2 <__multadd+0x5a>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <__multadd+0x84>)
 8006eca:	480d      	ldr	r0, [pc, #52]	; (8006f00 <__multadd+0x88>)
 8006ecc:	21ba      	movs	r1, #186	; 0xba
 8006ece:	f000 fd2b 	bl	8007928 <__assert_func>
 8006ed2:	6922      	ldr	r2, [r4, #16]
 8006ed4:	3202      	adds	r2, #2
 8006ed6:	f104 010c 	add.w	r1, r4, #12
 8006eda:	0092      	lsls	r2, r2, #2
 8006edc:	300c      	adds	r0, #12
 8006ede:	f000 fd15 	bl	800790c <memcpy>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f7ff ffa5 	bl	8006e34 <_Bfree>
 8006eea:	4644      	mov	r4, r8
 8006eec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	615e      	str	r6, [r3, #20]
 8006ef4:	6125      	str	r5, [r4, #16]
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006efc:	0801b930 	.word	0x0801b930
 8006f00:	0801b941 	.word	0x0801b941

08006f04 <__hi0bits>:
 8006f04:	0c03      	lsrs	r3, r0, #16
 8006f06:	041b      	lsls	r3, r3, #16
 8006f08:	b9d3      	cbnz	r3, 8006f40 <__hi0bits+0x3c>
 8006f0a:	0400      	lsls	r0, r0, #16
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f12:	bf04      	itt	eq
 8006f14:	0200      	lsleq	r0, r0, #8
 8006f16:	3308      	addeq	r3, #8
 8006f18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f1c:	bf04      	itt	eq
 8006f1e:	0100      	lsleq	r0, r0, #4
 8006f20:	3304      	addeq	r3, #4
 8006f22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f26:	bf04      	itt	eq
 8006f28:	0080      	lsleq	r0, r0, #2
 8006f2a:	3302      	addeq	r3, #2
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	db05      	blt.n	8006f3c <__hi0bits+0x38>
 8006f30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f34:	f103 0301 	add.w	r3, r3, #1
 8006f38:	bf08      	it	eq
 8006f3a:	2320      	moveq	r3, #32
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	4770      	bx	lr
 8006f40:	2300      	movs	r3, #0
 8006f42:	e7e4      	b.n	8006f0e <__hi0bits+0xa>

08006f44 <__lo0bits>:
 8006f44:	6803      	ldr	r3, [r0, #0]
 8006f46:	f013 0207 	ands.w	r2, r3, #7
 8006f4a:	d00c      	beq.n	8006f66 <__lo0bits+0x22>
 8006f4c:	07d9      	lsls	r1, r3, #31
 8006f4e:	d422      	bmi.n	8006f96 <__lo0bits+0x52>
 8006f50:	079a      	lsls	r2, r3, #30
 8006f52:	bf49      	itett	mi
 8006f54:	085b      	lsrmi	r3, r3, #1
 8006f56:	089b      	lsrpl	r3, r3, #2
 8006f58:	6003      	strmi	r3, [r0, #0]
 8006f5a:	2201      	movmi	r2, #1
 8006f5c:	bf5c      	itt	pl
 8006f5e:	6003      	strpl	r3, [r0, #0]
 8006f60:	2202      	movpl	r2, #2
 8006f62:	4610      	mov	r0, r2
 8006f64:	4770      	bx	lr
 8006f66:	b299      	uxth	r1, r3
 8006f68:	b909      	cbnz	r1, 8006f6e <__lo0bits+0x2a>
 8006f6a:	0c1b      	lsrs	r3, r3, #16
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	b2d9      	uxtb	r1, r3
 8006f70:	b909      	cbnz	r1, 8006f76 <__lo0bits+0x32>
 8006f72:	3208      	adds	r2, #8
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	0719      	lsls	r1, r3, #28
 8006f78:	bf04      	itt	eq
 8006f7a:	091b      	lsreq	r3, r3, #4
 8006f7c:	3204      	addeq	r2, #4
 8006f7e:	0799      	lsls	r1, r3, #30
 8006f80:	bf04      	itt	eq
 8006f82:	089b      	lsreq	r3, r3, #2
 8006f84:	3202      	addeq	r2, #2
 8006f86:	07d9      	lsls	r1, r3, #31
 8006f88:	d403      	bmi.n	8006f92 <__lo0bits+0x4e>
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	f102 0201 	add.w	r2, r2, #1
 8006f90:	d003      	beq.n	8006f9a <__lo0bits+0x56>
 8006f92:	6003      	str	r3, [r0, #0]
 8006f94:	e7e5      	b.n	8006f62 <__lo0bits+0x1e>
 8006f96:	2200      	movs	r2, #0
 8006f98:	e7e3      	b.n	8006f62 <__lo0bits+0x1e>
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	e7e1      	b.n	8006f62 <__lo0bits+0x1e>
	...

08006fa0 <__i2b>:
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	f7ff ff05 	bl	8006db4 <_Balloc>
 8006faa:	4602      	mov	r2, r0
 8006fac:	b928      	cbnz	r0, 8006fba <__i2b+0x1a>
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <__i2b+0x24>)
 8006fb0:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <__i2b+0x28>)
 8006fb2:	f240 1145 	movw	r1, #325	; 0x145
 8006fb6:	f000 fcb7 	bl	8007928 <__assert_func>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	6144      	str	r4, [r0, #20]
 8006fbe:	6103      	str	r3, [r0, #16]
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	bf00      	nop
 8006fc4:	0801b930 	.word	0x0801b930
 8006fc8:	0801b941 	.word	0x0801b941

08006fcc <__multiply>:
 8006fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd0:	4691      	mov	r9, r2
 8006fd2:	690a      	ldr	r2, [r1, #16]
 8006fd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	bfb8      	it	lt
 8006fdc:	460b      	movlt	r3, r1
 8006fde:	460c      	mov	r4, r1
 8006fe0:	bfbc      	itt	lt
 8006fe2:	464c      	movlt	r4, r9
 8006fe4:	4699      	movlt	r9, r3
 8006fe6:	6927      	ldr	r7, [r4, #16]
 8006fe8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fec:	68a3      	ldr	r3, [r4, #8]
 8006fee:	6861      	ldr	r1, [r4, #4]
 8006ff0:	eb07 060a 	add.w	r6, r7, sl
 8006ff4:	42b3      	cmp	r3, r6
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	bfb8      	it	lt
 8006ffa:	3101      	addlt	r1, #1
 8006ffc:	f7ff feda 	bl	8006db4 <_Balloc>
 8007000:	b930      	cbnz	r0, 8007010 <__multiply+0x44>
 8007002:	4602      	mov	r2, r0
 8007004:	4b44      	ldr	r3, [pc, #272]	; (8007118 <__multiply+0x14c>)
 8007006:	4845      	ldr	r0, [pc, #276]	; (800711c <__multiply+0x150>)
 8007008:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800700c:	f000 fc8c 	bl	8007928 <__assert_func>
 8007010:	f100 0514 	add.w	r5, r0, #20
 8007014:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007018:	462b      	mov	r3, r5
 800701a:	2200      	movs	r2, #0
 800701c:	4543      	cmp	r3, r8
 800701e:	d321      	bcc.n	8007064 <__multiply+0x98>
 8007020:	f104 0314 	add.w	r3, r4, #20
 8007024:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007028:	f109 0314 	add.w	r3, r9, #20
 800702c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007030:	9202      	str	r2, [sp, #8]
 8007032:	1b3a      	subs	r2, r7, r4
 8007034:	3a15      	subs	r2, #21
 8007036:	f022 0203 	bic.w	r2, r2, #3
 800703a:	3204      	adds	r2, #4
 800703c:	f104 0115 	add.w	r1, r4, #21
 8007040:	428f      	cmp	r7, r1
 8007042:	bf38      	it	cc
 8007044:	2204      	movcc	r2, #4
 8007046:	9201      	str	r2, [sp, #4]
 8007048:	9a02      	ldr	r2, [sp, #8]
 800704a:	9303      	str	r3, [sp, #12]
 800704c:	429a      	cmp	r2, r3
 800704e:	d80c      	bhi.n	800706a <__multiply+0x9e>
 8007050:	2e00      	cmp	r6, #0
 8007052:	dd03      	ble.n	800705c <__multiply+0x90>
 8007054:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007058:	2b00      	cmp	r3, #0
 800705a:	d05b      	beq.n	8007114 <__multiply+0x148>
 800705c:	6106      	str	r6, [r0, #16]
 800705e:	b005      	add	sp, #20
 8007060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007064:	f843 2b04 	str.w	r2, [r3], #4
 8007068:	e7d8      	b.n	800701c <__multiply+0x50>
 800706a:	f8b3 a000 	ldrh.w	sl, [r3]
 800706e:	f1ba 0f00 	cmp.w	sl, #0
 8007072:	d024      	beq.n	80070be <__multiply+0xf2>
 8007074:	f104 0e14 	add.w	lr, r4, #20
 8007078:	46a9      	mov	r9, r5
 800707a:	f04f 0c00 	mov.w	ip, #0
 800707e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007082:	f8d9 1000 	ldr.w	r1, [r9]
 8007086:	fa1f fb82 	uxth.w	fp, r2
 800708a:	b289      	uxth	r1, r1
 800708c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007090:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007094:	f8d9 2000 	ldr.w	r2, [r9]
 8007098:	4461      	add	r1, ip
 800709a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800709e:	fb0a c20b 	mla	r2, sl, fp, ip
 80070a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070a6:	b289      	uxth	r1, r1
 80070a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070ac:	4577      	cmp	r7, lr
 80070ae:	f849 1b04 	str.w	r1, [r9], #4
 80070b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070b6:	d8e2      	bhi.n	800707e <__multiply+0xb2>
 80070b8:	9a01      	ldr	r2, [sp, #4]
 80070ba:	f845 c002 	str.w	ip, [r5, r2]
 80070be:	9a03      	ldr	r2, [sp, #12]
 80070c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070c4:	3304      	adds	r3, #4
 80070c6:	f1b9 0f00 	cmp.w	r9, #0
 80070ca:	d021      	beq.n	8007110 <__multiply+0x144>
 80070cc:	6829      	ldr	r1, [r5, #0]
 80070ce:	f104 0c14 	add.w	ip, r4, #20
 80070d2:	46ae      	mov	lr, r5
 80070d4:	f04f 0a00 	mov.w	sl, #0
 80070d8:	f8bc b000 	ldrh.w	fp, [ip]
 80070dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070e0:	fb09 220b 	mla	r2, r9, fp, r2
 80070e4:	4452      	add	r2, sl
 80070e6:	b289      	uxth	r1, r1
 80070e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070ec:	f84e 1b04 	str.w	r1, [lr], #4
 80070f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070f8:	f8be 1000 	ldrh.w	r1, [lr]
 80070fc:	fb09 110a 	mla	r1, r9, sl, r1
 8007100:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007104:	4567      	cmp	r7, ip
 8007106:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800710a:	d8e5      	bhi.n	80070d8 <__multiply+0x10c>
 800710c:	9a01      	ldr	r2, [sp, #4]
 800710e:	50a9      	str	r1, [r5, r2]
 8007110:	3504      	adds	r5, #4
 8007112:	e799      	b.n	8007048 <__multiply+0x7c>
 8007114:	3e01      	subs	r6, #1
 8007116:	e79b      	b.n	8007050 <__multiply+0x84>
 8007118:	0801b930 	.word	0x0801b930
 800711c:	0801b941 	.word	0x0801b941

08007120 <__pow5mult>:
 8007120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007124:	4615      	mov	r5, r2
 8007126:	f012 0203 	ands.w	r2, r2, #3
 800712a:	4606      	mov	r6, r0
 800712c:	460f      	mov	r7, r1
 800712e:	d007      	beq.n	8007140 <__pow5mult+0x20>
 8007130:	4c25      	ldr	r4, [pc, #148]	; (80071c8 <__pow5mult+0xa8>)
 8007132:	3a01      	subs	r2, #1
 8007134:	2300      	movs	r3, #0
 8007136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800713a:	f7ff fe9d 	bl	8006e78 <__multadd>
 800713e:	4607      	mov	r7, r0
 8007140:	10ad      	asrs	r5, r5, #2
 8007142:	d03d      	beq.n	80071c0 <__pow5mult+0xa0>
 8007144:	69f4      	ldr	r4, [r6, #28]
 8007146:	b97c      	cbnz	r4, 8007168 <__pow5mult+0x48>
 8007148:	2010      	movs	r0, #16
 800714a:	f7ff fd7f 	bl	8006c4c <malloc>
 800714e:	4602      	mov	r2, r0
 8007150:	61f0      	str	r0, [r6, #28]
 8007152:	b928      	cbnz	r0, 8007160 <__pow5mult+0x40>
 8007154:	4b1d      	ldr	r3, [pc, #116]	; (80071cc <__pow5mult+0xac>)
 8007156:	481e      	ldr	r0, [pc, #120]	; (80071d0 <__pow5mult+0xb0>)
 8007158:	f240 11b3 	movw	r1, #435	; 0x1b3
 800715c:	f000 fbe4 	bl	8007928 <__assert_func>
 8007160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007164:	6004      	str	r4, [r0, #0]
 8007166:	60c4      	str	r4, [r0, #12]
 8007168:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800716c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007170:	b94c      	cbnz	r4, 8007186 <__pow5mult+0x66>
 8007172:	f240 2171 	movw	r1, #625	; 0x271
 8007176:	4630      	mov	r0, r6
 8007178:	f7ff ff12 	bl	8006fa0 <__i2b>
 800717c:	2300      	movs	r3, #0
 800717e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007182:	4604      	mov	r4, r0
 8007184:	6003      	str	r3, [r0, #0]
 8007186:	f04f 0900 	mov.w	r9, #0
 800718a:	07eb      	lsls	r3, r5, #31
 800718c:	d50a      	bpl.n	80071a4 <__pow5mult+0x84>
 800718e:	4639      	mov	r1, r7
 8007190:	4622      	mov	r2, r4
 8007192:	4630      	mov	r0, r6
 8007194:	f7ff ff1a 	bl	8006fcc <__multiply>
 8007198:	4639      	mov	r1, r7
 800719a:	4680      	mov	r8, r0
 800719c:	4630      	mov	r0, r6
 800719e:	f7ff fe49 	bl	8006e34 <_Bfree>
 80071a2:	4647      	mov	r7, r8
 80071a4:	106d      	asrs	r5, r5, #1
 80071a6:	d00b      	beq.n	80071c0 <__pow5mult+0xa0>
 80071a8:	6820      	ldr	r0, [r4, #0]
 80071aa:	b938      	cbnz	r0, 80071bc <__pow5mult+0x9c>
 80071ac:	4622      	mov	r2, r4
 80071ae:	4621      	mov	r1, r4
 80071b0:	4630      	mov	r0, r6
 80071b2:	f7ff ff0b 	bl	8006fcc <__multiply>
 80071b6:	6020      	str	r0, [r4, #0]
 80071b8:	f8c0 9000 	str.w	r9, [r0]
 80071bc:	4604      	mov	r4, r0
 80071be:	e7e4      	b.n	800718a <__pow5mult+0x6a>
 80071c0:	4638      	mov	r0, r7
 80071c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c6:	bf00      	nop
 80071c8:	0801ba90 	.word	0x0801ba90
 80071cc:	0801b8c1 	.word	0x0801b8c1
 80071d0:	0801b941 	.word	0x0801b941

080071d4 <__lshift>:
 80071d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	460c      	mov	r4, r1
 80071da:	6849      	ldr	r1, [r1, #4]
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071e2:	68a3      	ldr	r3, [r4, #8]
 80071e4:	4607      	mov	r7, r0
 80071e6:	4691      	mov	r9, r2
 80071e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071ec:	f108 0601 	add.w	r6, r8, #1
 80071f0:	42b3      	cmp	r3, r6
 80071f2:	db0b      	blt.n	800720c <__lshift+0x38>
 80071f4:	4638      	mov	r0, r7
 80071f6:	f7ff fddd 	bl	8006db4 <_Balloc>
 80071fa:	4605      	mov	r5, r0
 80071fc:	b948      	cbnz	r0, 8007212 <__lshift+0x3e>
 80071fe:	4602      	mov	r2, r0
 8007200:	4b28      	ldr	r3, [pc, #160]	; (80072a4 <__lshift+0xd0>)
 8007202:	4829      	ldr	r0, [pc, #164]	; (80072a8 <__lshift+0xd4>)
 8007204:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007208:	f000 fb8e 	bl	8007928 <__assert_func>
 800720c:	3101      	adds	r1, #1
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	e7ee      	b.n	80071f0 <__lshift+0x1c>
 8007212:	2300      	movs	r3, #0
 8007214:	f100 0114 	add.w	r1, r0, #20
 8007218:	f100 0210 	add.w	r2, r0, #16
 800721c:	4618      	mov	r0, r3
 800721e:	4553      	cmp	r3, sl
 8007220:	db33      	blt.n	800728a <__lshift+0xb6>
 8007222:	6920      	ldr	r0, [r4, #16]
 8007224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007228:	f104 0314 	add.w	r3, r4, #20
 800722c:	f019 091f 	ands.w	r9, r9, #31
 8007230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007234:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007238:	d02b      	beq.n	8007292 <__lshift+0xbe>
 800723a:	f1c9 0e20 	rsb	lr, r9, #32
 800723e:	468a      	mov	sl, r1
 8007240:	2200      	movs	r2, #0
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	fa00 f009 	lsl.w	r0, r0, r9
 8007248:	4310      	orrs	r0, r2
 800724a:	f84a 0b04 	str.w	r0, [sl], #4
 800724e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007252:	459c      	cmp	ip, r3
 8007254:	fa22 f20e 	lsr.w	r2, r2, lr
 8007258:	d8f3      	bhi.n	8007242 <__lshift+0x6e>
 800725a:	ebac 0304 	sub.w	r3, ip, r4
 800725e:	3b15      	subs	r3, #21
 8007260:	f023 0303 	bic.w	r3, r3, #3
 8007264:	3304      	adds	r3, #4
 8007266:	f104 0015 	add.w	r0, r4, #21
 800726a:	4584      	cmp	ip, r0
 800726c:	bf38      	it	cc
 800726e:	2304      	movcc	r3, #4
 8007270:	50ca      	str	r2, [r1, r3]
 8007272:	b10a      	cbz	r2, 8007278 <__lshift+0xa4>
 8007274:	f108 0602 	add.w	r6, r8, #2
 8007278:	3e01      	subs	r6, #1
 800727a:	4638      	mov	r0, r7
 800727c:	612e      	str	r6, [r5, #16]
 800727e:	4621      	mov	r1, r4
 8007280:	f7ff fdd8 	bl	8006e34 <_Bfree>
 8007284:	4628      	mov	r0, r5
 8007286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728a:	f842 0f04 	str.w	r0, [r2, #4]!
 800728e:	3301      	adds	r3, #1
 8007290:	e7c5      	b.n	800721e <__lshift+0x4a>
 8007292:	3904      	subs	r1, #4
 8007294:	f853 2b04 	ldr.w	r2, [r3], #4
 8007298:	f841 2f04 	str.w	r2, [r1, #4]!
 800729c:	459c      	cmp	ip, r3
 800729e:	d8f9      	bhi.n	8007294 <__lshift+0xc0>
 80072a0:	e7ea      	b.n	8007278 <__lshift+0xa4>
 80072a2:	bf00      	nop
 80072a4:	0801b930 	.word	0x0801b930
 80072a8:	0801b941 	.word	0x0801b941

080072ac <__mcmp>:
 80072ac:	b530      	push	{r4, r5, lr}
 80072ae:	6902      	ldr	r2, [r0, #16]
 80072b0:	690c      	ldr	r4, [r1, #16]
 80072b2:	1b12      	subs	r2, r2, r4
 80072b4:	d10e      	bne.n	80072d4 <__mcmp+0x28>
 80072b6:	f100 0314 	add.w	r3, r0, #20
 80072ba:	3114      	adds	r1, #20
 80072bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072cc:	42a5      	cmp	r5, r4
 80072ce:	d003      	beq.n	80072d8 <__mcmp+0x2c>
 80072d0:	d305      	bcc.n	80072de <__mcmp+0x32>
 80072d2:	2201      	movs	r2, #1
 80072d4:	4610      	mov	r0, r2
 80072d6:	bd30      	pop	{r4, r5, pc}
 80072d8:	4283      	cmp	r3, r0
 80072da:	d3f3      	bcc.n	80072c4 <__mcmp+0x18>
 80072dc:	e7fa      	b.n	80072d4 <__mcmp+0x28>
 80072de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072e2:	e7f7      	b.n	80072d4 <__mcmp+0x28>

080072e4 <__mdiff>:
 80072e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	460c      	mov	r4, r1
 80072ea:	4606      	mov	r6, r0
 80072ec:	4611      	mov	r1, r2
 80072ee:	4620      	mov	r0, r4
 80072f0:	4690      	mov	r8, r2
 80072f2:	f7ff ffdb 	bl	80072ac <__mcmp>
 80072f6:	1e05      	subs	r5, r0, #0
 80072f8:	d110      	bne.n	800731c <__mdiff+0x38>
 80072fa:	4629      	mov	r1, r5
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff fd59 	bl	8006db4 <_Balloc>
 8007302:	b930      	cbnz	r0, 8007312 <__mdiff+0x2e>
 8007304:	4b3a      	ldr	r3, [pc, #232]	; (80073f0 <__mdiff+0x10c>)
 8007306:	4602      	mov	r2, r0
 8007308:	f240 2137 	movw	r1, #567	; 0x237
 800730c:	4839      	ldr	r0, [pc, #228]	; (80073f4 <__mdiff+0x110>)
 800730e:	f000 fb0b 	bl	8007928 <__assert_func>
 8007312:	2301      	movs	r3, #1
 8007314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731c:	bfa4      	itt	ge
 800731e:	4643      	movge	r3, r8
 8007320:	46a0      	movge	r8, r4
 8007322:	4630      	mov	r0, r6
 8007324:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007328:	bfa6      	itte	ge
 800732a:	461c      	movge	r4, r3
 800732c:	2500      	movge	r5, #0
 800732e:	2501      	movlt	r5, #1
 8007330:	f7ff fd40 	bl	8006db4 <_Balloc>
 8007334:	b920      	cbnz	r0, 8007340 <__mdiff+0x5c>
 8007336:	4b2e      	ldr	r3, [pc, #184]	; (80073f0 <__mdiff+0x10c>)
 8007338:	4602      	mov	r2, r0
 800733a:	f240 2145 	movw	r1, #581	; 0x245
 800733e:	e7e5      	b.n	800730c <__mdiff+0x28>
 8007340:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007344:	6926      	ldr	r6, [r4, #16]
 8007346:	60c5      	str	r5, [r0, #12]
 8007348:	f104 0914 	add.w	r9, r4, #20
 800734c:	f108 0514 	add.w	r5, r8, #20
 8007350:	f100 0e14 	add.w	lr, r0, #20
 8007354:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007358:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800735c:	f108 0210 	add.w	r2, r8, #16
 8007360:	46f2      	mov	sl, lr
 8007362:	2100      	movs	r1, #0
 8007364:	f859 3b04 	ldr.w	r3, [r9], #4
 8007368:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800736c:	fa11 f88b 	uxtah	r8, r1, fp
 8007370:	b299      	uxth	r1, r3
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	eba8 0801 	sub.w	r8, r8, r1
 8007378:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800737c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007380:	fa1f f888 	uxth.w	r8, r8
 8007384:	1419      	asrs	r1, r3, #16
 8007386:	454e      	cmp	r6, r9
 8007388:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800738c:	f84a 3b04 	str.w	r3, [sl], #4
 8007390:	d8e8      	bhi.n	8007364 <__mdiff+0x80>
 8007392:	1b33      	subs	r3, r6, r4
 8007394:	3b15      	subs	r3, #21
 8007396:	f023 0303 	bic.w	r3, r3, #3
 800739a:	3304      	adds	r3, #4
 800739c:	3415      	adds	r4, #21
 800739e:	42a6      	cmp	r6, r4
 80073a0:	bf38      	it	cc
 80073a2:	2304      	movcc	r3, #4
 80073a4:	441d      	add	r5, r3
 80073a6:	4473      	add	r3, lr
 80073a8:	469e      	mov	lr, r3
 80073aa:	462e      	mov	r6, r5
 80073ac:	4566      	cmp	r6, ip
 80073ae:	d30e      	bcc.n	80073ce <__mdiff+0xea>
 80073b0:	f10c 0203 	add.w	r2, ip, #3
 80073b4:	1b52      	subs	r2, r2, r5
 80073b6:	f022 0203 	bic.w	r2, r2, #3
 80073ba:	3d03      	subs	r5, #3
 80073bc:	45ac      	cmp	ip, r5
 80073be:	bf38      	it	cc
 80073c0:	2200      	movcc	r2, #0
 80073c2:	4413      	add	r3, r2
 80073c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80073c8:	b17a      	cbz	r2, 80073ea <__mdiff+0x106>
 80073ca:	6107      	str	r7, [r0, #16]
 80073cc:	e7a4      	b.n	8007318 <__mdiff+0x34>
 80073ce:	f856 8b04 	ldr.w	r8, [r6], #4
 80073d2:	fa11 f288 	uxtah	r2, r1, r8
 80073d6:	1414      	asrs	r4, r2, #16
 80073d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073dc:	b292      	uxth	r2, r2
 80073de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073e2:	f84e 2b04 	str.w	r2, [lr], #4
 80073e6:	1421      	asrs	r1, r4, #16
 80073e8:	e7e0      	b.n	80073ac <__mdiff+0xc8>
 80073ea:	3f01      	subs	r7, #1
 80073ec:	e7ea      	b.n	80073c4 <__mdiff+0xe0>
 80073ee:	bf00      	nop
 80073f0:	0801b930 	.word	0x0801b930
 80073f4:	0801b941 	.word	0x0801b941

080073f8 <__d2b>:
 80073f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073fc:	460f      	mov	r7, r1
 80073fe:	2101      	movs	r1, #1
 8007400:	ec59 8b10 	vmov	r8, r9, d0
 8007404:	4616      	mov	r6, r2
 8007406:	f7ff fcd5 	bl	8006db4 <_Balloc>
 800740a:	4604      	mov	r4, r0
 800740c:	b930      	cbnz	r0, 800741c <__d2b+0x24>
 800740e:	4602      	mov	r2, r0
 8007410:	4b24      	ldr	r3, [pc, #144]	; (80074a4 <__d2b+0xac>)
 8007412:	4825      	ldr	r0, [pc, #148]	; (80074a8 <__d2b+0xb0>)
 8007414:	f240 310f 	movw	r1, #783	; 0x30f
 8007418:	f000 fa86 	bl	8007928 <__assert_func>
 800741c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007424:	bb2d      	cbnz	r5, 8007472 <__d2b+0x7a>
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	f1b8 0300 	subs.w	r3, r8, #0
 800742c:	d026      	beq.n	800747c <__d2b+0x84>
 800742e:	4668      	mov	r0, sp
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	f7ff fd87 	bl	8006f44 <__lo0bits>
 8007436:	e9dd 1200 	ldrd	r1, r2, [sp]
 800743a:	b1e8      	cbz	r0, 8007478 <__d2b+0x80>
 800743c:	f1c0 0320 	rsb	r3, r0, #32
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	430b      	orrs	r3, r1
 8007446:	40c2      	lsrs	r2, r0
 8007448:	6163      	str	r3, [r4, #20]
 800744a:	9201      	str	r2, [sp, #4]
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	61a3      	str	r3, [r4, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	bf14      	ite	ne
 8007454:	2202      	movne	r2, #2
 8007456:	2201      	moveq	r2, #1
 8007458:	6122      	str	r2, [r4, #16]
 800745a:	b1bd      	cbz	r5, 800748c <__d2b+0x94>
 800745c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007460:	4405      	add	r5, r0
 8007462:	603d      	str	r5, [r7, #0]
 8007464:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007468:	6030      	str	r0, [r6, #0]
 800746a:	4620      	mov	r0, r4
 800746c:	b003      	add	sp, #12
 800746e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007476:	e7d6      	b.n	8007426 <__d2b+0x2e>
 8007478:	6161      	str	r1, [r4, #20]
 800747a:	e7e7      	b.n	800744c <__d2b+0x54>
 800747c:	a801      	add	r0, sp, #4
 800747e:	f7ff fd61 	bl	8006f44 <__lo0bits>
 8007482:	9b01      	ldr	r3, [sp, #4]
 8007484:	6163      	str	r3, [r4, #20]
 8007486:	3020      	adds	r0, #32
 8007488:	2201      	movs	r2, #1
 800748a:	e7e5      	b.n	8007458 <__d2b+0x60>
 800748c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007494:	6038      	str	r0, [r7, #0]
 8007496:	6918      	ldr	r0, [r3, #16]
 8007498:	f7ff fd34 	bl	8006f04 <__hi0bits>
 800749c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074a0:	e7e2      	b.n	8007468 <__d2b+0x70>
 80074a2:	bf00      	nop
 80074a4:	0801b930 	.word	0x0801b930
 80074a8:	0801b941 	.word	0x0801b941

080074ac <__ssputs_r>:
 80074ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	688e      	ldr	r6, [r1, #8]
 80074b2:	461f      	mov	r7, r3
 80074b4:	42be      	cmp	r6, r7
 80074b6:	680b      	ldr	r3, [r1, #0]
 80074b8:	4682      	mov	sl, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	4690      	mov	r8, r2
 80074be:	d82c      	bhi.n	800751a <__ssputs_r+0x6e>
 80074c0:	898a      	ldrh	r2, [r1, #12]
 80074c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074c6:	d026      	beq.n	8007516 <__ssputs_r+0x6a>
 80074c8:	6965      	ldr	r5, [r4, #20]
 80074ca:	6909      	ldr	r1, [r1, #16]
 80074cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074d0:	eba3 0901 	sub.w	r9, r3, r1
 80074d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074d8:	1c7b      	adds	r3, r7, #1
 80074da:	444b      	add	r3, r9
 80074dc:	106d      	asrs	r5, r5, #1
 80074de:	429d      	cmp	r5, r3
 80074e0:	bf38      	it	cc
 80074e2:	461d      	movcc	r5, r3
 80074e4:	0553      	lsls	r3, r2, #21
 80074e6:	d527      	bpl.n	8007538 <__ssputs_r+0x8c>
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7ff fbd7 	bl	8006c9c <_malloc_r>
 80074ee:	4606      	mov	r6, r0
 80074f0:	b360      	cbz	r0, 800754c <__ssputs_r+0xa0>
 80074f2:	6921      	ldr	r1, [r4, #16]
 80074f4:	464a      	mov	r2, r9
 80074f6:	f000 fa09 	bl	800790c <memcpy>
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007504:	81a3      	strh	r3, [r4, #12]
 8007506:	6126      	str	r6, [r4, #16]
 8007508:	6165      	str	r5, [r4, #20]
 800750a:	444e      	add	r6, r9
 800750c:	eba5 0509 	sub.w	r5, r5, r9
 8007510:	6026      	str	r6, [r4, #0]
 8007512:	60a5      	str	r5, [r4, #8]
 8007514:	463e      	mov	r6, r7
 8007516:	42be      	cmp	r6, r7
 8007518:	d900      	bls.n	800751c <__ssputs_r+0x70>
 800751a:	463e      	mov	r6, r7
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	4632      	mov	r2, r6
 8007520:	4641      	mov	r1, r8
 8007522:	f000 f9c9 	bl	80078b8 <memmove>
 8007526:	68a3      	ldr	r3, [r4, #8]
 8007528:	1b9b      	subs	r3, r3, r6
 800752a:	60a3      	str	r3, [r4, #8]
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	4433      	add	r3, r6
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	2000      	movs	r0, #0
 8007534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007538:	462a      	mov	r2, r5
 800753a:	f000 fa3b 	bl	80079b4 <_realloc_r>
 800753e:	4606      	mov	r6, r0
 8007540:	2800      	cmp	r0, #0
 8007542:	d1e0      	bne.n	8007506 <__ssputs_r+0x5a>
 8007544:	6921      	ldr	r1, [r4, #16]
 8007546:	4650      	mov	r0, sl
 8007548:	f7ff fb34 	bl	8006bb4 <_free_r>
 800754c:	230c      	movs	r3, #12
 800754e:	f8ca 3000 	str.w	r3, [sl]
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800755e:	e7e9      	b.n	8007534 <__ssputs_r+0x88>

08007560 <_svfiprintf_r>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	4698      	mov	r8, r3
 8007566:	898b      	ldrh	r3, [r1, #12]
 8007568:	061b      	lsls	r3, r3, #24
 800756a:	b09d      	sub	sp, #116	; 0x74
 800756c:	4607      	mov	r7, r0
 800756e:	460d      	mov	r5, r1
 8007570:	4614      	mov	r4, r2
 8007572:	d50e      	bpl.n	8007592 <_svfiprintf_r+0x32>
 8007574:	690b      	ldr	r3, [r1, #16]
 8007576:	b963      	cbnz	r3, 8007592 <_svfiprintf_r+0x32>
 8007578:	2140      	movs	r1, #64	; 0x40
 800757a:	f7ff fb8f 	bl	8006c9c <_malloc_r>
 800757e:	6028      	str	r0, [r5, #0]
 8007580:	6128      	str	r0, [r5, #16]
 8007582:	b920      	cbnz	r0, 800758e <_svfiprintf_r+0x2e>
 8007584:	230c      	movs	r3, #12
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800758c:	e0d0      	b.n	8007730 <_svfiprintf_r+0x1d0>
 800758e:	2340      	movs	r3, #64	; 0x40
 8007590:	616b      	str	r3, [r5, #20]
 8007592:	2300      	movs	r3, #0
 8007594:	9309      	str	r3, [sp, #36]	; 0x24
 8007596:	2320      	movs	r3, #32
 8007598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800759c:	f8cd 800c 	str.w	r8, [sp, #12]
 80075a0:	2330      	movs	r3, #48	; 0x30
 80075a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007748 <_svfiprintf_r+0x1e8>
 80075a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075aa:	f04f 0901 	mov.w	r9, #1
 80075ae:	4623      	mov	r3, r4
 80075b0:	469a      	mov	sl, r3
 80075b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b6:	b10a      	cbz	r2, 80075bc <_svfiprintf_r+0x5c>
 80075b8:	2a25      	cmp	r2, #37	; 0x25
 80075ba:	d1f9      	bne.n	80075b0 <_svfiprintf_r+0x50>
 80075bc:	ebba 0b04 	subs.w	fp, sl, r4
 80075c0:	d00b      	beq.n	80075da <_svfiprintf_r+0x7a>
 80075c2:	465b      	mov	r3, fp
 80075c4:	4622      	mov	r2, r4
 80075c6:	4629      	mov	r1, r5
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7ff ff6f 	bl	80074ac <__ssputs_r>
 80075ce:	3001      	adds	r0, #1
 80075d0:	f000 80a9 	beq.w	8007726 <_svfiprintf_r+0x1c6>
 80075d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d6:	445a      	add	r2, fp
 80075d8:	9209      	str	r2, [sp, #36]	; 0x24
 80075da:	f89a 3000 	ldrb.w	r3, [sl]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 80a1 	beq.w	8007726 <_svfiprintf_r+0x1c6>
 80075e4:	2300      	movs	r3, #0
 80075e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ee:	f10a 0a01 	add.w	sl, sl, #1
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	9307      	str	r3, [sp, #28]
 80075f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075fa:	931a      	str	r3, [sp, #104]	; 0x68
 80075fc:	4654      	mov	r4, sl
 80075fe:	2205      	movs	r2, #5
 8007600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007604:	4850      	ldr	r0, [pc, #320]	; (8007748 <_svfiprintf_r+0x1e8>)
 8007606:	f7f8 fde3 	bl	80001d0 <memchr>
 800760a:	9a04      	ldr	r2, [sp, #16]
 800760c:	b9d8      	cbnz	r0, 8007646 <_svfiprintf_r+0xe6>
 800760e:	06d0      	lsls	r0, r2, #27
 8007610:	bf44      	itt	mi
 8007612:	2320      	movmi	r3, #32
 8007614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007618:	0711      	lsls	r1, r2, #28
 800761a:	bf44      	itt	mi
 800761c:	232b      	movmi	r3, #43	; 0x2b
 800761e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007622:	f89a 3000 	ldrb.w	r3, [sl]
 8007626:	2b2a      	cmp	r3, #42	; 0x2a
 8007628:	d015      	beq.n	8007656 <_svfiprintf_r+0xf6>
 800762a:	9a07      	ldr	r2, [sp, #28]
 800762c:	4654      	mov	r4, sl
 800762e:	2000      	movs	r0, #0
 8007630:	f04f 0c0a 	mov.w	ip, #10
 8007634:	4621      	mov	r1, r4
 8007636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800763a:	3b30      	subs	r3, #48	; 0x30
 800763c:	2b09      	cmp	r3, #9
 800763e:	d94d      	bls.n	80076dc <_svfiprintf_r+0x17c>
 8007640:	b1b0      	cbz	r0, 8007670 <_svfiprintf_r+0x110>
 8007642:	9207      	str	r2, [sp, #28]
 8007644:	e014      	b.n	8007670 <_svfiprintf_r+0x110>
 8007646:	eba0 0308 	sub.w	r3, r0, r8
 800764a:	fa09 f303 	lsl.w	r3, r9, r3
 800764e:	4313      	orrs	r3, r2
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	46a2      	mov	sl, r4
 8007654:	e7d2      	b.n	80075fc <_svfiprintf_r+0x9c>
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	1d19      	adds	r1, r3, #4
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	9103      	str	r1, [sp, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfbb      	ittet	lt
 8007662:	425b      	neglt	r3, r3
 8007664:	f042 0202 	orrlt.w	r2, r2, #2
 8007668:	9307      	strge	r3, [sp, #28]
 800766a:	9307      	strlt	r3, [sp, #28]
 800766c:	bfb8      	it	lt
 800766e:	9204      	strlt	r2, [sp, #16]
 8007670:	7823      	ldrb	r3, [r4, #0]
 8007672:	2b2e      	cmp	r3, #46	; 0x2e
 8007674:	d10c      	bne.n	8007690 <_svfiprintf_r+0x130>
 8007676:	7863      	ldrb	r3, [r4, #1]
 8007678:	2b2a      	cmp	r3, #42	; 0x2a
 800767a:	d134      	bne.n	80076e6 <_svfiprintf_r+0x186>
 800767c:	9b03      	ldr	r3, [sp, #12]
 800767e:	1d1a      	adds	r2, r3, #4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	9203      	str	r2, [sp, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfb8      	it	lt
 8007688:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800768c:	3402      	adds	r4, #2
 800768e:	9305      	str	r3, [sp, #20]
 8007690:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007758 <_svfiprintf_r+0x1f8>
 8007694:	7821      	ldrb	r1, [r4, #0]
 8007696:	2203      	movs	r2, #3
 8007698:	4650      	mov	r0, sl
 800769a:	f7f8 fd99 	bl	80001d0 <memchr>
 800769e:	b138      	cbz	r0, 80076b0 <_svfiprintf_r+0x150>
 80076a0:	9b04      	ldr	r3, [sp, #16]
 80076a2:	eba0 000a 	sub.w	r0, r0, sl
 80076a6:	2240      	movs	r2, #64	; 0x40
 80076a8:	4082      	lsls	r2, r0
 80076aa:	4313      	orrs	r3, r2
 80076ac:	3401      	adds	r4, #1
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b4:	4825      	ldr	r0, [pc, #148]	; (800774c <_svfiprintf_r+0x1ec>)
 80076b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ba:	2206      	movs	r2, #6
 80076bc:	f7f8 fd88 	bl	80001d0 <memchr>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d038      	beq.n	8007736 <_svfiprintf_r+0x1d6>
 80076c4:	4b22      	ldr	r3, [pc, #136]	; (8007750 <_svfiprintf_r+0x1f0>)
 80076c6:	bb1b      	cbnz	r3, 8007710 <_svfiprintf_r+0x1b0>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	3307      	adds	r3, #7
 80076cc:	f023 0307 	bic.w	r3, r3, #7
 80076d0:	3308      	adds	r3, #8
 80076d2:	9303      	str	r3, [sp, #12]
 80076d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d6:	4433      	add	r3, r6
 80076d8:	9309      	str	r3, [sp, #36]	; 0x24
 80076da:	e768      	b.n	80075ae <_svfiprintf_r+0x4e>
 80076dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80076e0:	460c      	mov	r4, r1
 80076e2:	2001      	movs	r0, #1
 80076e4:	e7a6      	b.n	8007634 <_svfiprintf_r+0xd4>
 80076e6:	2300      	movs	r3, #0
 80076e8:	3401      	adds	r4, #1
 80076ea:	9305      	str	r3, [sp, #20]
 80076ec:	4619      	mov	r1, r3
 80076ee:	f04f 0c0a 	mov.w	ip, #10
 80076f2:	4620      	mov	r0, r4
 80076f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f8:	3a30      	subs	r2, #48	; 0x30
 80076fa:	2a09      	cmp	r2, #9
 80076fc:	d903      	bls.n	8007706 <_svfiprintf_r+0x1a6>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0c6      	beq.n	8007690 <_svfiprintf_r+0x130>
 8007702:	9105      	str	r1, [sp, #20]
 8007704:	e7c4      	b.n	8007690 <_svfiprintf_r+0x130>
 8007706:	fb0c 2101 	mla	r1, ip, r1, r2
 800770a:	4604      	mov	r4, r0
 800770c:	2301      	movs	r3, #1
 800770e:	e7f0      	b.n	80076f2 <_svfiprintf_r+0x192>
 8007710:	ab03      	add	r3, sp, #12
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	462a      	mov	r2, r5
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <_svfiprintf_r+0x1f4>)
 8007718:	a904      	add	r1, sp, #16
 800771a:	4638      	mov	r0, r7
 800771c:	f7fd fe64 	bl	80053e8 <_printf_float>
 8007720:	1c42      	adds	r2, r0, #1
 8007722:	4606      	mov	r6, r0
 8007724:	d1d6      	bne.n	80076d4 <_svfiprintf_r+0x174>
 8007726:	89ab      	ldrh	r3, [r5, #12]
 8007728:	065b      	lsls	r3, r3, #25
 800772a:	f53f af2d 	bmi.w	8007588 <_svfiprintf_r+0x28>
 800772e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007730:	b01d      	add	sp, #116	; 0x74
 8007732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007736:	ab03      	add	r3, sp, #12
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	462a      	mov	r2, r5
 800773c:	4b05      	ldr	r3, [pc, #20]	; (8007754 <_svfiprintf_r+0x1f4>)
 800773e:	a904      	add	r1, sp, #16
 8007740:	4638      	mov	r0, r7
 8007742:	f7fe f8f5 	bl	8005930 <_printf_i>
 8007746:	e7eb      	b.n	8007720 <_svfiprintf_r+0x1c0>
 8007748:	0801ba9c 	.word	0x0801ba9c
 800774c:	0801baa6 	.word	0x0801baa6
 8007750:	080053e9 	.word	0x080053e9
 8007754:	080074ad 	.word	0x080074ad
 8007758:	0801baa2 	.word	0x0801baa2

0800775c <__sflush_r>:
 800775c:	898a      	ldrh	r2, [r1, #12]
 800775e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007762:	4605      	mov	r5, r0
 8007764:	0710      	lsls	r0, r2, #28
 8007766:	460c      	mov	r4, r1
 8007768:	d458      	bmi.n	800781c <__sflush_r+0xc0>
 800776a:	684b      	ldr	r3, [r1, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	dc05      	bgt.n	800777c <__sflush_r+0x20>
 8007770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	dc02      	bgt.n	800777c <__sflush_r+0x20>
 8007776:	2000      	movs	r0, #0
 8007778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800777c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800777e:	2e00      	cmp	r6, #0
 8007780:	d0f9      	beq.n	8007776 <__sflush_r+0x1a>
 8007782:	2300      	movs	r3, #0
 8007784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007788:	682f      	ldr	r7, [r5, #0]
 800778a:	6a21      	ldr	r1, [r4, #32]
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	d032      	beq.n	80077f6 <__sflush_r+0x9a>
 8007790:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	075a      	lsls	r2, r3, #29
 8007796:	d505      	bpl.n	80077a4 <__sflush_r+0x48>
 8007798:	6863      	ldr	r3, [r4, #4]
 800779a:	1ac0      	subs	r0, r0, r3
 800779c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779e:	b10b      	cbz	r3, 80077a4 <__sflush_r+0x48>
 80077a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077a2:	1ac0      	subs	r0, r0, r3
 80077a4:	2300      	movs	r3, #0
 80077a6:	4602      	mov	r2, r0
 80077a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077aa:	6a21      	ldr	r1, [r4, #32]
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b0      	blx	r6
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	d106      	bne.n	80077c4 <__sflush_r+0x68>
 80077b6:	6829      	ldr	r1, [r5, #0]
 80077b8:	291d      	cmp	r1, #29
 80077ba:	d82b      	bhi.n	8007814 <__sflush_r+0xb8>
 80077bc:	4a29      	ldr	r2, [pc, #164]	; (8007864 <__sflush_r+0x108>)
 80077be:	410a      	asrs	r2, r1
 80077c0:	07d6      	lsls	r6, r2, #31
 80077c2:	d427      	bmi.n	8007814 <__sflush_r+0xb8>
 80077c4:	2200      	movs	r2, #0
 80077c6:	6062      	str	r2, [r4, #4]
 80077c8:	04d9      	lsls	r1, r3, #19
 80077ca:	6922      	ldr	r2, [r4, #16]
 80077cc:	6022      	str	r2, [r4, #0]
 80077ce:	d504      	bpl.n	80077da <__sflush_r+0x7e>
 80077d0:	1c42      	adds	r2, r0, #1
 80077d2:	d101      	bne.n	80077d8 <__sflush_r+0x7c>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b903      	cbnz	r3, 80077da <__sflush_r+0x7e>
 80077d8:	6560      	str	r0, [r4, #84]	; 0x54
 80077da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077dc:	602f      	str	r7, [r5, #0]
 80077de:	2900      	cmp	r1, #0
 80077e0:	d0c9      	beq.n	8007776 <__sflush_r+0x1a>
 80077e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077e6:	4299      	cmp	r1, r3
 80077e8:	d002      	beq.n	80077f0 <__sflush_r+0x94>
 80077ea:	4628      	mov	r0, r5
 80077ec:	f7ff f9e2 	bl	8006bb4 <_free_r>
 80077f0:	2000      	movs	r0, #0
 80077f2:	6360      	str	r0, [r4, #52]	; 0x34
 80077f4:	e7c0      	b.n	8007778 <__sflush_r+0x1c>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b0      	blx	r6
 80077fc:	1c41      	adds	r1, r0, #1
 80077fe:	d1c8      	bne.n	8007792 <__sflush_r+0x36>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0c5      	beq.n	8007792 <__sflush_r+0x36>
 8007806:	2b1d      	cmp	r3, #29
 8007808:	d001      	beq.n	800780e <__sflush_r+0xb2>
 800780a:	2b16      	cmp	r3, #22
 800780c:	d101      	bne.n	8007812 <__sflush_r+0xb6>
 800780e:	602f      	str	r7, [r5, #0]
 8007810:	e7b1      	b.n	8007776 <__sflush_r+0x1a>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007818:	81a3      	strh	r3, [r4, #12]
 800781a:	e7ad      	b.n	8007778 <__sflush_r+0x1c>
 800781c:	690f      	ldr	r7, [r1, #16]
 800781e:	2f00      	cmp	r7, #0
 8007820:	d0a9      	beq.n	8007776 <__sflush_r+0x1a>
 8007822:	0793      	lsls	r3, r2, #30
 8007824:	680e      	ldr	r6, [r1, #0]
 8007826:	bf08      	it	eq
 8007828:	694b      	ldreq	r3, [r1, #20]
 800782a:	600f      	str	r7, [r1, #0]
 800782c:	bf18      	it	ne
 800782e:	2300      	movne	r3, #0
 8007830:	eba6 0807 	sub.w	r8, r6, r7
 8007834:	608b      	str	r3, [r1, #8]
 8007836:	f1b8 0f00 	cmp.w	r8, #0
 800783a:	dd9c      	ble.n	8007776 <__sflush_r+0x1a>
 800783c:	6a21      	ldr	r1, [r4, #32]
 800783e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007840:	4643      	mov	r3, r8
 8007842:	463a      	mov	r2, r7
 8007844:	4628      	mov	r0, r5
 8007846:	47b0      	blx	r6
 8007848:	2800      	cmp	r0, #0
 800784a:	dc06      	bgt.n	800785a <__sflush_r+0xfe>
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007858:	e78e      	b.n	8007778 <__sflush_r+0x1c>
 800785a:	4407      	add	r7, r0
 800785c:	eba8 0800 	sub.w	r8, r8, r0
 8007860:	e7e9      	b.n	8007836 <__sflush_r+0xda>
 8007862:	bf00      	nop
 8007864:	dfbffffe 	.word	0xdfbffffe

08007868 <_fflush_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	690b      	ldr	r3, [r1, #16]
 800786c:	4605      	mov	r5, r0
 800786e:	460c      	mov	r4, r1
 8007870:	b913      	cbnz	r3, 8007878 <_fflush_r+0x10>
 8007872:	2500      	movs	r5, #0
 8007874:	4628      	mov	r0, r5
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	b118      	cbz	r0, 8007882 <_fflush_r+0x1a>
 800787a:	6a03      	ldr	r3, [r0, #32]
 800787c:	b90b      	cbnz	r3, 8007882 <_fflush_r+0x1a>
 800787e:	f7fe fa05 	bl	8005c8c <__sinit>
 8007882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0f3      	beq.n	8007872 <_fflush_r+0xa>
 800788a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800788c:	07d0      	lsls	r0, r2, #31
 800788e:	d404      	bmi.n	800789a <_fflush_r+0x32>
 8007890:	0599      	lsls	r1, r3, #22
 8007892:	d402      	bmi.n	800789a <_fflush_r+0x32>
 8007894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007896:	f7fe fb10 	bl	8005eba <__retarget_lock_acquire_recursive>
 800789a:	4628      	mov	r0, r5
 800789c:	4621      	mov	r1, r4
 800789e:	f7ff ff5d 	bl	800775c <__sflush_r>
 80078a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078a4:	07da      	lsls	r2, r3, #31
 80078a6:	4605      	mov	r5, r0
 80078a8:	d4e4      	bmi.n	8007874 <_fflush_r+0xc>
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	059b      	lsls	r3, r3, #22
 80078ae:	d4e1      	bmi.n	8007874 <_fflush_r+0xc>
 80078b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078b2:	f7fe fb03 	bl	8005ebc <__retarget_lock_release_recursive>
 80078b6:	e7dd      	b.n	8007874 <_fflush_r+0xc>

080078b8 <memmove>:
 80078b8:	4288      	cmp	r0, r1
 80078ba:	b510      	push	{r4, lr}
 80078bc:	eb01 0402 	add.w	r4, r1, r2
 80078c0:	d902      	bls.n	80078c8 <memmove+0x10>
 80078c2:	4284      	cmp	r4, r0
 80078c4:	4623      	mov	r3, r4
 80078c6:	d807      	bhi.n	80078d8 <memmove+0x20>
 80078c8:	1e43      	subs	r3, r0, #1
 80078ca:	42a1      	cmp	r1, r4
 80078cc:	d008      	beq.n	80078e0 <memmove+0x28>
 80078ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078d6:	e7f8      	b.n	80078ca <memmove+0x12>
 80078d8:	4402      	add	r2, r0
 80078da:	4601      	mov	r1, r0
 80078dc:	428a      	cmp	r2, r1
 80078de:	d100      	bne.n	80078e2 <memmove+0x2a>
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078ea:	e7f7      	b.n	80078dc <memmove+0x24>

080078ec <_sbrk_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4d06      	ldr	r5, [pc, #24]	; (8007908 <_sbrk_r+0x1c>)
 80078f0:	2300      	movs	r3, #0
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	602b      	str	r3, [r5, #0]
 80078f8:	f7f9 fe36 	bl	8001568 <_sbrk>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_sbrk_r+0x1a>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_sbrk_r+0x1a>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	20000dd8 	.word	0x20000dd8

0800790c <memcpy>:
 800790c:	440a      	add	r2, r1
 800790e:	4291      	cmp	r1, r2
 8007910:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007914:	d100      	bne.n	8007918 <memcpy+0xc>
 8007916:	4770      	bx	lr
 8007918:	b510      	push	{r4, lr}
 800791a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800791e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007922:	4291      	cmp	r1, r2
 8007924:	d1f9      	bne.n	800791a <memcpy+0xe>
 8007926:	bd10      	pop	{r4, pc}

08007928 <__assert_func>:
 8007928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800792a:	4614      	mov	r4, r2
 800792c:	461a      	mov	r2, r3
 800792e:	4b09      	ldr	r3, [pc, #36]	; (8007954 <__assert_func+0x2c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4605      	mov	r5, r0
 8007934:	68d8      	ldr	r0, [r3, #12]
 8007936:	b14c      	cbz	r4, 800794c <__assert_func+0x24>
 8007938:	4b07      	ldr	r3, [pc, #28]	; (8007958 <__assert_func+0x30>)
 800793a:	9100      	str	r1, [sp, #0]
 800793c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007940:	4906      	ldr	r1, [pc, #24]	; (800795c <__assert_func+0x34>)
 8007942:	462b      	mov	r3, r5
 8007944:	f000 f872 	bl	8007a2c <fiprintf>
 8007948:	f000 f882 	bl	8007a50 <abort>
 800794c:	4b04      	ldr	r3, [pc, #16]	; (8007960 <__assert_func+0x38>)
 800794e:	461c      	mov	r4, r3
 8007950:	e7f3      	b.n	800793a <__assert_func+0x12>
 8007952:	bf00      	nop
 8007954:	20000068 	.word	0x20000068
 8007958:	0801bab7 	.word	0x0801bab7
 800795c:	0801bac4 	.word	0x0801bac4
 8007960:	0801baf2 	.word	0x0801baf2

08007964 <_calloc_r>:
 8007964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007966:	fba1 2402 	umull	r2, r4, r1, r2
 800796a:	b94c      	cbnz	r4, 8007980 <_calloc_r+0x1c>
 800796c:	4611      	mov	r1, r2
 800796e:	9201      	str	r2, [sp, #4]
 8007970:	f7ff f994 	bl	8006c9c <_malloc_r>
 8007974:	9a01      	ldr	r2, [sp, #4]
 8007976:	4605      	mov	r5, r0
 8007978:	b930      	cbnz	r0, 8007988 <_calloc_r+0x24>
 800797a:	4628      	mov	r0, r5
 800797c:	b003      	add	sp, #12
 800797e:	bd30      	pop	{r4, r5, pc}
 8007980:	220c      	movs	r2, #12
 8007982:	6002      	str	r2, [r0, #0]
 8007984:	2500      	movs	r5, #0
 8007986:	e7f8      	b.n	800797a <_calloc_r+0x16>
 8007988:	4621      	mov	r1, r4
 800798a:	f7fe fa18 	bl	8005dbe <memset>
 800798e:	e7f4      	b.n	800797a <_calloc_r+0x16>

08007990 <__ascii_mbtowc>:
 8007990:	b082      	sub	sp, #8
 8007992:	b901      	cbnz	r1, 8007996 <__ascii_mbtowc+0x6>
 8007994:	a901      	add	r1, sp, #4
 8007996:	b142      	cbz	r2, 80079aa <__ascii_mbtowc+0x1a>
 8007998:	b14b      	cbz	r3, 80079ae <__ascii_mbtowc+0x1e>
 800799a:	7813      	ldrb	r3, [r2, #0]
 800799c:	600b      	str	r3, [r1, #0]
 800799e:	7812      	ldrb	r2, [r2, #0]
 80079a0:	1e10      	subs	r0, r2, #0
 80079a2:	bf18      	it	ne
 80079a4:	2001      	movne	r0, #1
 80079a6:	b002      	add	sp, #8
 80079a8:	4770      	bx	lr
 80079aa:	4610      	mov	r0, r2
 80079ac:	e7fb      	b.n	80079a6 <__ascii_mbtowc+0x16>
 80079ae:	f06f 0001 	mvn.w	r0, #1
 80079b2:	e7f8      	b.n	80079a6 <__ascii_mbtowc+0x16>

080079b4 <_realloc_r>:
 80079b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	4680      	mov	r8, r0
 80079ba:	4614      	mov	r4, r2
 80079bc:	460e      	mov	r6, r1
 80079be:	b921      	cbnz	r1, 80079ca <_realloc_r+0x16>
 80079c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c4:	4611      	mov	r1, r2
 80079c6:	f7ff b969 	b.w	8006c9c <_malloc_r>
 80079ca:	b92a      	cbnz	r2, 80079d8 <_realloc_r+0x24>
 80079cc:	f7ff f8f2 	bl	8006bb4 <_free_r>
 80079d0:	4625      	mov	r5, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d8:	f000 f841 	bl	8007a5e <_malloc_usable_size_r>
 80079dc:	4284      	cmp	r4, r0
 80079de:	4607      	mov	r7, r0
 80079e0:	d802      	bhi.n	80079e8 <_realloc_r+0x34>
 80079e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079e6:	d812      	bhi.n	8007a0e <_realloc_r+0x5a>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4640      	mov	r0, r8
 80079ec:	f7ff f956 	bl	8006c9c <_malloc_r>
 80079f0:	4605      	mov	r5, r0
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d0ed      	beq.n	80079d2 <_realloc_r+0x1e>
 80079f6:	42bc      	cmp	r4, r7
 80079f8:	4622      	mov	r2, r4
 80079fa:	4631      	mov	r1, r6
 80079fc:	bf28      	it	cs
 80079fe:	463a      	movcs	r2, r7
 8007a00:	f7ff ff84 	bl	800790c <memcpy>
 8007a04:	4631      	mov	r1, r6
 8007a06:	4640      	mov	r0, r8
 8007a08:	f7ff f8d4 	bl	8006bb4 <_free_r>
 8007a0c:	e7e1      	b.n	80079d2 <_realloc_r+0x1e>
 8007a0e:	4635      	mov	r5, r6
 8007a10:	e7df      	b.n	80079d2 <_realloc_r+0x1e>

08007a12 <__ascii_wctomb>:
 8007a12:	b149      	cbz	r1, 8007a28 <__ascii_wctomb+0x16>
 8007a14:	2aff      	cmp	r2, #255	; 0xff
 8007a16:	bf85      	ittet	hi
 8007a18:	238a      	movhi	r3, #138	; 0x8a
 8007a1a:	6003      	strhi	r3, [r0, #0]
 8007a1c:	700a      	strbls	r2, [r1, #0]
 8007a1e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007a22:	bf98      	it	ls
 8007a24:	2001      	movls	r0, #1
 8007a26:	4770      	bx	lr
 8007a28:	4608      	mov	r0, r1
 8007a2a:	4770      	bx	lr

08007a2c <fiprintf>:
 8007a2c:	b40e      	push	{r1, r2, r3}
 8007a2e:	b503      	push	{r0, r1, lr}
 8007a30:	4601      	mov	r1, r0
 8007a32:	ab03      	add	r3, sp, #12
 8007a34:	4805      	ldr	r0, [pc, #20]	; (8007a4c <fiprintf+0x20>)
 8007a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a3a:	6800      	ldr	r0, [r0, #0]
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	f000 f83f 	bl	8007ac0 <_vfiprintf_r>
 8007a42:	b002      	add	sp, #8
 8007a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a48:	b003      	add	sp, #12
 8007a4a:	4770      	bx	lr
 8007a4c:	20000068 	.word	0x20000068

08007a50 <abort>:
 8007a50:	b508      	push	{r3, lr}
 8007a52:	2006      	movs	r0, #6
 8007a54:	f000 fa0c 	bl	8007e70 <raise>
 8007a58:	2001      	movs	r0, #1
 8007a5a:	f7f9 fd0d 	bl	8001478 <_exit>

08007a5e <_malloc_usable_size_r>:
 8007a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a62:	1f18      	subs	r0, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bfbc      	itt	lt
 8007a68:	580b      	ldrlt	r3, [r1, r0]
 8007a6a:	18c0      	addlt	r0, r0, r3
 8007a6c:	4770      	bx	lr

08007a6e <__sfputc_r>:
 8007a6e:	6893      	ldr	r3, [r2, #8]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	b410      	push	{r4}
 8007a76:	6093      	str	r3, [r2, #8]
 8007a78:	da08      	bge.n	8007a8c <__sfputc_r+0x1e>
 8007a7a:	6994      	ldr	r4, [r2, #24]
 8007a7c:	42a3      	cmp	r3, r4
 8007a7e:	db01      	blt.n	8007a84 <__sfputc_r+0x16>
 8007a80:	290a      	cmp	r1, #10
 8007a82:	d103      	bne.n	8007a8c <__sfputc_r+0x1e>
 8007a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a88:	f000 b934 	b.w	8007cf4 <__swbuf_r>
 8007a8c:	6813      	ldr	r3, [r2, #0]
 8007a8e:	1c58      	adds	r0, r3, #1
 8007a90:	6010      	str	r0, [r2, #0]
 8007a92:	7019      	strb	r1, [r3, #0]
 8007a94:	4608      	mov	r0, r1
 8007a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <__sfputs_r>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460f      	mov	r7, r1
 8007aa2:	4614      	mov	r4, r2
 8007aa4:	18d5      	adds	r5, r2, r3
 8007aa6:	42ac      	cmp	r4, r5
 8007aa8:	d101      	bne.n	8007aae <__sfputs_r+0x12>
 8007aaa:	2000      	movs	r0, #0
 8007aac:	e007      	b.n	8007abe <__sfputs_r+0x22>
 8007aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab2:	463a      	mov	r2, r7
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f7ff ffda 	bl	8007a6e <__sfputc_r>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	d1f3      	bne.n	8007aa6 <__sfputs_r+0xa>
 8007abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ac0 <_vfiprintf_r>:
 8007ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	460d      	mov	r5, r1
 8007ac6:	b09d      	sub	sp, #116	; 0x74
 8007ac8:	4614      	mov	r4, r2
 8007aca:	4698      	mov	r8, r3
 8007acc:	4606      	mov	r6, r0
 8007ace:	b118      	cbz	r0, 8007ad8 <_vfiprintf_r+0x18>
 8007ad0:	6a03      	ldr	r3, [r0, #32]
 8007ad2:	b90b      	cbnz	r3, 8007ad8 <_vfiprintf_r+0x18>
 8007ad4:	f7fe f8da 	bl	8005c8c <__sinit>
 8007ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ada:	07d9      	lsls	r1, r3, #31
 8007adc:	d405      	bmi.n	8007aea <_vfiprintf_r+0x2a>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	059a      	lsls	r2, r3, #22
 8007ae2:	d402      	bmi.n	8007aea <_vfiprintf_r+0x2a>
 8007ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ae6:	f7fe f9e8 	bl	8005eba <__retarget_lock_acquire_recursive>
 8007aea:	89ab      	ldrh	r3, [r5, #12]
 8007aec:	071b      	lsls	r3, r3, #28
 8007aee:	d501      	bpl.n	8007af4 <_vfiprintf_r+0x34>
 8007af0:	692b      	ldr	r3, [r5, #16]
 8007af2:	b99b      	cbnz	r3, 8007b1c <_vfiprintf_r+0x5c>
 8007af4:	4629      	mov	r1, r5
 8007af6:	4630      	mov	r0, r6
 8007af8:	f000 f93a 	bl	8007d70 <__swsetup_r>
 8007afc:	b170      	cbz	r0, 8007b1c <_vfiprintf_r+0x5c>
 8007afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b00:	07dc      	lsls	r4, r3, #31
 8007b02:	d504      	bpl.n	8007b0e <_vfiprintf_r+0x4e>
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b08:	b01d      	add	sp, #116	; 0x74
 8007b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0e:	89ab      	ldrh	r3, [r5, #12]
 8007b10:	0598      	lsls	r0, r3, #22
 8007b12:	d4f7      	bmi.n	8007b04 <_vfiprintf_r+0x44>
 8007b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b16:	f7fe f9d1 	bl	8005ebc <__retarget_lock_release_recursive>
 8007b1a:	e7f3      	b.n	8007b04 <_vfiprintf_r+0x44>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b20:	2320      	movs	r3, #32
 8007b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b2a:	2330      	movs	r3, #48	; 0x30
 8007b2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007ce0 <_vfiprintf_r+0x220>
 8007b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b34:	f04f 0901 	mov.w	r9, #1
 8007b38:	4623      	mov	r3, r4
 8007b3a:	469a      	mov	sl, r3
 8007b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b40:	b10a      	cbz	r2, 8007b46 <_vfiprintf_r+0x86>
 8007b42:	2a25      	cmp	r2, #37	; 0x25
 8007b44:	d1f9      	bne.n	8007b3a <_vfiprintf_r+0x7a>
 8007b46:	ebba 0b04 	subs.w	fp, sl, r4
 8007b4a:	d00b      	beq.n	8007b64 <_vfiprintf_r+0xa4>
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	4622      	mov	r2, r4
 8007b50:	4629      	mov	r1, r5
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ffa2 	bl	8007a9c <__sfputs_r>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f000 80a9 	beq.w	8007cb0 <_vfiprintf_r+0x1f0>
 8007b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b60:	445a      	add	r2, fp
 8007b62:	9209      	str	r2, [sp, #36]	; 0x24
 8007b64:	f89a 3000 	ldrb.w	r3, [sl]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80a1 	beq.w	8007cb0 <_vfiprintf_r+0x1f0>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b78:	f10a 0a01 	add.w	sl, sl, #1
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	9307      	str	r3, [sp, #28]
 8007b80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b84:	931a      	str	r3, [sp, #104]	; 0x68
 8007b86:	4654      	mov	r4, sl
 8007b88:	2205      	movs	r2, #5
 8007b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8e:	4854      	ldr	r0, [pc, #336]	; (8007ce0 <_vfiprintf_r+0x220>)
 8007b90:	f7f8 fb1e 	bl	80001d0 <memchr>
 8007b94:	9a04      	ldr	r2, [sp, #16]
 8007b96:	b9d8      	cbnz	r0, 8007bd0 <_vfiprintf_r+0x110>
 8007b98:	06d1      	lsls	r1, r2, #27
 8007b9a:	bf44      	itt	mi
 8007b9c:	2320      	movmi	r3, #32
 8007b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba2:	0713      	lsls	r3, r2, #28
 8007ba4:	bf44      	itt	mi
 8007ba6:	232b      	movmi	r3, #43	; 0x2b
 8007ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bac:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb2:	d015      	beq.n	8007be0 <_vfiprintf_r+0x120>
 8007bb4:	9a07      	ldr	r2, [sp, #28]
 8007bb6:	4654      	mov	r4, sl
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f04f 0c0a 	mov.w	ip, #10
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bc4:	3b30      	subs	r3, #48	; 0x30
 8007bc6:	2b09      	cmp	r3, #9
 8007bc8:	d94d      	bls.n	8007c66 <_vfiprintf_r+0x1a6>
 8007bca:	b1b0      	cbz	r0, 8007bfa <_vfiprintf_r+0x13a>
 8007bcc:	9207      	str	r2, [sp, #28]
 8007bce:	e014      	b.n	8007bfa <_vfiprintf_r+0x13a>
 8007bd0:	eba0 0308 	sub.w	r3, r0, r8
 8007bd4:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	9304      	str	r3, [sp, #16]
 8007bdc:	46a2      	mov	sl, r4
 8007bde:	e7d2      	b.n	8007b86 <_vfiprintf_r+0xc6>
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	1d19      	adds	r1, r3, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	9103      	str	r1, [sp, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	bfbb      	ittet	lt
 8007bec:	425b      	neglt	r3, r3
 8007bee:	f042 0202 	orrlt.w	r2, r2, #2
 8007bf2:	9307      	strge	r3, [sp, #28]
 8007bf4:	9307      	strlt	r3, [sp, #28]
 8007bf6:	bfb8      	it	lt
 8007bf8:	9204      	strlt	r2, [sp, #16]
 8007bfa:	7823      	ldrb	r3, [r4, #0]
 8007bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8007bfe:	d10c      	bne.n	8007c1a <_vfiprintf_r+0x15a>
 8007c00:	7863      	ldrb	r3, [r4, #1]
 8007c02:	2b2a      	cmp	r3, #42	; 0x2a
 8007c04:	d134      	bne.n	8007c70 <_vfiprintf_r+0x1b0>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	1d1a      	adds	r2, r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	9203      	str	r2, [sp, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfb8      	it	lt
 8007c12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c16:	3402      	adds	r4, #2
 8007c18:	9305      	str	r3, [sp, #20]
 8007c1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007cf0 <_vfiprintf_r+0x230>
 8007c1e:	7821      	ldrb	r1, [r4, #0]
 8007c20:	2203      	movs	r2, #3
 8007c22:	4650      	mov	r0, sl
 8007c24:	f7f8 fad4 	bl	80001d0 <memchr>
 8007c28:	b138      	cbz	r0, 8007c3a <_vfiprintf_r+0x17a>
 8007c2a:	9b04      	ldr	r3, [sp, #16]
 8007c2c:	eba0 000a 	sub.w	r0, r0, sl
 8007c30:	2240      	movs	r2, #64	; 0x40
 8007c32:	4082      	lsls	r2, r0
 8007c34:	4313      	orrs	r3, r2
 8007c36:	3401      	adds	r4, #1
 8007c38:	9304      	str	r3, [sp, #16]
 8007c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c3e:	4829      	ldr	r0, [pc, #164]	; (8007ce4 <_vfiprintf_r+0x224>)
 8007c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c44:	2206      	movs	r2, #6
 8007c46:	f7f8 fac3 	bl	80001d0 <memchr>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d03f      	beq.n	8007cce <_vfiprintf_r+0x20e>
 8007c4e:	4b26      	ldr	r3, [pc, #152]	; (8007ce8 <_vfiprintf_r+0x228>)
 8007c50:	bb1b      	cbnz	r3, 8007c9a <_vfiprintf_r+0x1da>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	3307      	adds	r3, #7
 8007c56:	f023 0307 	bic.w	r3, r3, #7
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	9303      	str	r3, [sp, #12]
 8007c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c60:	443b      	add	r3, r7
 8007c62:	9309      	str	r3, [sp, #36]	; 0x24
 8007c64:	e768      	b.n	8007b38 <_vfiprintf_r+0x78>
 8007c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	e7a6      	b.n	8007bbe <_vfiprintf_r+0xfe>
 8007c70:	2300      	movs	r3, #0
 8007c72:	3401      	adds	r4, #1
 8007c74:	9305      	str	r3, [sp, #20]
 8007c76:	4619      	mov	r1, r3
 8007c78:	f04f 0c0a 	mov.w	ip, #10
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c82:	3a30      	subs	r2, #48	; 0x30
 8007c84:	2a09      	cmp	r2, #9
 8007c86:	d903      	bls.n	8007c90 <_vfiprintf_r+0x1d0>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0c6      	beq.n	8007c1a <_vfiprintf_r+0x15a>
 8007c8c:	9105      	str	r1, [sp, #20]
 8007c8e:	e7c4      	b.n	8007c1a <_vfiprintf_r+0x15a>
 8007c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c94:	4604      	mov	r4, r0
 8007c96:	2301      	movs	r3, #1
 8007c98:	e7f0      	b.n	8007c7c <_vfiprintf_r+0x1bc>
 8007c9a:	ab03      	add	r3, sp, #12
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	462a      	mov	r2, r5
 8007ca0:	4b12      	ldr	r3, [pc, #72]	; (8007cec <_vfiprintf_r+0x22c>)
 8007ca2:	a904      	add	r1, sp, #16
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f7fd fb9f 	bl	80053e8 <_printf_float>
 8007caa:	4607      	mov	r7, r0
 8007cac:	1c78      	adds	r0, r7, #1
 8007cae:	d1d6      	bne.n	8007c5e <_vfiprintf_r+0x19e>
 8007cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cb2:	07d9      	lsls	r1, r3, #31
 8007cb4:	d405      	bmi.n	8007cc2 <_vfiprintf_r+0x202>
 8007cb6:	89ab      	ldrh	r3, [r5, #12]
 8007cb8:	059a      	lsls	r2, r3, #22
 8007cba:	d402      	bmi.n	8007cc2 <_vfiprintf_r+0x202>
 8007cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cbe:	f7fe f8fd 	bl	8005ebc <__retarget_lock_release_recursive>
 8007cc2:	89ab      	ldrh	r3, [r5, #12]
 8007cc4:	065b      	lsls	r3, r3, #25
 8007cc6:	f53f af1d 	bmi.w	8007b04 <_vfiprintf_r+0x44>
 8007cca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ccc:	e71c      	b.n	8007b08 <_vfiprintf_r+0x48>
 8007cce:	ab03      	add	r3, sp, #12
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	462a      	mov	r2, r5
 8007cd4:	4b05      	ldr	r3, [pc, #20]	; (8007cec <_vfiprintf_r+0x22c>)
 8007cd6:	a904      	add	r1, sp, #16
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f7fd fe29 	bl	8005930 <_printf_i>
 8007cde:	e7e4      	b.n	8007caa <_vfiprintf_r+0x1ea>
 8007ce0:	0801ba9c 	.word	0x0801ba9c
 8007ce4:	0801baa6 	.word	0x0801baa6
 8007ce8:	080053e9 	.word	0x080053e9
 8007cec:	08007a9d 	.word	0x08007a9d
 8007cf0:	0801baa2 	.word	0x0801baa2

08007cf4 <__swbuf_r>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	460e      	mov	r6, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	b118      	cbz	r0, 8007d06 <__swbuf_r+0x12>
 8007cfe:	6a03      	ldr	r3, [r0, #32]
 8007d00:	b90b      	cbnz	r3, 8007d06 <__swbuf_r+0x12>
 8007d02:	f7fd ffc3 	bl	8005c8c <__sinit>
 8007d06:	69a3      	ldr	r3, [r4, #24]
 8007d08:	60a3      	str	r3, [r4, #8]
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	071a      	lsls	r2, r3, #28
 8007d0e:	d525      	bpl.n	8007d5c <__swbuf_r+0x68>
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	b31b      	cbz	r3, 8007d5c <__swbuf_r+0x68>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	6922      	ldr	r2, [r4, #16]
 8007d18:	1a98      	subs	r0, r3, r2
 8007d1a:	6963      	ldr	r3, [r4, #20]
 8007d1c:	b2f6      	uxtb	r6, r6
 8007d1e:	4283      	cmp	r3, r0
 8007d20:	4637      	mov	r7, r6
 8007d22:	dc04      	bgt.n	8007d2e <__swbuf_r+0x3a>
 8007d24:	4621      	mov	r1, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	f7ff fd9e 	bl	8007868 <_fflush_r>
 8007d2c:	b9e0      	cbnz	r0, 8007d68 <__swbuf_r+0x74>
 8007d2e:	68a3      	ldr	r3, [r4, #8]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	60a3      	str	r3, [r4, #8]
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	6022      	str	r2, [r4, #0]
 8007d3a:	701e      	strb	r6, [r3, #0]
 8007d3c:	6962      	ldr	r2, [r4, #20]
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d004      	beq.n	8007d4e <__swbuf_r+0x5a>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	07db      	lsls	r3, r3, #31
 8007d48:	d506      	bpl.n	8007d58 <__swbuf_r+0x64>
 8007d4a:	2e0a      	cmp	r6, #10
 8007d4c:	d104      	bne.n	8007d58 <__swbuf_r+0x64>
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4628      	mov	r0, r5
 8007d52:	f7ff fd89 	bl	8007868 <_fflush_r>
 8007d56:	b938      	cbnz	r0, 8007d68 <__swbuf_r+0x74>
 8007d58:	4638      	mov	r0, r7
 8007d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 f806 	bl	8007d70 <__swsetup_r>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d0d5      	beq.n	8007d14 <__swbuf_r+0x20>
 8007d68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d6c:	e7f4      	b.n	8007d58 <__swbuf_r+0x64>
	...

08007d70 <__swsetup_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4b2a      	ldr	r3, [pc, #168]	; (8007e1c <__swsetup_r+0xac>)
 8007d74:	4605      	mov	r5, r0
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	460c      	mov	r4, r1
 8007d7a:	b118      	cbz	r0, 8007d84 <__swsetup_r+0x14>
 8007d7c:	6a03      	ldr	r3, [r0, #32]
 8007d7e:	b90b      	cbnz	r3, 8007d84 <__swsetup_r+0x14>
 8007d80:	f7fd ff84 	bl	8005c8c <__sinit>
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d8a:	0718      	lsls	r0, r3, #28
 8007d8c:	d422      	bmi.n	8007dd4 <__swsetup_r+0x64>
 8007d8e:	06d9      	lsls	r1, r3, #27
 8007d90:	d407      	bmi.n	8007da2 <__swsetup_r+0x32>
 8007d92:	2309      	movs	r3, #9
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d9a:	81a3      	strh	r3, [r4, #12]
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007da0:	e034      	b.n	8007e0c <__swsetup_r+0x9c>
 8007da2:	0758      	lsls	r0, r3, #29
 8007da4:	d512      	bpl.n	8007dcc <__swsetup_r+0x5c>
 8007da6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007da8:	b141      	cbz	r1, 8007dbc <__swsetup_r+0x4c>
 8007daa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dae:	4299      	cmp	r1, r3
 8007db0:	d002      	beq.n	8007db8 <__swsetup_r+0x48>
 8007db2:	4628      	mov	r0, r5
 8007db4:	f7fe fefe 	bl	8006bb4 <_free_r>
 8007db8:	2300      	movs	r3, #0
 8007dba:	6363      	str	r3, [r4, #52]	; 0x34
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	6063      	str	r3, [r4, #4]
 8007dc8:	6923      	ldr	r3, [r4, #16]
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f043 0308 	orr.w	r3, r3, #8
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	6923      	ldr	r3, [r4, #16]
 8007dd6:	b94b      	cbnz	r3, 8007dec <__swsetup_r+0x7c>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de2:	d003      	beq.n	8007dec <__swsetup_r+0x7c>
 8007de4:	4621      	mov	r1, r4
 8007de6:	4628      	mov	r0, r5
 8007de8:	f000 f884 	bl	8007ef4 <__smakebuf_r>
 8007dec:	89a0      	ldrh	r0, [r4, #12]
 8007dee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007df2:	f010 0301 	ands.w	r3, r0, #1
 8007df6:	d00a      	beq.n	8007e0e <__swsetup_r+0x9e>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60a3      	str	r3, [r4, #8]
 8007dfc:	6963      	ldr	r3, [r4, #20]
 8007dfe:	425b      	negs	r3, r3
 8007e00:	61a3      	str	r3, [r4, #24]
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	b943      	cbnz	r3, 8007e18 <__swsetup_r+0xa8>
 8007e06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e0a:	d1c4      	bne.n	8007d96 <__swsetup_r+0x26>
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	0781      	lsls	r1, r0, #30
 8007e10:	bf58      	it	pl
 8007e12:	6963      	ldrpl	r3, [r4, #20]
 8007e14:	60a3      	str	r3, [r4, #8]
 8007e16:	e7f4      	b.n	8007e02 <__swsetup_r+0x92>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e7f7      	b.n	8007e0c <__swsetup_r+0x9c>
 8007e1c:	20000068 	.word	0x20000068

08007e20 <_raise_r>:
 8007e20:	291f      	cmp	r1, #31
 8007e22:	b538      	push	{r3, r4, r5, lr}
 8007e24:	4604      	mov	r4, r0
 8007e26:	460d      	mov	r5, r1
 8007e28:	d904      	bls.n	8007e34 <_raise_r+0x14>
 8007e2a:	2316      	movs	r3, #22
 8007e2c:	6003      	str	r3, [r0, #0]
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007e36:	b112      	cbz	r2, 8007e3e <_raise_r+0x1e>
 8007e38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e3c:	b94b      	cbnz	r3, 8007e52 <_raise_r+0x32>
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 f830 	bl	8007ea4 <_getpid_r>
 8007e44:	462a      	mov	r2, r5
 8007e46:	4601      	mov	r1, r0
 8007e48:	4620      	mov	r0, r4
 8007e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4e:	f000 b817 	b.w	8007e80 <_kill_r>
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d00a      	beq.n	8007e6c <_raise_r+0x4c>
 8007e56:	1c59      	adds	r1, r3, #1
 8007e58:	d103      	bne.n	8007e62 <_raise_r+0x42>
 8007e5a:	2316      	movs	r3, #22
 8007e5c:	6003      	str	r3, [r0, #0]
 8007e5e:	2001      	movs	r0, #1
 8007e60:	e7e7      	b.n	8007e32 <_raise_r+0x12>
 8007e62:	2400      	movs	r4, #0
 8007e64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e68:	4628      	mov	r0, r5
 8007e6a:	4798      	blx	r3
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e7e0      	b.n	8007e32 <_raise_r+0x12>

08007e70 <raise>:
 8007e70:	4b02      	ldr	r3, [pc, #8]	; (8007e7c <raise+0xc>)
 8007e72:	4601      	mov	r1, r0
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	f7ff bfd3 	b.w	8007e20 <_raise_r>
 8007e7a:	bf00      	nop
 8007e7c:	20000068 	.word	0x20000068

08007e80 <_kill_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4d07      	ldr	r5, [pc, #28]	; (8007ea0 <_kill_r+0x20>)
 8007e84:	2300      	movs	r3, #0
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	f7f9 fae3 	bl	8001458 <_kill>
 8007e92:	1c43      	adds	r3, r0, #1
 8007e94:	d102      	bne.n	8007e9c <_kill_r+0x1c>
 8007e96:	682b      	ldr	r3, [r5, #0]
 8007e98:	b103      	cbz	r3, 8007e9c <_kill_r+0x1c>
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000dd8 	.word	0x20000dd8

08007ea4 <_getpid_r>:
 8007ea4:	f7f9 bad0 	b.w	8001448 <_getpid>

08007ea8 <__swhatbuf_r>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	b096      	sub	sp, #88	; 0x58
 8007eb4:	4615      	mov	r5, r2
 8007eb6:	461e      	mov	r6, r3
 8007eb8:	da0d      	bge.n	8007ed6 <__swhatbuf_r+0x2e>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ec0:	f04f 0100 	mov.w	r1, #0
 8007ec4:	bf0c      	ite	eq
 8007ec6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007eca:	2340      	movne	r3, #64	; 0x40
 8007ecc:	2000      	movs	r0, #0
 8007ece:	6031      	str	r1, [r6, #0]
 8007ed0:	602b      	str	r3, [r5, #0]
 8007ed2:	b016      	add	sp, #88	; 0x58
 8007ed4:	bd70      	pop	{r4, r5, r6, pc}
 8007ed6:	466a      	mov	r2, sp
 8007ed8:	f000 f848 	bl	8007f6c <_fstat_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	dbec      	blt.n	8007eba <__swhatbuf_r+0x12>
 8007ee0:	9901      	ldr	r1, [sp, #4]
 8007ee2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ee6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007eea:	4259      	negs	r1, r3
 8007eec:	4159      	adcs	r1, r3
 8007eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ef2:	e7eb      	b.n	8007ecc <__swhatbuf_r+0x24>

08007ef4 <__smakebuf_r>:
 8007ef4:	898b      	ldrh	r3, [r1, #12]
 8007ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ef8:	079d      	lsls	r5, r3, #30
 8007efa:	4606      	mov	r6, r0
 8007efc:	460c      	mov	r4, r1
 8007efe:	d507      	bpl.n	8007f10 <__smakebuf_r+0x1c>
 8007f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	6123      	str	r3, [r4, #16]
 8007f08:	2301      	movs	r3, #1
 8007f0a:	6163      	str	r3, [r4, #20]
 8007f0c:	b002      	add	sp, #8
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	ab01      	add	r3, sp, #4
 8007f12:	466a      	mov	r2, sp
 8007f14:	f7ff ffc8 	bl	8007ea8 <__swhatbuf_r>
 8007f18:	9900      	ldr	r1, [sp, #0]
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7fe febd 	bl	8006c9c <_malloc_r>
 8007f22:	b948      	cbnz	r0, 8007f38 <__smakebuf_r+0x44>
 8007f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f28:	059a      	lsls	r2, r3, #22
 8007f2a:	d4ef      	bmi.n	8007f0c <__smakebuf_r+0x18>
 8007f2c:	f023 0303 	bic.w	r3, r3, #3
 8007f30:	f043 0302 	orr.w	r3, r3, #2
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	e7e3      	b.n	8007f00 <__smakebuf_r+0xc>
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	6020      	str	r0, [r4, #0]
 8007f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	6163      	str	r3, [r4, #20]
 8007f46:	9b01      	ldr	r3, [sp, #4]
 8007f48:	6120      	str	r0, [r4, #16]
 8007f4a:	b15b      	cbz	r3, 8007f64 <__smakebuf_r+0x70>
 8007f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f50:	4630      	mov	r0, r6
 8007f52:	f000 f81d 	bl	8007f90 <_isatty_r>
 8007f56:	b128      	cbz	r0, 8007f64 <__smakebuf_r+0x70>
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f023 0303 	bic.w	r3, r3, #3
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	81a3      	strh	r3, [r4, #12]
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	431d      	orrs	r5, r3
 8007f68:	81a5      	strh	r5, [r4, #12]
 8007f6a:	e7cf      	b.n	8007f0c <__smakebuf_r+0x18>

08007f6c <_fstat_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d07      	ldr	r5, [pc, #28]	; (8007f8c <_fstat_r+0x20>)
 8007f70:	2300      	movs	r3, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	602b      	str	r3, [r5, #0]
 8007f7a:	f7f9 facc 	bl	8001516 <_fstat>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d102      	bne.n	8007f88 <_fstat_r+0x1c>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	b103      	cbz	r3, 8007f88 <_fstat_r+0x1c>
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000dd8 	.word	0x20000dd8

08007f90 <_isatty_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4d06      	ldr	r5, [pc, #24]	; (8007fac <_isatty_r+0x1c>)
 8007f94:	2300      	movs	r3, #0
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7f9 facb 	bl	8001536 <_isatty>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_isatty_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_isatty_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	20000dd8 	.word	0x20000dd8

08007fb0 <sqrtf>:
 8007fb0:	b508      	push	{r3, lr}
 8007fb2:	ed2d 8b02 	vpush	{d8}
 8007fb6:	eeb0 8a40 	vmov.f32	s16, s0
 8007fba:	f000 f817 	bl	8007fec <__ieee754_sqrtf>
 8007fbe:	eeb4 8a48 	vcmp.f32	s16, s16
 8007fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc6:	d60c      	bvs.n	8007fe2 <sqrtf+0x32>
 8007fc8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007fe8 <sqrtf+0x38>
 8007fcc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd4:	d505      	bpl.n	8007fe2 <sqrtf+0x32>
 8007fd6:	f7fd ff45 	bl	8005e64 <__errno>
 8007fda:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007fde:	2321      	movs	r3, #33	; 0x21
 8007fe0:	6003      	str	r3, [r0, #0]
 8007fe2:	ecbd 8b02 	vpop	{d8}
 8007fe6:	bd08      	pop	{r3, pc}
 8007fe8:	00000000 	.word	0x00000000

08007fec <__ieee754_sqrtf>:
 8007fec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007ff0:	4770      	bx	lr
	...

08007ff4 <_init>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr

08008000 <_fini>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	bf00      	nop
 8008004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008006:	bc08      	pop	{r3}
 8008008:	469e      	mov	lr, r3
 800800a:	4770      	bx	lr
