
Task4.21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b0  080042b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042b8  080042b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  080042cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080042cc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6f0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d4b  00000000  00000000  0002e76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  000304c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b0  00000000  00000000  00031148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a34  00000000  00000000  00031af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6d1  00000000  00000000  0005852c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7085  00000000  00000000  00066bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000349c  00000000  00000000  0015dc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00161120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004250 	.word	0x08004250

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004250 	.word	0x08004250

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb92 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80b 	bl	80004e6 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004d0:	f000 f85a 	bl	8000588 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f98e 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f95c 	bl	8000794 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004dc:	f000 f880 	bl	80005e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004e0:	f000 f8f4 	bl	80006cc <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x20>

080004e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b096      	sub	sp, #88	; 0x58
 80004ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2244      	movs	r2, #68	; 0x44
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 fe7e 	bl	80041f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000508:	f44f 7000 	mov.w	r0, #512	; 0x200
 800050c:	f001 fe46 	bl	800219c <HAL_PWREx_ControlVoltageScaling>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000516:	f000 f9e5 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	2302      	movs	r3, #2
 800051c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000524:	2310      	movs	r3, #16
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	2302      	movs	r3, #2
 800052a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000534:	230a      	movs	r3, #10
 8000536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000538:	2307      	movs	r3, #7
 800053a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800053c:	2302      	movs	r3, #2
 800053e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000540:	2302      	movs	r3, #2
 8000542:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fe7d 	bl	8002248 <HAL_RCC_OscConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000554:	f000 f9c6 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	230f      	movs	r3, #15
 800055a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055c:	2303      	movs	r3, #3
 800055e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	2104      	movs	r1, #4
 8000570:	4618      	mov	r0, r3
 8000572:	f002 fa45 	bl	8002a00 <HAL_RCC_ClockConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800057c:	f000 f9b2 	bl	80008e4 <Error_Handler>
  }
}
 8000580:	bf00      	nop
 8000582:	3758      	adds	r7, #88	; 0x58
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0a2      	sub	sp, #136	; 0x88
 800058c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2288      	movs	r2, #136	; 0x88
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fe2e 	bl	80041f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800059a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800059e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005a4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005a6:	2302      	movs	r3, #2
 80005a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005ae:	2308      	movs	r3, #8
 80005b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005c2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fc3e 	bl	8002e48 <HAL_RCCEx_PeriphCLKConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80005d2:	f000 f987 	bl	80008e4 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3788      	adds	r7, #136	; 0x88
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000602:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000604:	4a2f      	ldr	r2, [pc, #188]	; (80006c4 <MX_ADC1_Init+0xe4>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061a:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <MX_ADC1_Init+0xe0>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000622:	2204      	movs	r2, #4
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000628:	2200      	movs	r2, #0
 800062a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <MX_ADC1_Init+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000634:	2201      	movs	r2, #1
 8000636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000656:	2200      	movs	r2, #0
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_ADC1_Init+0xe0>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000662:	4817      	ldr	r0, [pc, #92]	; (80006c0 <MX_ADC1_Init+0xe0>)
 8000664:	f000 fccc 	bl	8001000 <HAL_ADC_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800066e:	f000 f939 	bl	80008e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <MX_ADC1_Init+0xe0>)
 800067e:	f001 fa27 	bl	8001ad0 <HAL_ADCEx_MultiModeConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000688:	f000 f92c 	bl	80008e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_ADC1_Init+0xe8>)
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000690:	2306      	movs	r3, #6
 8000692:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000698:	237f      	movs	r3, #127	; 0x7f
 800069a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069c:	2304      	movs	r3, #4
 800069e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_ADC1_Init+0xe0>)
 80006aa:	f000 fdf9 	bl	80012a0 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006b4:	f000 f916 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000028 	.word	0x20000028
 80006c4:	50040000 	.word	0x50040000
 80006c8:	04300002 	.word	0x04300002

080006cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <MX_ADC2_Init+0xbc>)
 80006e4:	4a29      	ldr	r2, [pc, #164]	; (800078c <MX_ADC2_Init+0xc0>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <MX_ADC2_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_ADC2_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <MX_ADC2_Init+0xbc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_ADC2_Init+0xbc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_ADC2_Init+0xbc>)
 8000702:	2204      	movs	r2, #4
 8000704:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_ADC2_Init+0xbc>)
 8000708:	2200      	movs	r2, #0
 800070a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_ADC2_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_ADC2_Init+0xbc>)
 8000714:	2201      	movs	r2, #1
 8000716:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_ADC2_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_ADC2_Init+0xbc>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_ADC2_Init+0xbc>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_ADC2_Init+0xbc>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_ADC2_Init+0xbc>)
 8000736:	2200      	movs	r2, #0
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_ADC2_Init+0xbc>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_ADC2_Init+0xbc>)
 8000744:	f000 fc5c 	bl	8001000 <HAL_ADC_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800074e:	f000 f8c9 	bl	80008e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_ADC2_Init+0xc4>)
 8000754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000756:	2306      	movs	r3, #6
 8000758:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800075e:	237f      	movs	r3, #127	; 0x7f
 8000760:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000762:	2304      	movs	r3, #4
 8000764:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <MX_ADC2_Init+0xbc>)
 8000770:	f000 fd96 	bl	80012a0 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800077a:	f000 f8b3 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000008c 	.word	0x2000008c
 800078c:	50040100 	.word	0x50040100
 8000790:	08600004 	.word	0x08600004

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_USART2_UART_Init+0x58>)
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <MX_USART2_UART_Init+0x5c>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x58>)
 80007d8:	f002 fff2 	bl	80037c0 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 f87f 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000f0 	.word	0x200000f0
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <MX_GPIO_Init+0xe8>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_GPIO_Init+0xe8>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a27      	ldr	r2, [pc, #156]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a21      	ldr	r2, [pc, #132]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0xe8>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f001 fc6d 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4814      	ldr	r0, [pc, #80]	; (80008e0 <MX_GPIO_Init+0xec>)
 800088e:	f001 fab5 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000892:	2320      	movs	r3, #32
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f001 faa6 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f001 fa94 	bl	8001dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000800 	.word	0x48000800

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6613      	str	r3, [r2, #96]	; 0x60
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x44>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6593      	str	r3, [r2, #88]	; 0x58
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a3f      	ldr	r2, [pc, #252]	; (8000a54 <HAL_ADC_MspInit+0x11c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d145      	bne.n	80009e6 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800095a:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <HAL_ADC_MspInit+0x120>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	4a3d      	ldr	r2, [pc, #244]	; (8000a58 <HAL_ADC_MspInit+0x120>)
 8000962:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000964:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <HAL_ADC_MspInit+0x120>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d10b      	bne.n	8000984 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800096c:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	4a3a      	ldr	r2, [pc, #232]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 8000972:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000980:	61bb      	str	r3, [r7, #24]
 8000982:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000984:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000988:	4a34      	ldr	r2, [pc, #208]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000990:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a8:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009b8:	230b      	movs	r3, #11
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4826      	ldr	r0, [pc, #152]	; (8000a60 <HAL_ADC_MspInit+0x128>)
 80009c8:	f001 fa18 	bl	8001dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009d0:	230b      	movs	r3, #11
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4821      	ldr	r0, [pc, #132]	; (8000a64 <HAL_ADC_MspInit+0x12c>)
 80009e0:	f001 fa0c 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80009e4:	e031      	b.n	8000a4a <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <HAL_ADC_MspInit+0x130>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d12c      	bne.n	8000a4a <HAL_ADC_MspInit+0x112>
    HAL_RCC_ADC_CLK_ENABLED++;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_ADC_MspInit+0x120>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <HAL_ADC_MspInit+0x120>)
 80009f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <HAL_ADC_MspInit+0x120>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d10b      	bne.n	8000a1a <HAL_ADC_MspInit+0xe2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 8000a08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_ADC_MspInit+0x124>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a32:	2303      	movs	r3, #3
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a36:	230b      	movs	r3, #11
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <HAL_ADC_MspInit+0x128>)
 8000a46:	f001 f9d9 	bl	8001dfc <HAL_GPIO_Init>
}
 8000a4a:	bf00      	nop
 8000a4c:	3730      	adds	r7, #48	; 0x30
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	50040000 	.word	0x50040000
 8000a58:	20000178 	.word	0x20000178
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	48000800 	.word	0x48000800
 8000a64:	48000400 	.word	0x48000400
 8000a68:	50040100 	.word	0x50040100

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ac      	sub	sp, #176	; 0xb0
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2288      	movs	r2, #136	; 0x88
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 fbb2 	bl	80041f6 <memset>
  if(huart->Instance==USART2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <HAL_UART_MspInit+0xb0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d13b      	bne.n	8000b14 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 f9cd 	bl	8002e48 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab4:	f7ff ff16 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_UART_MspInit+0xb4>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abc:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <HAL_UART_MspInit+0xb4>)
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_UART_MspInit+0xb4>)
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_UART_MspInit+0xb4>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <HAL_UART_MspInit+0xb4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_UART_MspInit+0xb4>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b00:	2307      	movs	r3, #7
 8000b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f001 f974 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	37b0      	adds	r7, #176	; 0xb0
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 f89a 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff ffea 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f003 fb1d 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bce:	f7ff fc79 	bl	80004c4 <main>

08000bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be0:	080042c0 	.word	0x080042c0
  ldr r2, =_sbss
 8000be4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be8:	20000180 	.word	0x20000180

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_Init+0x3c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <HAL_Init+0x3c>)
 8000c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c06:	2003      	movs	r0, #3
 8000c08:	f001 f8c4 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 f80f 	bl	8000c30 <HAL_InitTick>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	e001      	b.n	8000c22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c1e:	f7ff fe67 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_InitTick+0x6c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d023      	beq.n	8000c8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_InitTick+0x70>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0x6c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 f8c1 	bl	8001de2 <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10f      	bne.n	8000c86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d809      	bhi.n	8000c80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c74:	f001 f899 	bl	8001daa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_InitTick+0x74>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e007      	b.n	8000c90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e004      	b.n	8000c90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e001      	b.n	8000c90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	2000017c 	.word	0x2000017c

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000017c 	.word	0x2000017c

08000ce8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	609a      	str	r2, [r3, #8]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	609a      	str	r2, [r3, #8]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3360      	adds	r3, #96	; 0x60
 8000d62:	461a      	mov	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <LL_ADC_SetOffset+0x44>)
 8000d72:	4013      	ands	r3, r2
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d88:	bf00      	nop
 8000d8a:	371c      	adds	r7, #28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	03fff000 	.word	0x03fff000

08000d98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3360      	adds	r3, #96	; 0x60
 8000da6:	461a      	mov	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3360      	adds	r3, #96	; 0x60
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b087      	sub	sp, #28
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3330      	adds	r3, #48	; 0x30
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	4413      	add	r3, r2
 8000e18:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	211f      	movs	r1, #31
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	0e9b      	lsrs	r3, r3, #26
 8000e32:	f003 011f 	and.w	r1, r3, #31
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f003 031f 	and.w	r3, r3, #31
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	431a      	orrs	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e46:	bf00      	nop
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b087      	sub	sp, #28
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3314      	adds	r3, #20
 8000e62:	461a      	mov	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	0e5b      	lsrs	r3, r3, #25
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	4413      	add	r3, r2
 8000e70:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	0d1b      	lsrs	r3, r3, #20
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	2107      	movs	r1, #7
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	401a      	ands	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	0d1b      	lsrs	r3, r3, #20
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	431a      	orrs	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0318 	and.w	r3, r3, #24
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ecc:	40d9      	lsrs	r1, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	400b      	ands	r3, r1
 8000ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	0007ffff 	.word	0x0007ffff

08000ef0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6093      	str	r3, [r2, #8]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f28:	d101      	bne.n	8000f2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f78:	d101      	bne.n	8000f7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <LL_ADC_IsEnabled+0x18>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <LL_ADC_IsEnabled+0x1a>
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d101      	bne.n	8000fca <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d101      	bne.n	8000ff0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e130      	b.n	800127c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001024:	2b00      	cmp	r3, #0
 8001026:	d109      	bne.n	800103c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fc85 	bl	8000938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff67 	bl	8000f14 <LL_ADC_IsDeepPowerDownEnabled>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff4d 	bl	8000ef0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff82 	bl	8000f64 <LL_ADC_IsInternalRegulatorEnabled>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d115      	bne.n	8001092 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff66 	bl	8000f3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001070:	4b84      	ldr	r3, [pc, #528]	; (8001284 <HAL_ADC_Init+0x284>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	099b      	lsrs	r3, r3, #6
 8001076:	4a84      	ldr	r2, [pc, #528]	; (8001288 <HAL_ADC_Init+0x288>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	099b      	lsrs	r3, r3, #6
 800107e:	3301      	adds	r3, #1
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001084:	e002      	b.n	800108c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3b01      	subs	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f9      	bne.n	8001086 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff64 	bl	8000f64 <LL_ADC_IsInternalRegulatorEnabled>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10d      	bne.n	80010be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a6:	f043 0210 	orr.w	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff75 	bl	8000fb2 <LL_ADC_REG_IsConversionOngoing>
 80010c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 80c9 	bne.w	800126a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f040 80c5 	bne.w	800126a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010e8:	f043 0202 	orr.w	r2, r3, #2
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff49 	bl	8000f8c <LL_ADC_IsEnabled>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d115      	bne.n	800112c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001100:	4862      	ldr	r0, [pc, #392]	; (800128c <HAL_ADC_Init+0x28c>)
 8001102:	f7ff ff43 	bl	8000f8c <LL_ADC_IsEnabled>
 8001106:	4604      	mov	r4, r0
 8001108:	4861      	ldr	r0, [pc, #388]	; (8001290 <HAL_ADC_Init+0x290>)
 800110a:	f7ff ff3f 	bl	8000f8c <LL_ADC_IsEnabled>
 800110e:	4603      	mov	r3, r0
 8001110:	431c      	orrs	r4, r3
 8001112:	4860      	ldr	r0, [pc, #384]	; (8001294 <HAL_ADC_Init+0x294>)
 8001114:	f7ff ff3a 	bl	8000f8c <LL_ADC_IsEnabled>
 8001118:	4603      	mov	r3, r0
 800111a:	4323      	orrs	r3, r4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d105      	bne.n	800112c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4619      	mov	r1, r3
 8001126:	485c      	ldr	r0, [pc, #368]	; (8001298 <HAL_ADC_Init+0x298>)
 8001128:	f7ff fdde 	bl	8000ce8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e5b      	ldrb	r3, [r3, #25]
 8001130:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001136:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800113c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001142:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d106      	bne.n	8001168 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	3b01      	subs	r3, #1
 8001160:	045b      	lsls	r3, r3, #17
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	2b00      	cmp	r3, #0
 800116e:	d009      	beq.n	8001184 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	4b44      	ldr	r3, [pc, #272]	; (800129c <HAL_ADC_Init+0x29c>)
 800118c:	4013      	ands	r3, r2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	430b      	orrs	r3, r1
 8001196:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff1b 	bl	8000fd8 <LL_ADC_INJ_IsConversionOngoing>
 80011a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d13d      	bne.n	8001226 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d13a      	bne.n	8001226 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011b4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011cc:	f023 0302 	bic.w	r3, r3, #2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	69b9      	ldr	r1, [r7, #24]
 80011d6:	430b      	orrs	r3, r1
 80011d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d118      	bne.n	8001216 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011ee:	f023 0304 	bic.w	r3, r3, #4
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011fa:	4311      	orrs	r1, r2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001200:	4311      	orrs	r1, r2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001206:	430a      	orrs	r2, r1
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	e007      	b.n	8001226 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10c      	bne.n	8001248 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f023 010f 	bic.w	r1, r3, #15
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
 8001246:	e007      	b.n	8001258 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 020f 	bic.w	r2, r2, #15
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	f023 0303 	bic.w	r3, r3, #3
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
 8001268:	e007      	b.n	800127a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126e:	f043 0210 	orr.w	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800127a:	7ffb      	ldrb	r3, [r7, #31]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3724      	adds	r7, #36	; 0x24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	053e2d63 	.word	0x053e2d63
 800128c:	50040000 	.word	0x50040000
 8001290:	50040100 	.word	0x50040100
 8001294:	50040200 	.word	0x50040200
 8001298:	50040300 	.word	0x50040300
 800129c:	fff0c007 	.word	0xfff0c007

080012a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0b6      	sub	sp, #216	; 0xd8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x22>
 80012be:	2302      	movs	r3, #2
 80012c0:	e3c9      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x7b6>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe6f 	bl	8000fb2 <LL_ADC_REG_IsConversionOngoing>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 83aa 	bne.w	8001a30 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d824      	bhi.n	8001336 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	3b02      	subs	r3, #2
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d81b      	bhi.n	800132e <HAL_ADC_ConfigChannel+0x8e>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <HAL_ADC_ConfigChannel+0x5c>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	08001315 	.word	0x08001315
 8001304:	0800131d 	.word	0x0800131d
 8001308:	08001325 	.word	0x08001325
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800130c:	230c      	movs	r3, #12
 800130e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001312:	e010      	b.n	8001336 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001314:	2312      	movs	r3, #18
 8001316:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800131a:	e00c      	b.n	8001336 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800131c:	2318      	movs	r3, #24
 800131e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001322:	e008      	b.n	8001336 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800132c:	e003      	b.n	8001336 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800132e:	2306      	movs	r3, #6
 8001330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001334:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001344:	f7ff fd59 	bl	8000dfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe30 	bl	8000fb2 <LL_ADC_REG_IsConversionOngoing>
 8001352:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe3c 	bl	8000fd8 <LL_ADC_INJ_IsConversionOngoing>
 8001360:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001368:	2b00      	cmp	r3, #0
 800136a:	f040 81a4 	bne.w	80016b6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800136e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001372:	2b00      	cmp	r3, #0
 8001374:	f040 819f 	bne.w	80016b6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	461a      	mov	r2, r3
 8001386:	f7ff fd64 	bl	8000e52 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d00a      	beq.n	80013c2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6919      	ldr	r1, [r3, #16]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013bc:	f7ff fcc8 	bl	8000d50 <LL_ADC_SetOffset>
 80013c0:	e179      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fce5 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10a      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x14e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fcda 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	0e9b      	lsrs	r3, r3, #26
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	e01e      	b.n	800142c <HAL_ADC_ConfigChannel+0x18c>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fccf 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800140c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001410:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001414:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800141c:	2320      	movs	r3, #32
 800141e:	e004      	b.n	800142a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001420:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1a4>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0e9b      	lsrs	r3, r3, #26
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	e018      	b.n	8001476 <HAL_ADC_ConfigChannel+0x1d6>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800145c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001460:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001468:	2320      	movs	r3, #32
 800146a:	e004      	b.n	8001476 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800146c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001476:	429a      	cmp	r2, r3
 8001478:	d106      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fc9e 	bl	8000dc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc82 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10a      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x214>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2101      	movs	r1, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc77 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	0e9b      	lsrs	r3, r3, #26
 80014ae:	f003 021f 	and.w	r2, r3, #31
 80014b2:	e01e      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x252>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fc6c 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80014d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80014da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80014e2:	2320      	movs	r3, #32
 80014e4:	e004      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80014e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <HAL_ADC_ConfigChannel+0x26a>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0e9b      	lsrs	r3, r3, #26
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	e018      	b.n	800153c <HAL_ADC_ConfigChannel+0x29c>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800151e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001522:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800152e:	2320      	movs	r3, #32
 8001530:	e004      	b.n	800153c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800153c:	429a      	cmp	r2, r3
 800153e:	d106      	bne.n	800154e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	2101      	movs	r1, #1
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fc3b 	bl	8000dc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2102      	movs	r1, #2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fc1f 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10a      	bne.n	800157a <HAL_ADC_ConfigChannel+0x2da>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fc14 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	0e9b      	lsrs	r3, r3, #26
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	e01e      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x318>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2102      	movs	r1, #2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fc09 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001590:	fa93 f3a3 	rbit	r3, r3
 8001594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001598:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800159c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80015a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80015a8:	2320      	movs	r3, #32
 80015aa:	e004      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80015ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x330>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0e9b      	lsrs	r3, r3, #26
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	e014      	b.n	80015fa <HAL_ADC_ConfigChannel+0x35a>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80015de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80015e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80015ec:	2320      	movs	r3, #32
 80015ee:	e004      	b.n	80015fa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80015f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d106      	bne.n	800160c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	2102      	movs	r1, #2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fbdc 	bl	8000dc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2103      	movs	r1, #3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fbc0 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10a      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x398>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2103      	movs	r1, #3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fbb5 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	0e9b      	lsrs	r3, r3, #26
 8001632:	f003 021f 	and.w	r2, r3, #31
 8001636:	e017      	b.n	8001668 <HAL_ADC_ConfigChannel+0x3c8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2103      	movs	r1, #3
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fbaa 	bl	8000d98 <LL_ADC_GetOffsetChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001652:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800165a:	2320      	movs	r3, #32
 800165c:	e003      	b.n	8001666 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800165e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001660:	fab3 f383 	clz	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x3e0>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0e9b      	lsrs	r3, r3, #26
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	e011      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x404>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800168e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001690:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001698:	2320      	movs	r3, #32
 800169a:	e003      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800169c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d106      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2200      	movs	r2, #0
 80016ae:	2103      	movs	r1, #3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fb87 	bl	8000dc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fc66 	bl	8000f8c <LL_ADC_IsEnabled>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 8140 	bne.w	8001948 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6819      	ldr	r1, [r3, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	461a      	mov	r2, r3
 80016d6:	f7ff fbe7 	bl	8000ea8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	4a8f      	ldr	r2, [pc, #572]	; (800191c <HAL_ADC_ConfigChannel+0x67c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	f040 8131 	bne.w	8001948 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10b      	bne.n	800170e <HAL_ADC_ConfigChannel+0x46e>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	0e9b      	lsrs	r3, r3, #26
 80016fc:	3301      	adds	r3, #1
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	2b09      	cmp	r3, #9
 8001704:	bf94      	ite	ls
 8001706:	2301      	movls	r3, #1
 8001708:	2300      	movhi	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	e019      	b.n	8001742 <HAL_ADC_ConfigChannel+0x4a2>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800171c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001726:	2320      	movs	r3, #32
 8001728:	e003      	b.n	8001732 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800172a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3301      	adds	r3, #1
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	2b09      	cmp	r3, #9
 800173a:	bf94      	ite	ls
 800173c:	2301      	movls	r3, #1
 800173e:	2300      	movhi	r3, #0
 8001740:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001742:	2b00      	cmp	r3, #0
 8001744:	d079      	beq.n	800183a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174e:	2b00      	cmp	r3, #0
 8001750:	d107      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x4c2>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0e9b      	lsrs	r3, r3, #26
 8001758:	3301      	adds	r3, #1
 800175a:	069b      	lsls	r3, r3, #26
 800175c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001760:	e015      	b.n	800178e <HAL_ADC_ConfigChannel+0x4ee>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001772:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800177a:	2320      	movs	r3, #32
 800177c:	e003      	b.n	8001786 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800177e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3301      	adds	r3, #1
 8001788:	069b      	lsls	r3, r3, #26
 800178a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x50e>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	3301      	adds	r3, #1
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	2101      	movs	r1, #1
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	e017      	b.n	80017de <HAL_ADC_ConfigChannel+0x53e>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80017bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80017c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80017c6:	2320      	movs	r3, #32
 80017c8:	e003      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80017ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	ea42 0103 	orr.w	r1, r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x564>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0e9b      	lsrs	r3, r3, #26
 80017f4:	3301      	adds	r3, #1
 80017f6:	f003 021f 	and.w	r2, r3, #31
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	051b      	lsls	r3, r3, #20
 8001802:	e018      	b.n	8001836 <HAL_ADC_ConfigChannel+0x596>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800181c:	2320      	movs	r3, #32
 800181e:	e003      	b.n	8001828 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	3301      	adds	r3, #1
 800182a:	f003 021f 	and.w	r2, r3, #31
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001836:	430b      	orrs	r3, r1
 8001838:	e081      	b.n	800193e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x5b6>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	0e9b      	lsrs	r3, r3, #26
 800184c:	3301      	adds	r3, #1
 800184e:	069b      	lsls	r3, r3, #26
 8001850:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001854:	e015      	b.n	8001882 <HAL_ADC_ConfigChannel+0x5e2>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800186e:	2320      	movs	r3, #32
 8001870:	e003      	b.n	800187a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3301      	adds	r3, #1
 800187c:	069b      	lsls	r3, r3, #26
 800187e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x602>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0e9b      	lsrs	r3, r3, #26
 8001894:	3301      	adds	r3, #1
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	2101      	movs	r1, #1
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	e017      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x632>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	fa93 f3a3 	rbit	r3, r3
 80018ae:	61bb      	str	r3, [r7, #24]
  return result;
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80018ba:	2320      	movs	r3, #32
 80018bc:	e003      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	ea42 0103 	orr.w	r1, r2, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10d      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x65e>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	0e9b      	lsrs	r3, r3, #26
 80018e8:	3301      	adds	r3, #1
 80018ea:	f003 021f 	and.w	r2, r3, #31
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	3b1e      	subs	r3, #30
 80018f6:	051b      	lsls	r3, r3, #20
 80018f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018fc:	e01e      	b.n	800193c <HAL_ADC_ConfigChannel+0x69c>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	60fb      	str	r3, [r7, #12]
  return result;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d104      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001916:	2320      	movs	r3, #32
 8001918:	e006      	b.n	8001928 <HAL_ADC_ConfigChannel+0x688>
 800191a:	bf00      	nop
 800191c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3301      	adds	r3, #1
 800192a:	f003 021f 	and.w	r2, r3, #31
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	3b1e      	subs	r3, #30
 8001936:	051b      	lsls	r3, r3, #20
 8001938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800193c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff fa85 	bl	8000e52 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <HAL_ADC_ConfigChannel+0x7c0>)
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d07a      	beq.n	8001a4a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001954:	4843      	ldr	r0, [pc, #268]	; (8001a64 <HAL_ADC_ConfigChannel+0x7c4>)
 8001956:	f7ff f9ed 	bl	8000d34 <LL_ADC_GetCommonPathInternalCh>
 800195a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <HAL_ADC_ConfigChannel+0x7c8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d12c      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800196c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d126      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a3c      	ldr	r2, [pc, #240]	; (8001a6c <HAL_ADC_ConfigChannel+0x7cc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d004      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x6e8>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a3b      	ldr	r2, [pc, #236]	; (8001a70 <HAL_ADC_ConfigChannel+0x7d0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d15d      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800198c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001990:	4619      	mov	r1, r3
 8001992:	4834      	ldr	r0, [pc, #208]	; (8001a64 <HAL_ADC_ConfigChannel+0x7c4>)
 8001994:	f7ff f9bb 	bl	8000d0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_ADC_ConfigChannel+0x7d4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	4a36      	ldr	r2, [pc, #216]	; (8001a78 <HAL_ADC_ConfigChannel+0x7d8>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019b2:	e002      	b.n	80019ba <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f9      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019c0:	e040      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a2d      	ldr	r2, [pc, #180]	; (8001a7c <HAL_ADC_ConfigChannel+0x7dc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d118      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d112      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_ADC_ConfigChannel+0x7cc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_ADC_ConfigChannel+0x74c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_ADC_ConfigChannel+0x7d0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d12d      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f4:	4619      	mov	r1, r3
 80019f6:	481b      	ldr	r0, [pc, #108]	; (8001a64 <HAL_ADC_ConfigChannel+0x7c4>)
 80019f8:	f7ff f989 	bl	8000d0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019fc:	e024      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <HAL_ADC_ConfigChannel+0x7e0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d120      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d11a      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <HAL_ADC_ConfigChannel+0x7cc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d115      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a26:	4619      	mov	r1, r3
 8001a28:	480e      	ldr	r0, [pc, #56]	; (8001a64 <HAL_ADC_ConfigChannel+0x7c4>)
 8001a2a:	f7ff f970 	bl	8000d0e <LL_ADC_SetCommonPathInternalCh>
 8001a2e:	e00c      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f043 0220 	orr.w	r2, r3, #32
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001a42:	e002      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a44:	bf00      	nop
 8001a46:	e000      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	37d8      	adds	r7, #216	; 0xd8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	80080000 	.word	0x80080000
 8001a64:	50040300 	.word	0x50040300
 8001a68:	c7520000 	.word	0xc7520000
 8001a6c:	50040000 	.word	0x50040000
 8001a70:	50040200 	.word	0x50040200
 8001a74:	20000000 	.word	0x20000000
 8001a78:	053e2d63 	.word	0x053e2d63
 8001a7c:	cb840000 	.word	0xcb840000
 8001a80:	80000001 	.word	0x80000001

08001a84 <LL_ADC_IsEnabled>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <LL_ADC_IsEnabled+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_ADC_IsEnabled+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_REG_IsConversionOngoing>:
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b09f      	sub	sp, #124	; 0x7c
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e093      	b.n	8001c16 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001af6:	2300      	movs	r3, #0
 8001af8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001afa:	2300      	movs	r3, #0
 8001afc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a47      	ldr	r2, [pc, #284]	; (8001c20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d102      	bne.n	8001b0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b08:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	e001      	b.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10b      	bne.n	8001b30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e072      	b.n	8001c16 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ffb9 	bl	8001aaa <LL_ADC_REG_IsConversionOngoing>
 8001b38:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ffb3 	bl	8001aaa <LL_ADC_REG_IsConversionOngoing>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d154      	bne.n	8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d151      	bne.n	8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b50:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001b52:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d02c      	beq.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b6e:	035b      	lsls	r3, r3, #13
 8001b70:	430b      	orrs	r3, r1
 8001b72:	431a      	orrs	r2, r3
 8001b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b78:	4829      	ldr	r0, [pc, #164]	; (8001c20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b7a:	f7ff ff83 	bl	8001a84 <LL_ADC_IsEnabled>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4828      	ldr	r0, [pc, #160]	; (8001c24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b82:	f7ff ff7f 	bl	8001a84 <LL_ADC_IsEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	431c      	orrs	r4, r3
 8001b8a:	4828      	ldr	r0, [pc, #160]	; (8001c2c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001b8c:	f7ff ff7a 	bl	8001a84 <LL_ADC_IsEnabled>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4323      	orrs	r3, r4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d137      	bne.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ba0:	f023 030f 	bic.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	6811      	ldr	r1, [r2, #0]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	6892      	ldr	r2, [r2, #8]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001bb4:	e028      	b.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bc2:	4817      	ldr	r0, [pc, #92]	; (8001c20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001bc4:	f7ff ff5e 	bl	8001a84 <LL_ADC_IsEnabled>
 8001bc8:	4604      	mov	r4, r0
 8001bca:	4816      	ldr	r0, [pc, #88]	; (8001c24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001bcc:	f7ff ff5a 	bl	8001a84 <LL_ADC_IsEnabled>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	431c      	orrs	r4, r3
 8001bd4:	4815      	ldr	r0, [pc, #84]	; (8001c2c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001bd6:	f7ff ff55 	bl	8001a84 <LL_ADC_IsEnabled>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d112      	bne.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bea:	f023 030f 	bic.w	r3, r3, #15
 8001bee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001bf0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001bf2:	e009      	b.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf8:	f043 0220 	orr.w	r2, r3, #32
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001c06:	e000      	b.n	8001c0a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001c08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	377c      	adds	r7, #124	; 0x7c
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	50040000 	.word	0x50040000
 8001c24:	50040100 	.word	0x50040100
 8001c28:	50040300 	.word	0x50040300
 8001c2c:	50040200 	.word	0x50040200

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d74:	f7ff ff8e 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff47 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff5c 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff8e 	bl	8001ce8 <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5d 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffb0 	bl	8001d50 <SysTick_Config>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e17f      	b.n	800210c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8171 	beq.w	8002106 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d005      	beq.n	8001e3c <HAL_GPIO_Init+0x40>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0201 	and.w	r2, r3, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d118      	bne.n	8001edc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d017      	beq.n	8001f18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80ac 	beq.w	8002106 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	4a5e      	ldr	r2, [pc, #376]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc6:	4a5a      	ldr	r2, [pc, #360]	; (8002130 <HAL_GPIO_Init+0x334>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ff0:	d025      	beq.n	800203e <HAL_GPIO_Init+0x242>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4f      	ldr	r2, [pc, #316]	; (8002134 <HAL_GPIO_Init+0x338>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <HAL_GPIO_Init+0x23e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4e      	ldr	r2, [pc, #312]	; (8002138 <HAL_GPIO_Init+0x33c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x23a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4d      	ldr	r2, [pc, #308]	; (800213c <HAL_GPIO_Init+0x340>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x236>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x344>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x232>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4b      	ldr	r2, [pc, #300]	; (8002144 <HAL_GPIO_Init+0x348>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x22e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <HAL_GPIO_Init+0x34c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x22a>
 8002022:	2306      	movs	r3, #6
 8002024:	e00c      	b.n	8002040 <HAL_GPIO_Init+0x244>
 8002026:	2307      	movs	r3, #7
 8002028:	e00a      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800202a:	2305      	movs	r3, #5
 800202c:	e008      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800202e:	2304      	movs	r3, #4
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x244>
 8002032:	2303      	movs	r3, #3
 8002034:	e004      	b.n	8002040 <HAL_GPIO_Init+0x244>
 8002036:	2302      	movs	r3, #2
 8002038:	e002      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800203e:	2300      	movs	r3, #0
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	f002 0203 	and.w	r2, r2, #3
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	4093      	lsls	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002050:	4937      	ldr	r1, [pc, #220]	; (8002130 <HAL_GPIO_Init+0x334>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_GPIO_Init+0x350>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002082:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_GPIO_Init+0x350>)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_GPIO_Init+0x350>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <HAL_GPIO_Init+0x350>)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_GPIO_Init+0x350>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_GPIO_Init+0x350>)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_GPIO_Init+0x350>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <HAL_GPIO_Init+0x350>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	f47f ae78 	bne.w	8001e0c <HAL_GPIO_Init+0x10>
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40010000 	.word	0x40010000
 8002134:	48000400 	.word	0x48000400
 8002138:	48000800 	.word	0x48000800
 800213c:	48000c00 	.word	0x48000c00
 8002140:	48001000 	.word	0x48001000
 8002144:	48001400 	.word	0x48001400
 8002148:	48001800 	.word	0x48001800
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800216c:	e002      	b.n	8002174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <HAL_PWREx_GetVoltageRange+0x18>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40007000 	.word	0x40007000

0800219c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021aa:	d130      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b8:	d038      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c2:	4a1e      	ldr	r2, [pc, #120]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2232      	movs	r2, #50	; 0x32
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9b      	lsrs	r3, r3, #18
 80021dc:	3301      	adds	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e0:	e002      	b.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f4:	d102      	bne.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f2      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002208:	d110      	bne.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e00f      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d007      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000
 8002240:	20000000 	.word	0x20000000
 8002244:	431bde83 	.word	0x431bde83

08002248 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e3ca      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	4b97      	ldr	r3, [pc, #604]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002264:	4b94      	ldr	r3, [pc, #592]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80e4 	beq.w	8002444 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_RCC_OscConfig+0x4a>
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	f040 808b 	bne.w	80023a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b01      	cmp	r3, #1
 800228e:	f040 8087 	bne.w	80023a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002292:	4b89      	ldr	r3, [pc, #548]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x62>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e3a2      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	4b82      	ldr	r3, [pc, #520]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_RCC_OscConfig+0x7c>
 80022ba:	4b7f      	ldr	r3, [pc, #508]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c2:	e005      	b.n	80022d0 <HAL_RCC_OscConfig+0x88>
 80022c4:	4b7c      	ldr	r3, [pc, #496]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d223      	bcs.n	800231c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fd55 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e383      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e8:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a72      	ldr	r2, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b70      	ldr	r3, [pc, #448]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	496d      	ldr	r1, [pc, #436]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002306:	4b6c      	ldr	r3, [pc, #432]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	4968      	ldr	r1, [pc, #416]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
 800231a:	e025      	b.n	8002368 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231c:	4b66      	ldr	r3, [pc, #408]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4960      	ldr	r1, [pc, #384]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233a:	4b5f      	ldr	r3, [pc, #380]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	495b      	ldr	r1, [pc, #364]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd15 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e343      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002368:	f000 fc4a 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b52      	ldr	r3, [pc, #328]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	4950      	ldr	r1, [pc, #320]	; (80024bc <HAL_RCC_OscConfig+0x274>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	4a4e      	ldr	r2, [pc, #312]	; (80024c0 <HAL_RCC_OscConfig+0x278>)
 8002386:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002388:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fc4f 	bl	8000c30 <HAL_InitTick>
 8002392:	4603      	mov	r3, r0
 8002394:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d052      	beq.n	8002442 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	e327      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d032      	beq.n	800240e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023a8:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a42      	ldr	r2, [pc, #264]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fc8c 	bl	8000cd0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023bc:	f7fe fc88 	bl	8000cd0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e310      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ce:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4931      	ldr	r1, [pc, #196]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f8:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	492c      	ldr	r1, [pc, #176]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e01a      	b.n	8002444 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800240e:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800241a:	f7fe fc59 	bl	8000cd0 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002422:	f7fe fc55 	bl	8000cd0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e2dd      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x1da>
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002442:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d074      	beq.n	800253a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b08      	cmp	r3, #8
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x21a>
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d10e      	bne.n	800247a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d10b      	bne.n	800247a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d064      	beq.n	8002538 <HAL_RCC_OscConfig+0x2f0>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d160      	bne.n	8002538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e2ba      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x24a>
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e026      	b.n	80024e0 <HAL_RCC_OscConfig+0x298>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_OscConfig+0x280>
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x298>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08004268 	.word	0x08004268
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004
 80024c8:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a9f      	ldr	r2, [pc, #636]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b9d      	ldr	r3, [pc, #628]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a9c      	ldr	r2, [pc, #624]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fbf2 	bl	8000cd0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fbee 	bl	8000cd0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e276      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002502:	4b92      	ldr	r3, [pc, #584]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2a8>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fbde 	bl	8000cd0 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fbda 	bl	8000cd0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e262      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800252a:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x2d0>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d060      	beq.n	8002608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b04      	cmp	r3, #4
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x310>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d119      	bne.n	8002586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d116      	bne.n	8002586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002558:	4b7c      	ldr	r3, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_OscConfig+0x328>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e23f      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	4973      	ldr	r1, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	e040      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258e:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6e      	ldr	r2, [pc, #440]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fb99 	bl	8000cd0 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fb95 	bl	8000cd0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e21d      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b4:	4b65      	ldr	r3, [pc, #404]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	495f      	ldr	r1, [pc, #380]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	e018      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b5d      	ldr	r3, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5c      	ldr	r2, [pc, #368]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fb75 	bl	8000cd0 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7fe fb71 	bl	8000cd0 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1f9      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fc:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d03c      	beq.n	800268e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01c      	beq.n	8002656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	4a4a      	ldr	r2, [pc, #296]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fb50 	bl	8000cd0 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fb4c 	bl	8000cd0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1d4      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ef      	beq.n	8002634 <HAL_RCC_OscConfig+0x3ec>
 8002654:	e01b      	b.n	800268e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265c:	4a3b      	ldr	r2, [pc, #236]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe fb33 	bl	8000cd0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266e:	f7fe fb2f 	bl	8000cd0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1b7      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002680:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ef      	bne.n	800266e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80a6 	beq.w	80027e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	; 0x58
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d118      	bne.n	8002706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d4:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e0:	f7fe faf6 	bl	8000cd0 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7fe faf2 	bl	8000cd0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e17a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d108      	bne.n	8002720 <HAL_RCC_OscConfig+0x4d8>
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271e:	e029      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d115      	bne.n	8002754 <HAL_RCC_OscConfig+0x50c>
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273e:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	4b9c      	ldr	r3, [pc, #624]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	4a9b      	ldr	r2, [pc, #620]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002764:	4b98      	ldr	r3, [pc, #608]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a97      	ldr	r2, [pc, #604]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d016      	beq.n	80027aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe faa8 	bl	8000cd0 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe faa4 	bl	8000cd0 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e12a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279a:	4b8b      	ldr	r3, [pc, #556]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ed      	beq.n	8002784 <HAL_RCC_OscConfig+0x53c>
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7fe fa91 	bl	8000cd0 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe fa8d 	bl	8000cd0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e113      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027c8:	4b7f      	ldr	r3, [pc, #508]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ed      	bne.n	80027b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b7a      	ldr	r3, [pc, #488]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	4a79      	ldr	r2, [pc, #484]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80fe 	beq.w	80029ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	f040 80d0 	bne.w	800299c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027fc:	4b72      	ldr	r3, [pc, #456]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	429a      	cmp	r2, r3
 800280e:	d130      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	3b01      	subs	r3, #1
 800281c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d127      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d11f      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800283c:	2a07      	cmp	r2, #7
 800283e:	bf14      	ite	ne
 8002840:	2201      	movne	r2, #1
 8002842:	2200      	moveq	r2, #0
 8002844:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002846:	4293      	cmp	r3, r2
 8002848:	d113      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d109      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d06e      	beq.n	8002950 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	d069      	beq.n	800294c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0ad      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002894:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a4b      	ldr	r2, [pc, #300]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800289a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a0:	f7fe fa16 	bl	8000cd0 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fa12 	bl	8000cd0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e09a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ba:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c6:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x784>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028d6:	3a01      	subs	r2, #1
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028e0:	0212      	lsls	r2, r2, #8
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028e8:	0852      	lsrs	r2, r2, #1
 80028ea:	3a01      	subs	r2, #1
 80028ec:	0552      	lsls	r2, r2, #21
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028f4:	0852      	lsrs	r2, r2, #1
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0652      	lsls	r2, r2, #25
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002900:	0912      	lsrs	r2, r2, #4
 8002902:	0452      	lsls	r2, r2, #17
 8002904:	430a      	orrs	r2, r1
 8002906:	4930      	ldr	r1, [pc, #192]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002908:	4313      	orrs	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a2a      	ldr	r2, [pc, #168]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002924:	f7fe f9d4 	bl	8000cd0 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe f9d0 	bl	8000cd0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e058      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800294a:	e050      	b.n	80029ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e04f      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d148      	bne.n	80029ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002974:	f7fe f9ac 	bl	8000cd0 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe f9a8 	bl	8000cd0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e030      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x734>
 800299a:	e028      	b.n	80029ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d023      	beq.n	80029ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80029a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe f98f 	bl	8000cd0 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b4:	e00c      	b.n	80029d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe f98b 	bl	8000cd0 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d905      	bls.n	80029d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e013      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
 80029c8:	40021000 	.word	0x40021000
 80029cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_OscConfig+0x7b0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ec      	bne.n	80029b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x7b0>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4905      	ldr	r1, [pc, #20]	; (80029f8 <HAL_RCC_OscConfig+0x7b0>)
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_OscConfig+0x7b4>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	60cb      	str	r3, [r1, #12]
 80029e8:	e001      	b.n	80029ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	feeefffc 	.word	0xfeeefffc

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0e7      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b75      	ldr	r3, [pc, #468]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d910      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4970      	ldr	r1, [pc, #448]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0cf      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d908      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4960      	ldr	r1, [pc, #384]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d04c      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d121      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0a6      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9e:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d115      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e09a      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08e      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e086      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4943      	ldr	r1, [pc, #268]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe f8f2 	bl	8000cd0 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe f8ee 	bl	8000cd0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e06e      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d208      	bcs.n	8002b46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	492b      	ldr	r1, [pc, #172]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d210      	bcs.n	8002b76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 0207 	bic.w	r2, r3, #7
 8002b5c:	4923      	ldr	r1, [pc, #140]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e036      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4918      	ldr	r1, [pc, #96]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4910      	ldr	r1, [pc, #64]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb4:	f000 f824 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	490b      	ldr	r1, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1fc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f829 	bl	8000c30 <HAL_InitTick>
 8002bde:	4603      	mov	r3, r0
 8002be0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002be2:	7afb      	ldrb	r3, [r7, #11]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08004268 	.word	0x08004268
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	20000004 	.word	0x20000004

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c18:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x34>
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d121      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d11e      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c34:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c40:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e005      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c5c:	4a2b      	ldr	r2, [pc, #172]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10d      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	e004      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d134      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d003      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0xac>
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca8:	617b      	str	r3, [r7, #20]
      break;
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cae:	617b      	str	r3, [r7, #20]
      break;
 8002cb0:	e002      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	617b      	str	r3, [r7, #20]
      break;
 8002cb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	fb03 f202 	mul.w	r2, r3, r2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	0e5b      	lsrs	r3, r3, #25
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08004280 	.word	0x08004280
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000000 	.word	0x20000000

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08004278 	.word	0x08004278

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d60:	f7ff ffda 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0adb      	lsrs	r3, r3, #11
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08004278 	.word	0x08004278

08002d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002da0:	f7ff f9ee 	bl	8002180 <HAL_PWREx_GetVoltageRange>
 8002da4:	6178      	str	r0, [r7, #20]
 8002da6:	e014      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	4a24      	ldr	r2, [pc, #144]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	; 0x58
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff f9de 	bl	8002180 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd8:	d10b      	bne.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d919      	bls.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2ba0      	cmp	r3, #160	; 0xa0
 8002de4:	d902      	bls.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de6:	2302      	movs	r3, #2
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	e013      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	e010      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d902      	bls.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002df8:	2303      	movs	r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e00a      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b80      	cmp	r3, #128	; 0x80
 8002e02:	d102      	bne.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e04:	2302      	movs	r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	e004      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d101      	bne.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 0207 	bic.w	r2, r3, #7
 8002e1c:	4909      	ldr	r1, [pc, #36]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40022000 	.word	0x40022000

08002e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e50:	2300      	movs	r3, #0
 8002e52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e54:	2300      	movs	r3, #0
 8002e56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d041      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e6c:	d02a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e72:	d824      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e78:	d008      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e7e:	d81e      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e88:	d010      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e8a:	e018      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e8c:	4b86      	ldr	r3, [pc, #536]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a85      	ldr	r2, [pc, #532]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e98:	e015      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fabb 	bl	800341c <RCCEx_PLLSAI1_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eaa:	e00c      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3320      	adds	r3, #32
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fba6 	bl	8003604 <RCCEx_PLLSAI2_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ecc:	4b76      	ldr	r3, [pc, #472]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eda:	4973      	ldr	r1, [pc, #460]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ee2:	e001      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d041      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002efc:	d02a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002efe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f02:	d824      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f0e:	d81e      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f18:	d010      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f1a:	e018      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f1c:	4b62      	ldr	r3, [pc, #392]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f28:	e015      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fa73 	bl	800341c <RCCEx_PLLSAI1_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3320      	adds	r3, #32
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fb5e 	bl	8003604 <RCCEx_PLLSAI2_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	74fb      	strb	r3, [r7, #19]
      break;
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f5c:	4b52      	ldr	r3, [pc, #328]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f6a:	494f      	ldr	r1, [pc, #316]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f72:	e001      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a0 	beq.w	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f8a:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa0:	4b41      	ldr	r3, [pc, #260]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6593      	str	r3, [r2, #88]	; 0x58
 8002fac:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fc8:	f7fd fe82 	bl	8000cd0 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fce:	e009      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd0:	f7fd fe7e 	bl	8000cd0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	74fb      	strb	r3, [r7, #19]
        break;
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fe4:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ef      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d15c      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003000:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01f      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	d019      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003014:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003040:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fd fe3d 	bl	8000cd0 <HAL_GetTick>
 8003056:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003058:	e00b      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fd fe39 	bl	8000cd0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d902      	bls.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	74fb      	strb	r3, [r7, #19]
            break;
 8003070:	e006      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ec      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10c      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003096:	4904      	ldr	r1, [pc, #16]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800309e:	e009      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	74bb      	strb	r3, [r7, #18]
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b4:	7c7b      	ldrb	r3, [r7, #17]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4b9e      	ldr	r3, [pc, #632]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4a9d      	ldr	r2, [pc, #628]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d2:	4b98      	ldr	r3, [pc, #608]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f023 0203 	bic.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	4994      	ldr	r1, [pc, #592]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f4:	4b8f      	ldr	r3, [pc, #572]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f023 020c 	bic.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	498c      	ldr	r1, [pc, #560]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003116:	4b87      	ldr	r3, [pc, #540]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	4983      	ldr	r1, [pc, #524]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003138:	4b7e      	ldr	r3, [pc, #504]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	497b      	ldr	r1, [pc, #492]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800315a:	4b76      	ldr	r3, [pc, #472]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003168:	4972      	ldr	r1, [pc, #456]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800317c:	4b6d      	ldr	r3, [pc, #436]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	496a      	ldr	r1, [pc, #424]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	4961      	ldr	r1, [pc, #388]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031c0:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	4959      	ldr	r1, [pc, #356]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e2:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f0:	4950      	ldr	r1, [pc, #320]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003204:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	4948      	ldr	r1, [pc, #288]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003226:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	493f      	ldr	r1, [pc, #252]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d028      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003248:	4b3a      	ldr	r3, [pc, #232]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003256:	4937      	ldr	r1, [pc, #220]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003266:	d106      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003272:	60d3      	str	r3, [r2, #12]
 8003274:	e011      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800327e:	d10c      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	2101      	movs	r1, #1
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f8c8 	bl	800341c <RCCEx_PLLSAI1_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d028      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	491f      	ldr	r1, [pc, #124]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c4:	d106      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d0:	60d3      	str	r3, [r2, #12]
 80032d2:	e011      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f899 	bl	800341c <RCCEx_PLLSAI1_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02b      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003312:	4908      	ldr	r1, [pc, #32]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003322:	d109      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a02      	ldr	r2, [pc, #8]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332e:	60d3      	str	r3, [r2, #12]
 8003330:	e014      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	2101      	movs	r1, #1
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f867 	bl	800341c <RCCEx_PLLSAI1_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003352:	7cfb      	ldrb	r3, [r7, #19]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d02f      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003376:	4928      	ldr	r1, [pc, #160]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003386:	d10d      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	2102      	movs	r1, #2
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f844 	bl	800341c <RCCEx_PLLSAI1_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d014      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	74bb      	strb	r3, [r7, #18]
 80033a2:	e011      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3320      	adds	r3, #32
 80033b2:	2102      	movs	r1, #2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f925 	bl	8003604 <RCCEx_PLLSAI2_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	490d      	ldr	r1, [pc, #52]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003406:	4904      	ldr	r1, [pc, #16]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800340e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000

0800341c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800342a:	4b75      	ldr	r3, [pc, #468]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d018      	beq.n	8003468 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003436:	4b72      	ldr	r3, [pc, #456]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0203 	and.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d10d      	bne.n	8003462 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
       ||
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800344e:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
       ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d047      	beq.n	80034f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	e044      	b.n	80034f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d018      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0x86>
 8003470:	2b03      	cmp	r3, #3
 8003472:	d825      	bhi.n	80034c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003474:	2b01      	cmp	r3, #1
 8003476:	d002      	beq.n	800347e <RCCEx_PLLSAI1_Config+0x62>
 8003478:	2b02      	cmp	r3, #2
 800347a:	d009      	beq.n	8003490 <RCCEx_PLLSAI1_Config+0x74>
 800347c:	e020      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800347e:	4b60      	ldr	r3, [pc, #384]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11d      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348e:	e01a      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003490:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d116      	bne.n	80034ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a0:	e013      	b.n	80034ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ae:	4b54      	ldr	r3, [pc, #336]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034be:	e006      	b.n	80034ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      break;
 80034c4:	e004      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034d6:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	430b      	orrs	r3, r1
 80034ec:	4944      	ldr	r1, [pc, #272]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d17d      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034f8:	4b41      	ldr	r3, [pc, #260]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a40      	ldr	r2, [pc, #256]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fd fbe4 	bl	8000cd0 <HAL_GetTick>
 8003508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800350a:	e009      	b.n	8003520 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800350c:	f7fd fbe0 	bl	8000cd0 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d902      	bls.n	8003520 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	73fb      	strb	r3, [r7, #15]
        break;
 800351e:	e005      	b.n	800352c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003520:	4b37      	ldr	r3, [pc, #220]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ef      	bne.n	800350c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d160      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d111      	bne.n	800355c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003538:	4b31      	ldr	r3, [pc, #196]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6892      	ldr	r2, [r2, #8]
 8003548:	0211      	lsls	r1, r2, #8
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68d2      	ldr	r2, [r2, #12]
 800354e:	0912      	lsrs	r2, r2, #4
 8003550:	0452      	lsls	r2, r2, #17
 8003552:	430a      	orrs	r2, r1
 8003554:	492a      	ldr	r1, [pc, #168]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	610b      	str	r3, [r1, #16]
 800355a:	e027      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d112      	bne.n	8003588 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003562:	4b27      	ldr	r3, [pc, #156]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800356a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6892      	ldr	r2, [r2, #8]
 8003572:	0211      	lsls	r1, r2, #8
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6912      	ldr	r2, [r2, #16]
 8003578:	0852      	lsrs	r2, r2, #1
 800357a:	3a01      	subs	r2, #1
 800357c:	0552      	lsls	r2, r2, #21
 800357e:	430a      	orrs	r2, r1
 8003580:	491f      	ldr	r1, [pc, #124]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	610b      	str	r3, [r1, #16]
 8003586:	e011      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003590:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6892      	ldr	r2, [r2, #8]
 8003598:	0211      	lsls	r1, r2, #8
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6952      	ldr	r2, [r2, #20]
 800359e:	0852      	lsrs	r2, r2, #1
 80035a0:	3a01      	subs	r2, #1
 80035a2:	0652      	lsls	r2, r2, #25
 80035a4:	430a      	orrs	r2, r1
 80035a6:	4916      	ldr	r1, [pc, #88]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fd fb8a 	bl	8000cd0 <HAL_GetTick>
 80035bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035be:	e009      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035c0:	f7fd fb86 	bl	8000cd0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d902      	bls.n	80035d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	73fb      	strb	r3, [r7, #15]
          break;
 80035d2:	e005      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ef      	beq.n	80035c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	4904      	ldr	r1, [pc, #16]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000

08003604 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003612:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800361e:	4b67      	ldr	r3, [pc, #412]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0203 	and.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d10d      	bne.n	800364a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
       ||
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003636:	4b61      	ldr	r3, [pc, #388]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
       ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d047      	beq.n	80036da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	e044      	b.n	80036da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d018      	beq.n	800368a <RCCEx_PLLSAI2_Config+0x86>
 8003658:	2b03      	cmp	r3, #3
 800365a:	d825      	bhi.n	80036a8 <RCCEx_PLLSAI2_Config+0xa4>
 800365c:	2b01      	cmp	r3, #1
 800365e:	d002      	beq.n	8003666 <RCCEx_PLLSAI2_Config+0x62>
 8003660:	2b02      	cmp	r3, #2
 8003662:	d009      	beq.n	8003678 <RCCEx_PLLSAI2_Config+0x74>
 8003664:	e020      	b.n	80036a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003666:	4b55      	ldr	r3, [pc, #340]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11d      	bne.n	80036ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003676:	e01a      	b.n	80036ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003678:	4b50      	ldr	r3, [pc, #320]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d116      	bne.n	80036b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003688:	e013      	b.n	80036b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800368a:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003696:	4b49      	ldr	r3, [pc, #292]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036a6:	e006      	b.n	80036b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      break;
 80036ac:	e004      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10d      	bne.n	80036da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036be:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	430b      	orrs	r3, r1
 80036d4:	4939      	ldr	r1, [pc, #228]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d167      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a35      	ldr	r2, [pc, #212]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ec:	f7fd faf0 	bl	8000cd0 <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036f2:	e009      	b.n	8003708 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036f4:	f7fd faec 	bl	8000cd0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d902      	bls.n	8003708 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	73fb      	strb	r3, [r7, #15]
        break;
 8003706:	e005      	b.n	8003714 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1ef      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d14a      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d111      	bne.n	8003744 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6892      	ldr	r2, [r2, #8]
 8003730:	0211      	lsls	r1, r2, #8
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68d2      	ldr	r2, [r2, #12]
 8003736:	0912      	lsrs	r2, r2, #4
 8003738:	0452      	lsls	r2, r2, #17
 800373a:	430a      	orrs	r2, r1
 800373c:	491f      	ldr	r1, [pc, #124]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	4313      	orrs	r3, r2
 8003740:	614b      	str	r3, [r1, #20]
 8003742:	e011      	b.n	8003768 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800374c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6892      	ldr	r2, [r2, #8]
 8003754:	0211      	lsls	r1, r2, #8
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6912      	ldr	r2, [r2, #16]
 800375a:	0852      	lsrs	r2, r2, #1
 800375c:	3a01      	subs	r2, #1
 800375e:	0652      	lsls	r2, r2, #25
 8003760:	430a      	orrs	r2, r1
 8003762:	4916      	ldr	r1, [pc, #88]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003764:	4313      	orrs	r3, r2
 8003766:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a13      	ldr	r2, [pc, #76]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fd faac 	bl	8000cd0 <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800377a:	e009      	b.n	8003790 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800377c:	f7fd faa8 	bl	8000cd0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	73fb      	strb	r3, [r7, #15]
          break;
 800378e:	e005      	b.n	800379c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ef      	beq.n	800377c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4904      	ldr	r1, [pc, #16]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e040      	b.n	8003854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd f942 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fae0 	bl	8003dcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f825 	bl	800385c <UART_SetConfig>
 8003812:	4603      	mov	r3, r0
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e01b      	b.n	8003854 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fb5f 	bl	8003f10 <UART_CheckIdleState>
 8003852:	4603      	mov	r3, r0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800385c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003860:	b08a      	sub	sp, #40	; 0x28
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	431a      	orrs	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4313      	orrs	r3, r2
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4ba4      	ldr	r3, [pc, #656]	; (8003b1c <UART_SetConfig+0x2c0>)
 800388c:	4013      	ands	r3, r2
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003894:	430b      	orrs	r3, r1
 8003896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a99      	ldr	r2, [pc, #612]	; (8003b20 <UART_SetConfig+0x2c4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d004      	beq.n	80038c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	4313      	orrs	r3, r2
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d8:	430a      	orrs	r2, r1
 80038da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a90      	ldr	r2, [pc, #576]	; (8003b24 <UART_SetConfig+0x2c8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d126      	bne.n	8003934 <UART_SetConfig+0xd8>
 80038e6:	4b90      	ldr	r3, [pc, #576]	; (8003b28 <UART_SetConfig+0x2cc>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d81b      	bhi.n	800392c <UART_SetConfig+0xd0>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <UART_SetConfig+0xa0>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	0800390d 	.word	0x0800390d
 8003900:	0800391d 	.word	0x0800391d
 8003904:	08003915 	.word	0x08003915
 8003908:	08003925 	.word	0x08003925
 800390c:	2301      	movs	r3, #1
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003912:	e116      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003914:	2302      	movs	r3, #2
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391a:	e112      	b.n	8003b42 <UART_SetConfig+0x2e6>
 800391c:	2304      	movs	r3, #4
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003922:	e10e      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003924:	2308      	movs	r3, #8
 8003926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392a:	e10a      	b.n	8003b42 <UART_SetConfig+0x2e6>
 800392c:	2310      	movs	r3, #16
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003932:	e106      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a7c      	ldr	r2, [pc, #496]	; (8003b2c <UART_SetConfig+0x2d0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d138      	bne.n	80039b0 <UART_SetConfig+0x154>
 800393e:	4b7a      	ldr	r3, [pc, #488]	; (8003b28 <UART_SetConfig+0x2cc>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b0c      	cmp	r3, #12
 800394a:	d82d      	bhi.n	80039a8 <UART_SetConfig+0x14c>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <UART_SetConfig+0xf8>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003989 	.word	0x08003989
 8003958:	080039a9 	.word	0x080039a9
 800395c:	080039a9 	.word	0x080039a9
 8003960:	080039a9 	.word	0x080039a9
 8003964:	08003999 	.word	0x08003999
 8003968:	080039a9 	.word	0x080039a9
 800396c:	080039a9 	.word	0x080039a9
 8003970:	080039a9 	.word	0x080039a9
 8003974:	08003991 	.word	0x08003991
 8003978:	080039a9 	.word	0x080039a9
 800397c:	080039a9 	.word	0x080039a9
 8003980:	080039a9 	.word	0x080039a9
 8003984:	080039a1 	.word	0x080039a1
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e0d8      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003990:	2302      	movs	r3, #2
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e0d4      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003998:	2304      	movs	r3, #4
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e0d0      	b.n	8003b42 <UART_SetConfig+0x2e6>
 80039a0:	2308      	movs	r3, #8
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e0cc      	b.n	8003b42 <UART_SetConfig+0x2e6>
 80039a8:	2310      	movs	r3, #16
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ae:	e0c8      	b.n	8003b42 <UART_SetConfig+0x2e6>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5e      	ldr	r2, [pc, #376]	; (8003b30 <UART_SetConfig+0x2d4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d125      	bne.n	8003a06 <UART_SetConfig+0x1aa>
 80039ba:	4b5b      	ldr	r3, [pc, #364]	; (8003b28 <UART_SetConfig+0x2cc>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039c4:	2b30      	cmp	r3, #48	; 0x30
 80039c6:	d016      	beq.n	80039f6 <UART_SetConfig+0x19a>
 80039c8:	2b30      	cmp	r3, #48	; 0x30
 80039ca:	d818      	bhi.n	80039fe <UART_SetConfig+0x1a2>
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d00a      	beq.n	80039e6 <UART_SetConfig+0x18a>
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d814      	bhi.n	80039fe <UART_SetConfig+0x1a2>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <UART_SetConfig+0x182>
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d008      	beq.n	80039ee <UART_SetConfig+0x192>
 80039dc:	e00f      	b.n	80039fe <UART_SetConfig+0x1a2>
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e4:	e0ad      	b.n	8003b42 <UART_SetConfig+0x2e6>
 80039e6:	2302      	movs	r3, #2
 80039e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ec:	e0a9      	b.n	8003b42 <UART_SetConfig+0x2e6>
 80039ee:	2304      	movs	r3, #4
 80039f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f4:	e0a5      	b.n	8003b42 <UART_SetConfig+0x2e6>
 80039f6:	2308      	movs	r3, #8
 80039f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fc:	e0a1      	b.n	8003b42 <UART_SetConfig+0x2e6>
 80039fe:	2310      	movs	r3, #16
 8003a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a04:	e09d      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a4a      	ldr	r2, [pc, #296]	; (8003b34 <UART_SetConfig+0x2d8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d125      	bne.n	8003a5c <UART_SetConfig+0x200>
 8003a10:	4b45      	ldr	r3, [pc, #276]	; (8003b28 <UART_SetConfig+0x2cc>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a1c:	d016      	beq.n	8003a4c <UART_SetConfig+0x1f0>
 8003a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a20:	d818      	bhi.n	8003a54 <UART_SetConfig+0x1f8>
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d00a      	beq.n	8003a3c <UART_SetConfig+0x1e0>
 8003a26:	2b80      	cmp	r3, #128	; 0x80
 8003a28:	d814      	bhi.n	8003a54 <UART_SetConfig+0x1f8>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <UART_SetConfig+0x1d8>
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d008      	beq.n	8003a44 <UART_SetConfig+0x1e8>
 8003a32:	e00f      	b.n	8003a54 <UART_SetConfig+0x1f8>
 8003a34:	2300      	movs	r3, #0
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e082      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a42:	e07e      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003a44:	2304      	movs	r3, #4
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4a:	e07a      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a52:	e076      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003a54:	2310      	movs	r3, #16
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5a:	e072      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a35      	ldr	r2, [pc, #212]	; (8003b38 <UART_SetConfig+0x2dc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d12a      	bne.n	8003abc <UART_SetConfig+0x260>
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <UART_SetConfig+0x2cc>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a74:	d01a      	beq.n	8003aac <UART_SetConfig+0x250>
 8003a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7a:	d81b      	bhi.n	8003ab4 <UART_SetConfig+0x258>
 8003a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a80:	d00c      	beq.n	8003a9c <UART_SetConfig+0x240>
 8003a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a86:	d815      	bhi.n	8003ab4 <UART_SetConfig+0x258>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <UART_SetConfig+0x238>
 8003a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a90:	d008      	beq.n	8003aa4 <UART_SetConfig+0x248>
 8003a92:	e00f      	b.n	8003ab4 <UART_SetConfig+0x258>
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e052      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e04e      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e04a      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003aac:	2308      	movs	r3, #8
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e046      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e042      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <UART_SetConfig+0x2c4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d13a      	bne.n	8003b3c <UART_SetConfig+0x2e0>
 8003ac6:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <UART_SetConfig+0x2cc>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ad0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ad4:	d01a      	beq.n	8003b0c <UART_SetConfig+0x2b0>
 8003ad6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ada:	d81b      	bhi.n	8003b14 <UART_SetConfig+0x2b8>
 8003adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae0:	d00c      	beq.n	8003afc <UART_SetConfig+0x2a0>
 8003ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae6:	d815      	bhi.n	8003b14 <UART_SetConfig+0x2b8>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <UART_SetConfig+0x298>
 8003aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af0:	d008      	beq.n	8003b04 <UART_SetConfig+0x2a8>
 8003af2:	e00f      	b.n	8003b14 <UART_SetConfig+0x2b8>
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e022      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e01e      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003b04:	2304      	movs	r3, #4
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e01a      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e016      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e012      	b.n	8003b42 <UART_SetConfig+0x2e6>
 8003b1c:	efff69f3 	.word	0xefff69f3
 8003b20:	40008000 	.word	0x40008000
 8003b24:	40013800 	.word	0x40013800
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40004400 	.word	0x40004400
 8003b30:	40004800 	.word	0x40004800
 8003b34:	40004c00 	.word	0x40004c00
 8003b38:	40005000 	.word	0x40005000
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a9f      	ldr	r2, [pc, #636]	; (8003dc4 <UART_SetConfig+0x568>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d17a      	bne.n	8003c42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d824      	bhi.n	8003b9e <UART_SetConfig+0x342>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x300>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b9f 	.word	0x08003b9f
 8003b64:	08003b89 	.word	0x08003b89
 8003b68:	08003b9f 	.word	0x08003b9f
 8003b6c:	08003b8f 	.word	0x08003b8f
 8003b70:	08003b9f 	.word	0x08003b9f
 8003b74:	08003b9f 	.word	0x08003b9f
 8003b78:	08003b9f 	.word	0x08003b9f
 8003b7c:	08003b97 	.word	0x08003b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7ff f8d6 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003b84:	61f8      	str	r0, [r7, #28]
        break;
 8003b86:	e010      	b.n	8003baa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b88:	4b8f      	ldr	r3, [pc, #572]	; (8003dc8 <UART_SetConfig+0x56c>)
 8003b8a:	61fb      	str	r3, [r7, #28]
        break;
 8003b8c:	e00d      	b.n	8003baa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b8e:	f7ff f837 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8003b92:	61f8      	str	r0, [r7, #28]
        break;
 8003b94:	e009      	b.n	8003baa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9a:	61fb      	str	r3, [r7, #28]
        break;
 8003b9c:	e005      	b.n	8003baa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ba8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80fb 	beq.w	8003da8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d305      	bcc.n	8003bce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d903      	bls.n	8003bd6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bd4:	e0e8      	b.n	8003da8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	461c      	mov	r4, r3
 8003bdc:	4615      	mov	r5, r2
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	022b      	lsls	r3, r5, #8
 8003be8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bec:	0222      	lsls	r2, r4, #8
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	6849      	ldr	r1, [r1, #4]
 8003bf2:	0849      	lsrs	r1, r1, #1
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	4688      	mov	r8, r1
 8003bf8:	4681      	mov	r9, r0
 8003bfa:	eb12 0a08 	adds.w	sl, r2, r8
 8003bfe:	eb43 0b09 	adc.w	fp, r3, r9
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c10:	4650      	mov	r0, sl
 8003c12:	4659      	mov	r1, fp
 8003c14:	f7fc fad8 	bl	80001c8 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c26:	d308      	bcc.n	8003c3a <UART_SetConfig+0x3de>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2e:	d204      	bcs.n	8003c3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	60da      	str	r2, [r3, #12]
 8003c38:	e0b6      	b.n	8003da8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c40:	e0b2      	b.n	8003da8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4a:	d15e      	bne.n	8003d0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d828      	bhi.n	8003ca6 <UART_SetConfig+0x44a>
 8003c54:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <UART_SetConfig+0x400>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c81 	.word	0x08003c81
 8003c60:	08003c89 	.word	0x08003c89
 8003c64:	08003c91 	.word	0x08003c91
 8003c68:	08003ca7 	.word	0x08003ca7
 8003c6c:	08003c97 	.word	0x08003c97
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003ca7 	.word	0x08003ca7
 8003c78:	08003ca7 	.word	0x08003ca7
 8003c7c:	08003c9f 	.word	0x08003c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c80:	f7ff f856 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003c84:	61f8      	str	r0, [r7, #28]
        break;
 8003c86:	e014      	b.n	8003cb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c88:	f7ff f868 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003c8c:	61f8      	str	r0, [r7, #28]
        break;
 8003c8e:	e010      	b.n	8003cb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b4d      	ldr	r3, [pc, #308]	; (8003dc8 <UART_SetConfig+0x56c>)
 8003c92:	61fb      	str	r3, [r7, #28]
        break;
 8003c94:	e00d      	b.n	8003cb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7fe ffb3 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8003c9a:	61f8      	str	r0, [r7, #28]
        break;
 8003c9c:	e009      	b.n	8003cb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca2:	61fb      	str	r3, [r7, #28]
        break;
 8003ca4:	e005      	b.n	8003cb2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d077      	beq.n	8003da8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	005a      	lsls	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d916      	bls.n	8003d02 <UART_SetConfig+0x4a6>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cda:	d212      	bcs.n	8003d02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f023 030f 	bic.w	r3, r3, #15
 8003ce4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	8afb      	ldrh	r3, [r7, #22]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	8afa      	ldrh	r2, [r7, #22]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	e052      	b.n	8003da8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d08:	e04e      	b.n	8003da8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d827      	bhi.n	8003d62 <UART_SetConfig+0x506>
 8003d12:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <UART_SetConfig+0x4bc>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d3d 	.word	0x08003d3d
 8003d1c:	08003d45 	.word	0x08003d45
 8003d20:	08003d4d 	.word	0x08003d4d
 8003d24:	08003d63 	.word	0x08003d63
 8003d28:	08003d53 	.word	0x08003d53
 8003d2c:	08003d63 	.word	0x08003d63
 8003d30:	08003d63 	.word	0x08003d63
 8003d34:	08003d63 	.word	0x08003d63
 8003d38:	08003d5b 	.word	0x08003d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d3c:	f7fe fff8 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003d40:	61f8      	str	r0, [r7, #28]
        break;
 8003d42:	e014      	b.n	8003d6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7ff f80a 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003d48:	61f8      	str	r0, [r7, #28]
        break;
 8003d4a:	e010      	b.n	8003d6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <UART_SetConfig+0x56c>)
 8003d4e:	61fb      	str	r3, [r7, #28]
        break;
 8003d50:	e00d      	b.n	8003d6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d52:	f7fe ff55 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8003d56:	61f8      	str	r0, [r7, #28]
        break;
 8003d58:	e009      	b.n	8003d6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5e:	61fb      	str	r3, [r7, #28]
        break;
 8003d60:	e005      	b.n	8003d6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d019      	beq.n	8003da8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	085a      	lsrs	r2, r3, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b0f      	cmp	r3, #15
 8003d8c:	d909      	bls.n	8003da2 <UART_SetConfig+0x546>
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d205      	bcs.n	8003da2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	e002      	b.n	8003da8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003db4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3728      	adds	r7, #40	; 0x28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40008000 	.word	0x40008000
 8003dc8:	00f42400 	.word	0x00f42400

08003dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eca:	d10a      	bne.n	8003ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b098      	sub	sp, #96	; 0x60
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f20:	f7fc fed6 	bl	8000cd0 <HAL_GetTick>
 8003f24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d12e      	bne.n	8003f92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f88c 	bl	8004060 <UART_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d021      	beq.n	8003f92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f62:	653b      	str	r3, [r7, #80]	; 0x50
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e6      	bne.n	8003f4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e062      	b.n	8004058 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d149      	bne.n	8004034 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f856 	bl	8004060 <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d03c      	beq.n	8004034 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	623b      	str	r3, [r7, #32]
   return(result);
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e6      	bne.n	8003fba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3308      	adds	r3, #8
 800400a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800400c:	61fa      	str	r2, [r7, #28]
 800400e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	69b9      	ldr	r1, [r7, #24]
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	617b      	str	r3, [r7, #20]
   return(result);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e011      	b.n	8004058 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3758      	adds	r7, #88	; 0x58
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004070:	e049      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004078:	d045      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fc fe29 	bl	8000cd0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <UART_WaitOnFlagUntilTimeout+0x30>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e048      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d031      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d110      	bne.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2208      	movs	r2, #8
 80040b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f838 	bl	800412e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2208      	movs	r2, #8
 80040c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e029      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e0:	d111      	bne.n	8004106 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f81e 	bl	800412e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e00f      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d0a6      	beq.n	8004072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800412e:	b480      	push	{r7}
 8004130:	b095      	sub	sp, #84	; 0x54
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004154:	643b      	str	r3, [r7, #64]	; 0x40
 8004156:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800415a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e6      	bne.n	8004136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3308      	adds	r3, #8
 800416e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	61fb      	str	r3, [r7, #28]
   return(result);
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3308      	adds	r3, #8
 8004186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004188:	62fa      	str	r2, [r7, #44]	; 0x2c
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e5      	bne.n	8004168 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d118      	bne.n	80041d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f023 0310 	bic.w	r3, r3, #16
 80041b8:	647b      	str	r3, [r7, #68]	; 0x44
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6979      	ldr	r1, [r7, #20]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	613b      	str	r3, [r7, #16]
   return(result);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e6      	bne.n	80041a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80041ea:	bf00      	nop
 80041ec:	3754      	adds	r7, #84	; 0x54
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <memset>:
 80041f6:	4402      	add	r2, r0
 80041f8:	4603      	mov	r3, r0
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d100      	bne.n	8004200 <memset+0xa>
 80041fe:	4770      	bx	lr
 8004200:	f803 1b01 	strb.w	r1, [r3], #1
 8004204:	e7f9      	b.n	80041fa <memset+0x4>
	...

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4d0d      	ldr	r5, [pc, #52]	; (8004240 <__libc_init_array+0x38>)
 800420c:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 800420e:	1b64      	subs	r4, r4, r5
 8004210:	10a4      	asrs	r4, r4, #2
 8004212:	2600      	movs	r6, #0
 8004214:	42a6      	cmp	r6, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	4d0b      	ldr	r5, [pc, #44]	; (8004248 <__libc_init_array+0x40>)
 800421a:	4c0c      	ldr	r4, [pc, #48]	; (800424c <__libc_init_array+0x44>)
 800421c:	f000 f818 	bl	8004250 <_init>
 8004220:	1b64      	subs	r4, r4, r5
 8004222:	10a4      	asrs	r4, r4, #2
 8004224:	2600      	movs	r6, #0
 8004226:	42a6      	cmp	r6, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004230:	4798      	blx	r3
 8004232:	3601      	adds	r6, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	f855 3b04 	ldr.w	r3, [r5], #4
 800423a:	4798      	blx	r3
 800423c:	3601      	adds	r6, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	080042b8 	.word	0x080042b8
 8004244:	080042b8 	.word	0x080042b8
 8004248:	080042b8 	.word	0x080042b8
 800424c:	080042bc 	.word	0x080042bc

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
