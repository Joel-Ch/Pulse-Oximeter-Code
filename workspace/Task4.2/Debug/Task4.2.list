
Task4.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013080  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a2a8  0801a2a8  0003005c  2**0
                  CONTENTS
  4 .ARM          00000008  0801a2a8  0801a2a8  0002a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a2b0  0801a2b0  0003005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a2b0  0801a2b0  0002a2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a2b4  0801a2b4  0002a2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801a2b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c288  2000005c  0801a314  0003005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c2e4  0801a314  0003c2e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e48  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f0e  00000000  00000000  00047f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  0004aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009bd  00000000  00000000  0004bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027acf  00000000  00000000  0004c63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011280  00000000  00000000  0007410c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcaa8  00000000  00000000  0008538c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ef4  00000000  00000000  00181e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00185d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000038a2  00000000  00000000  00185d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000198  00000000  00000000  00189622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007210 	.word	0x08007210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007210 	.word	0x08007210

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000900:	f000 b970 	b.w	8000be4 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9e08      	ldr	r6, [sp, #32]
 8000922:	460d      	mov	r5, r1
 8000924:	4604      	mov	r4, r0
 8000926:	460f      	mov	r7, r1
 8000928:	2b00      	cmp	r3, #0
 800092a:	d14a      	bne.n	80009c2 <__udivmoddi4+0xa6>
 800092c:	428a      	cmp	r2, r1
 800092e:	4694      	mov	ip, r2
 8000930:	d965      	bls.n	80009fe <__udivmoddi4+0xe2>
 8000932:	fab2 f382 	clz	r3, r2
 8000936:	b143      	cbz	r3, 800094a <__udivmoddi4+0x2e>
 8000938:	fa02 fc03 	lsl.w	ip, r2, r3
 800093c:	f1c3 0220 	rsb	r2, r3, #32
 8000940:	409f      	lsls	r7, r3
 8000942:	fa20 f202 	lsr.w	r2, r0, r2
 8000946:	4317      	orrs	r7, r2
 8000948:	409c      	lsls	r4, r3
 800094a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800094e:	fa1f f58c 	uxth.w	r5, ip
 8000952:	fbb7 f1fe 	udiv	r1, r7, lr
 8000956:	0c22      	lsrs	r2, r4, #16
 8000958:	fb0e 7711 	mls	r7, lr, r1, r7
 800095c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000960:	fb01 f005 	mul.w	r0, r1, r5
 8000964:	4290      	cmp	r0, r2
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x62>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000970:	f080 811c 	bcs.w	8000bac <__udivmoddi4+0x290>
 8000974:	4290      	cmp	r0, r2
 8000976:	f240 8119 	bls.w	8000bac <__udivmoddi4+0x290>
 800097a:	3902      	subs	r1, #2
 800097c:	4462      	add	r2, ip
 800097e:	1a12      	subs	r2, r2, r0
 8000980:	b2a4      	uxth	r4, r4
 8000982:	fbb2 f0fe 	udiv	r0, r2, lr
 8000986:	fb0e 2210 	mls	r2, lr, r0, r2
 800098a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800098e:	fb00 f505 	mul.w	r5, r0, r5
 8000992:	42a5      	cmp	r5, r4
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x90>
 8000996:	eb1c 0404 	adds.w	r4, ip, r4
 800099a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800099e:	f080 8107 	bcs.w	8000bb0 <__udivmoddi4+0x294>
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	f240 8104 	bls.w	8000bb0 <__udivmoddi4+0x294>
 80009a8:	4464      	add	r4, ip
 80009aa:	3802      	subs	r0, #2
 80009ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	2100      	movs	r1, #0
 80009b4:	b11e      	cbz	r6, 80009be <__udivmoddi4+0xa2>
 80009b6:	40dc      	lsrs	r4, r3
 80009b8:	2300      	movs	r3, #0
 80009ba:	e9c6 4300 	strd	r4, r3, [r6]
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0xbc>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f000 80ed 	beq.w	8000ba6 <__udivmoddi4+0x28a>
 80009cc:	2100      	movs	r1, #0
 80009ce:	e9c6 0500 	strd	r0, r5, [r6]
 80009d2:	4608      	mov	r0, r1
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	fab3 f183 	clz	r1, r3
 80009dc:	2900      	cmp	r1, #0
 80009de:	d149      	bne.n	8000a74 <__udivmoddi4+0x158>
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	d302      	bcc.n	80009ea <__udivmoddi4+0xce>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	f200 80f8 	bhi.w	8000bda <__udivmoddi4+0x2be>
 80009ea:	1a84      	subs	r4, r0, r2
 80009ec:	eb65 0203 	sbc.w	r2, r5, r3
 80009f0:	2001      	movs	r0, #1
 80009f2:	4617      	mov	r7, r2
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d0e2      	beq.n	80009be <__udivmoddi4+0xa2>
 80009f8:	e9c6 4700 	strd	r4, r7, [r6]
 80009fc:	e7df      	b.n	80009be <__udivmoddi4+0xa2>
 80009fe:	b902      	cbnz	r2, 8000a02 <__udivmoddi4+0xe6>
 8000a00:	deff      	udf	#255	; 0xff
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 8090 	bne.w	8000b2c <__udivmoddi4+0x210>
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	2101      	movs	r1, #1
 8000a18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a20:	0c22      	lsrs	r2, r4, #16
 8000a22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a26:	fb0e f005 	mul.w	r0, lr, r5
 8000a2a:	4290      	cmp	r0, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x124>
 8000a2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a32:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0x122>
 8000a38:	4290      	cmp	r0, r2
 8000a3a:	f200 80cb 	bhi.w	8000bd4 <__udivmoddi4+0x2b8>
 8000a3e:	4645      	mov	r5, r8
 8000a40:	1a12      	subs	r2, r2, r0
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a48:	fb07 2210 	mls	r2, r7, r0, r2
 8000a4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a50:	fb0e fe00 	mul.w	lr, lr, r0
 8000a54:	45a6      	cmp	lr, r4
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x14e>
 8000a58:	eb1c 0404 	adds.w	r4, ip, r4
 8000a5c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a60:	d202      	bcs.n	8000a68 <__udivmoddi4+0x14c>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f200 80bb 	bhi.w	8000bde <__udivmoddi4+0x2c2>
 8000a68:	4610      	mov	r0, r2
 8000a6a:	eba4 040e 	sub.w	r4, r4, lr
 8000a6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a72:	e79f      	b.n	80009b4 <__udivmoddi4+0x98>
 8000a74:	f1c1 0720 	rsb	r7, r1, #32
 8000a78:	408b      	lsls	r3, r1
 8000a7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a82:	fa05 f401 	lsl.w	r4, r5, r1
 8000a86:	fa20 f307 	lsr.w	r3, r0, r7
 8000a8a:	40fd      	lsrs	r5, r7
 8000a8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a90:	4323      	orrs	r3, r4
 8000a92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a96:	fa1f fe8c 	uxth.w	lr, ip
 8000a9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a9e:	0c1c      	lsrs	r4, r3, #16
 8000aa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa4:	fb08 f50e 	mul.w	r5, r8, lr
 8000aa8:	42a5      	cmp	r5, r4
 8000aaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000aae:	fa00 f001 	lsl.w	r0, r0, r1
 8000ab2:	d90b      	bls.n	8000acc <__udivmoddi4+0x1b0>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000abc:	f080 8088 	bcs.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac0:	42a5      	cmp	r5, r4
 8000ac2:	f240 8085 	bls.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aca:	4464      	add	r4, ip
 8000acc:	1b64      	subs	r4, r4, r5
 8000ace:	b29d      	uxth	r5, r3
 8000ad0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ad4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ad8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000adc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x1da>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000aec:	d26c      	bcs.n	8000bc8 <__udivmoddi4+0x2ac>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	d96a      	bls.n	8000bc8 <__udivmoddi4+0x2ac>
 8000af2:	3b02      	subs	r3, #2
 8000af4:	4464      	add	r4, ip
 8000af6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000afa:	fba3 9502 	umull	r9, r5, r3, r2
 8000afe:	eba4 040e 	sub.w	r4, r4, lr
 8000b02:	42ac      	cmp	r4, r5
 8000b04:	46c8      	mov	r8, r9
 8000b06:	46ae      	mov	lr, r5
 8000b08:	d356      	bcc.n	8000bb8 <__udivmoddi4+0x29c>
 8000b0a:	d053      	beq.n	8000bb4 <__udivmoddi4+0x298>
 8000b0c:	b156      	cbz	r6, 8000b24 <__udivmoddi4+0x208>
 8000b0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b12:	eb64 040e 	sbc.w	r4, r4, lr
 8000b16:	fa04 f707 	lsl.w	r7, r4, r7
 8000b1a:	40ca      	lsrs	r2, r1
 8000b1c:	40cc      	lsrs	r4, r1
 8000b1e:	4317      	orrs	r7, r2
 8000b20:	e9c6 7400 	strd	r7, r4, [r6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2c:	f1c3 0120 	rsb	r1, r3, #32
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	fa20 f201 	lsr.w	r2, r0, r1
 8000b38:	fa25 f101 	lsr.w	r1, r5, r1
 8000b3c:	409d      	lsls	r5, r3
 8000b3e:	432a      	orrs	r2, r5
 8000b40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b44:	fa1f fe8c 	uxth.w	lr, ip
 8000b48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b50:	0c11      	lsrs	r1, r2, #16
 8000b52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b56:	fb00 f50e 	mul.w	r5, r0, lr
 8000b5a:	428d      	cmp	r5, r1
 8000b5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x258>
 8000b62:	eb1c 0101 	adds.w	r1, ip, r1
 8000b66:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b6a:	d22f      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b6c:	428d      	cmp	r5, r1
 8000b6e:	d92d      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000b70:	3802      	subs	r0, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	1b49      	subs	r1, r1, r5
 8000b76:	b292      	uxth	r2, r2
 8000b78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b84:	fb05 f10e 	mul.w	r1, r5, lr
 8000b88:	4291      	cmp	r1, r2
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x282>
 8000b8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b90:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b94:	d216      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b96:	4291      	cmp	r1, r2
 8000b98:	d914      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b9a:	3d02      	subs	r5, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a52      	subs	r2, r2, r1
 8000ba0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ba4:	e738      	b.n	8000a18 <__udivmoddi4+0xfc>
 8000ba6:	4631      	mov	r1, r6
 8000ba8:	4630      	mov	r0, r6
 8000baa:	e708      	b.n	80009be <__udivmoddi4+0xa2>
 8000bac:	4639      	mov	r1, r7
 8000bae:	e6e6      	b.n	800097e <__udivmoddi4+0x62>
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	e6fb      	b.n	80009ac <__udivmoddi4+0x90>
 8000bb4:	4548      	cmp	r0, r9
 8000bb6:	d2a9      	bcs.n	8000b0c <__udivmoddi4+0x1f0>
 8000bb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	e7a3      	b.n	8000b0c <__udivmoddi4+0x1f0>
 8000bc4:	4645      	mov	r5, r8
 8000bc6:	e7ea      	b.n	8000b9e <__udivmoddi4+0x282>
 8000bc8:	462b      	mov	r3, r5
 8000bca:	e794      	b.n	8000af6 <__udivmoddi4+0x1da>
 8000bcc:	4640      	mov	r0, r8
 8000bce:	e7d1      	b.n	8000b74 <__udivmoddi4+0x258>
 8000bd0:	46d0      	mov	r8, sl
 8000bd2:	e77b      	b.n	8000acc <__udivmoddi4+0x1b0>
 8000bd4:	3d02      	subs	r5, #2
 8000bd6:	4462      	add	r2, ip
 8000bd8:	e732      	b.n	8000a40 <__udivmoddi4+0x124>
 8000bda:	4608      	mov	r0, r1
 8000bdc:	e70a      	b.n	80009f4 <__udivmoddi4+0xd8>
 8000bde:	4464      	add	r4, ip
 8000be0:	3802      	subs	r0, #2
 8000be2:	e742      	b.n	8000a6a <__udivmoddi4+0x14e>

08000be4 <__aeabi_idiv0>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <main>:

*/

int main(void)

{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0a4      	sub	sp, #144	; 0x90
 8000bec:	af00      	add	r7, sp, #0
char uartTxBuffer1[100];  // Buffer for UART transmission


arm_rfft_fast_instance_f32 fft_instance;

uint32_t adcIndex = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
/* MCU Configuration--------------------------------------------------------*/


/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

HAL_Init();
 8000bf4:	f000 fc52 	bl	800149c <HAL_Init>
/* USER CODE END Init */


/* Configure the system clock */

SystemClock_Config();
 8000bf8:	f000 f918 	bl	8000e2c <SystemClock_Config>
/* USER CODE END SysInit */


/* Initialize all configured peripherals */

MX_GPIO_Init();
 8000bfc:	f000 fa2c 	bl	8001058 <MX_GPIO_Init>

MX_DMA_Init();
 8000c00:	f000 fa0c 	bl	800101c <MX_DMA_Init>

MX_USART2_UART_Init();
 8000c04:	f000 f9da 	bl	8000fbc <MX_USART2_UART_Init>

MX_ADC1_Init();
 8000c08:	f000 f962 	bl	8000ed0 <MX_ADC1_Init>

/* USER CODE BEGIN 2 */

HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c0c:	217f      	movs	r1, #127	; 0x7f
 8000c0e:	4874      	ldr	r0, [pc, #464]	; (8000de0 <main+0x1f8>)
 8000c10:	f002 f820 	bl	8002c54 <HAL_ADCEx_Calibration_Start>

//HAL_ADC_Start_DMA(&hadc1,(float32_t*)&adcData,256);

kai[0]=111;
 8000c14:	4b73      	ldr	r3, [pc, #460]	; (8000de4 <main+0x1fc>)
 8000c16:	4a74      	ldr	r2, [pc, #464]	; (8000de8 <main+0x200>)
 8000c18:	601a      	str	r2, [r3, #0]

samplingfrequency = 1000;
 8000c1a:	4b74      	ldr	r3, [pc, #464]	; (8000dec <main+0x204>)
 8000c1c:	4a74      	ldr	r2, [pc, #464]	; (8000df0 <main+0x208>)
 8000c1e:	601a      	str	r2, [r3, #0]


//-----------------------------------FFT-----------------------------------------------


arm_rfft_fast_init_f32(&fft_instance,FFT_SIZE);
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c26:	4618      	mov	r0, r3
 8000c28:	f004 fd86 	bl	8005738 <arm_rfft_fast_init_f32>

while (1)

{

for (int i=0; i<FFT_SIZE;i++){
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000c32:	e033      	b.n	8000c9c <main+0xb4>


HAL_ADC_Start(&hadc1);
 8000c34:	486a      	ldr	r0, [pc, #424]	; (8000de0 <main+0x1f8>)
 8000c36:	f001 f853 	bl	8001ce0 <HAL_ADC_Start>

HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c3e:	4868      	ldr	r0, [pc, #416]	; (8000de0 <main+0x1f8>)
 8000c40:	f001 f93c 	bl	8001ebc <HAL_ADC_PollForConversion>

value_adc1=HAL_ADC_GetValue(&hadc1);
 8000c44:	4866      	ldr	r0, [pc, #408]	; (8000de0 <main+0x1f8>)
 8000c46:	f001 fa11 	bl	800206c <HAL_ADC_GetValue>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a69      	ldr	r2, [pc, #420]	; (8000df4 <main+0x20c>)
 8000c4e:	6013      	str	r3, [r2, #0]


HAL_ADC_Stop(&hadc1);
 8000c50:	4863      	ldr	r0, [pc, #396]	; (8000de0 <main+0x1f8>)
 8000c52:	f001 f8ff 	bl	8001e54 <HAL_ADC_Stop>


adcData[i] = (float)(3.3/4095)*value_adc1;
 8000c56:	4b67      	ldr	r3, [pc, #412]	; (8000df4 <main+0x20c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c62:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000df8 <main+0x210>
 8000c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c6a:	4a64      	ldr	r2, [pc, #400]	; (8000dfc <main+0x214>)
 8000c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	edc3 7a00 	vstr	s15, [r3]

HAL_Delay(1000/samplingfrequency);
 8000c78:	4b5c      	ldr	r3, [pc, #368]	; (8000dec <main+0x204>)
 8000c7a:	ed93 7a00 	vldr	s14, [r3]
 8000c7e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8000e00 <main+0x218>
 8000c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c8a:	ee17 0a90 	vmov	r0, s15
 8000c8e:	f000 fc81 	bl	8001594 <HAL_Delay>
for (int i=0; i<FFT_SIZE;i++){
 8000c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c96:	3301      	adds	r3, #1
 8000c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ca4:	dbc6      	blt.n	8000c34 <main+0x4c>



}

arm_rfft_fast_f32(&fft_instance, adcData, FFTResults,0);
 8000ca6:	1d38      	adds	r0, r7, #4
 8000ca8:	2300      	movs	r3, #0
 8000caa:	4a56      	ldr	r2, [pc, #344]	; (8000e04 <main+0x21c>)
 8000cac:	4953      	ldr	r1, [pc, #332]	; (8000dfc <main+0x214>)
 8000cae:	f004 fe27 	bl	8005900 <arm_rfft_fast_f32>

arm_cmplx_mag_f32(FFTResults, FFTResultsR, FFT_SIZE/2);
 8000cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb6:	4954      	ldr	r1, [pc, #336]	; (8000e08 <main+0x220>)
 8000cb8:	4852      	ldr	r0, [pc, #328]	; (8000e04 <main+0x21c>)
 8000cba:	f005 f9ff 	bl	80060bc <arm_cmplx_mag_f32>

FFTResultsMAX =0;
 8000cbe:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <main+0x224>)
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]

signalfrequency=0;
 8000cc6:	4b52      	ldr	r3, [pc, #328]	; (8000e10 <main+0x228>)
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]


for ( int j = 1; j < FFT_SIZE/2; j++) {
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000cd4:	e061      	b.n	8000d9a <main+0x1b2>

if (FFTResultsR[j] > FFTResultsMAX) {
 8000cd6:	4a4c      	ldr	r2, [pc, #304]	; (8000e08 <main+0x220>)
 8000cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	ed93 7a00 	vldr	s14, [r3]
 8000ce4:	4b49      	ldr	r3, [pc, #292]	; (8000e0c <main+0x224>)
 8000ce6:	edd3 7a00 	vldr	s15, [r3]
 8000cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf2:	dd4d      	ble.n	8000d90 <main+0x1a8>

FFTResultsMAX = FFTResultsR[j];
 8000cf4:	4a44      	ldr	r2, [pc, #272]	; (8000e08 <main+0x220>)
 8000cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a42      	ldr	r2, [pc, #264]	; (8000e0c <main+0x224>)
 8000d02:	6013      	str	r3, [r2, #0]

int indexMax = j;
 8000d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

signalfrequency=((float32_t)j*samplingfrequency)/(2*FFT_SIZE);
 8000d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <main+0x204>)
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d22:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000e14 <main+0x22c>
 8000d26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d2a:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <main+0x228>)
 8000d2c:	edc3 7a00 	vstr	s15, [r3]

dominantfrequency = ((float32_t) indexMax * samplingfrequency / FFT_SIZE) / 2;
 8000d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d34:	ee07 3a90 	vmov	s15, r3
 8000d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <main+0x204>)
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d46:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000e18 <main+0x230>
 8000d4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <main+0x234>)
 8000d58:	edc3 7a00 	vstr	s15, [r3]


sprintf(uartTxBuffer1, "Signal frequency is: %.2f\r\n", signalfrequency);
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <main+0x228>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fd1b 	bl	800079c <__aeabi_f2d>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	f107 001c 	add.w	r0, r7, #28
 8000d6e:	492c      	ldr	r1, [pc, #176]	; (8000e20 <main+0x238>)
 8000d70:	f005 fdaa 	bl	80068c8 <siprintf>

HAL_UART_Transmit(&huart2, (uint8_t*)uartTxBuffer1, strlen(uartTxBuffer1), HAL_MAX_DELAY);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fa29 	bl	80001d0 <strlen>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	f107 011c 	add.w	r1, r7, #28
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8a:	4826      	ldr	r0, [pc, #152]	; (8000e24 <main+0x23c>)
 8000d8c:	f003 feb4 	bl	8004af8 <HAL_UART_Transmit>
for ( int j = 1; j < FFT_SIZE/2; j++) {
 8000d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d94:	3301      	adds	r3, #1
 8000d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000da2:	db98      	blt.n	8000cd6 <main+0xee>

//arm_rfft_f32(adcData, FFTResultsR, FFTResultsI);



Voltage = (3.3/4095)*value_adc1;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <main+0x20c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fcd5 	bl	8000758 <__aeabi_ui2d>
 8000dae:	a30a      	add	r3, pc, #40	; (adr r3, 8000dd8 <main+0x1f0>)
 8000db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db4:	f7ff fa64 	bl	8000280 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f7ff fd44 	bl	800084c <__aeabi_d2f>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <main+0x240>)
 8000dc8:	6013      	str	r3, [r2, #0]
//sprintf(uartTxBuffer2, "ADC2 Value is: %hu\r\n", value_adc2);

//HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer2, strlen(uartTxBuffer2), HAL_MAX_DELAY);


HAL_Delay(100);
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f000 fbe2 	bl	8001594 <HAL_Delay>
for (int i=0; i<FFT_SIZE;i++){
 8000dd0:	e72c      	b.n	8000c2c <main+0x44>
 8000dd2:	bf00      	nop
 8000dd4:	f3af 8000 	nop.w
 8000dd8:	e734d9b4 	.word	0xe734d9b4
 8000ddc:	3f4a680c 	.word	0x3f4a680c
 8000de0:	20000078 	.word	0x20000078
 8000de4:	2000416c 	.word	0x2000416c
 8000de8:	42de0000 	.word	0x42de0000
 8000dec:	20004184 	.word	0x20004184
 8000df0:	447a0000 	.word	0x447a0000
 8000df4:	20000164 	.word	0x20000164
 8000df8:	3a534067 	.word	0x3a534067
 8000dfc:	20000168 	.word	0x20000168
 8000e00:	447a0000 	.word	0x447a0000
 8000e04:	2000418c 	.word	0x2000418c
 8000e08:	2000818c 	.word	0x2000818c
 8000e0c:	20004180 	.word	0x20004180
 8000e10:	20004188 	.word	0x20004188
 8000e14:	46000000 	.word	0x46000000
 8000e18:	45800000 	.word	0x45800000
 8000e1c:	2000c18c 	.word	0x2000c18c
 8000e20:	08007228 	.word	0x08007228
 8000e24:	200000dc 	.word	0x200000dc
 8000e28:	20004168 	.word	0x20004168

08000e2c <SystemClock_Config>:

*/

void SystemClock_Config(void)

{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	; 0x58
 8000e30:	af00      	add	r7, sp, #0

RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2244      	movs	r2, #68	; 0x44
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f005 fd64 	bl	8006908 <memset>

RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

/** Configure the main internal regulator output voltage

*/

if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e52:	f002 faf1 	bl	8003438 <HAL_PWREx_ControlVoltageScaling>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x34>

{

Error_Handler();
 8000e5c:	f000 f962 	bl	8001124 <Error_Handler>

* in the RCC_OscInitTypeDef structure.

*/

RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	617b      	str	r3, [r7, #20]

RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e68:	623b      	str	r3, [r7, #32]

RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24

RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	63fb      	str	r3, [r7, #60]	; 0x3c

RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	643b      	str	r3, [r7, #64]	; 0x40

RCC_OscInitStruct.PLL.PLLM = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	647b      	str	r3, [r7, #68]	; 0x44

RCC_OscInitStruct.PLL.PLLN = 10;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	64bb      	str	r3, [r7, #72]	; 0x48

RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	64fb      	str	r3, [r7, #76]	; 0x4c

RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	653b      	str	r3, [r7, #80]	; 0x50

RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	657b      	str	r3, [r7, #84]	; 0x54

if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fb28 	bl	80034e4 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x72>

{

Error_Handler();
 8000e9a:	f000 f943 	bl	8001124 <Error_Handler>

/** Initializes the CPU, AHB and APB buses clocks

*/

RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	603b      	str	r3, [r7, #0]

|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;

RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	607b      	str	r3, [r7, #4]

RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]

RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]

RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]


if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fef0 	bl	8003c9c <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x9a>

{

Error_Handler();
 8000ec2:	f000 f92f 	bl	8001124 <Error_Handler>

}

}
 8000ec6:	bf00      	nop
 8000ec8:	3758      	adds	r7, #88	; 0x58
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <MX_ADC1_Init>:

*/

static void MX_ADC1_Init(void)

{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0


/* USER CODE END ADC1_Init 0 */


ADC_MultiModeTypeDef multimode = {0};
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]

ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]

/** Common config

*/

hadc1.Instance = ADC1;
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000ef4:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000ef6:	601a      	str	r2, [r3, #0]

hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]

hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]

hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]

hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]

hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f12:	2204      	movs	r2, #4
 8000f14:	615a      	str	r2, [r3, #20]

hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	761a      	strb	r2, [r3, #24]

hadc1.Init.ContinuousConvMode = ENABLE;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	765a      	strb	r2, [r3, #25]

hadc1.Init.NbrOfConversion = 1;
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	61da      	str	r2, [r3, #28]

hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]

hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28

hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c

hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34

hadc1.Init.OversamplingMode = DISABLE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f52:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f54:	f000 fd74 	bl	8001a40 <HAL_ADC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x92>

{

Error_Handler();
 8000f5e:	f000 f8e1 	bl	8001124 <Error_Handler>

/** Configure the ADC multi-mode

*/

multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]

if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f6e:	f001 fed1 	bl	8002d14 <HAL_ADCEx_MultiModeConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC1_Init+0xac>

{

Error_Handler();
 8000f78:	f000 f8d4 	bl	8001124 <Error_Handler>

/** Configure Regular Channel

*/

sConfig.Channel = ADC_CHANNEL_5;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f7e:	607b      	str	r3, [r7, #4]

sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f80:	2306      	movs	r3, #6
 8000f82:	60bb      	str	r3, [r7, #8]

sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000f84:	2305      	movs	r3, #5
 8000f86:	60fb      	str	r3, [r7, #12]

sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f88:	237f      	movs	r3, #127	; 0x7f
 8000f8a:	613b      	str	r3, [r7, #16]

sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	617b      	str	r3, [r7, #20]

sConfig.Offset = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]

if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f9a:	f001 f875 	bl	8002088 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0xd8>

{

Error_Handler();
 8000fa4:	f000 f8be 	bl	8001124 <Error_Handler>


/* USER CODE END ADC1_Init 2 */


}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000078 	.word	0x20000078
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	14f00020 	.word	0x14f00020

08000fbc <MX_USART2_UART_Init>:

*/

static void MX_USART2_UART_Init(void)

{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USART2_Init 1 */


/* USER CODE END USART2_Init 1 */

huart2.Instance = USART2;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fc4:	601a      	str	r2, [r3, #0]

huart2.Init.BaudRate = 115200;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fcc:	605a      	str	r2, [r3, #4]

huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]

huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]

huart2.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]

huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]

huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]

huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]

huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]

huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24

if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8001000:	f003 fd2c 	bl	8004a5c <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART2_UART_Init+0x52>

{

Error_Handler();
 800100a:	f000 f88b 	bl	8001124 <Error_Handler>


/* USER CODE END USART2_Init 2 */


}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000dc 	.word	0x200000dc
 8001018:	40004400 	.word	0x40004400

0800101c <MX_DMA_Init>:

*/

static void MX_DMA_Init(void)

{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0


/* DMA controller clock enable */

__HAL_RCC_DMA1_CLK_ENABLE();
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_DMA_Init+0x38>)
 8001024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <MX_DMA_Init+0x38>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6493      	str	r3, [r2, #72]	; 0x48
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_DMA_Init+0x38>)
 8001030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

/* DMA interrupt init */

/* DMA1_Channel1_IRQn interrupt configuration */

HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	200b      	movs	r0, #11
 8001040:	f001 fff3 	bl	800302a <HAL_NVIC_SetPriority>

HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001044:	200b      	movs	r0, #11
 8001046:	f002 f80c 	bl	8003062 <HAL_NVIC_EnableIRQ>


}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <MX_GPIO_Init>:

*/

static void MX_GPIO_Init(void)

{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0

GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */


/* GPIO Ports Clock Enable */

__HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <MX_GPIO_Init+0xc4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a2a      	ldr	r2, [pc, #168]	; (800111c <MX_GPIO_Init+0xc4>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_GPIO_Init+0xc4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

__HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_GPIO_Init+0xc4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a24      	ldr	r2, [pc, #144]	; (800111c <MX_GPIO_Init+0xc4>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <MX_GPIO_Init+0xc4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

__HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_GPIO_Init+0xc4>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a1e      	ldr	r2, [pc, #120]	; (800111c <MX_GPIO_Init+0xc4>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_GPIO_Init+0xc4>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]

__HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_GPIO_Init+0xc4>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <MX_GPIO_Init+0xc4>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_GPIO_Init+0xc4>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]


/*Configure GPIO pin Output Level */

HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2120      	movs	r1, #32
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f002 f989 	bl	80033ec <HAL_GPIO_WritePin>


/*Configure GPIO pin : B1_Pin */

GPIO_InitStruct.Pin = B1_Pin;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	617b      	str	r3, [r7, #20]

GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010e4:	61bb      	str	r3, [r7, #24]

GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]

HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <MX_GPIO_Init+0xc8>)
 80010f2:	f001 ffd1 	bl	8003098 <HAL_GPIO_Init>


/*Configure GPIO pin : LD2_Pin */

GPIO_InitStruct.Pin = LD2_Pin;
 80010f6:	2320      	movs	r3, #32
 80010f8:	617b      	str	r3, [r7, #20]

GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]

GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]

GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]

HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f001 ffc2 	bl	8003098 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */

}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	48000800 	.word	0x48000800

08001124 <Error_Handler>:

*/

void Error_Handler(void)

{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop

/* User can add his own implementation to report the HAL error return state */

__disable_irq();

while (1)
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>
	...

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_MspInit+0x44>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_MspInit+0x44>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6613      	str	r3, [r2, #96]	; 0x60
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_MspInit+0x44>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_MspInit+0x44>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_MspInit+0x44>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_MspInit+0x44>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a3f      	ldr	r2, [pc, #252]	; (8001294 <HAL_ADC_MspInit+0x11c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d145      	bne.n	8001226 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <HAL_ADC_MspInit+0x120>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a3d      	ldr	r2, [pc, #244]	; (8001298 <HAL_ADC_MspInit+0x120>)
 80011a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <HAL_ADC_MspInit+0x120>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d10b      	bne.n	80011c4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80011ac:	4b3b      	ldr	r3, [pc, #236]	; (800129c <HAL_ADC_MspInit+0x124>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a3a      	ldr	r2, [pc, #232]	; (800129c <HAL_ADC_MspInit+0x124>)
 80011b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b38      	ldr	r3, [pc, #224]	; (800129c <HAL_ADC_MspInit+0x124>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <HAL_ADC_MspInit+0x124>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	4a34      	ldr	r2, [pc, #208]	; (800129c <HAL_ADC_MspInit+0x124>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <HAL_ADC_MspInit+0x124>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <HAL_ADC_MspInit+0x124>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	4a2e      	ldr	r2, [pc, #184]	; (800129c <HAL_ADC_MspInit+0x124>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <HAL_ADC_MspInit+0x124>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011f8:	230b      	movs	r3, #11
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	4826      	ldr	r0, [pc, #152]	; (80012a0 <HAL_ADC_MspInit+0x128>)
 8001208:	f001 ff46 	bl	8003098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120c:	2301      	movs	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001210:	230b      	movs	r3, #11
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4821      	ldr	r0, [pc, #132]	; (80012a4 <HAL_ADC_MspInit+0x12c>)
 8001220:	f001 ff3a 	bl	8003098 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001224:	e031      	b.n	800128a <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_ADC_MspInit+0x130>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d12c      	bne.n	800128a <HAL_ADC_MspInit+0x112>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_ADC_MspInit+0x120>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <HAL_ADC_MspInit+0x120>)
 8001238:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_ADC_MspInit+0x120>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10b      	bne.n	800125a <HAL_ADC_MspInit+0xe2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_ADC_MspInit+0x124>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <HAL_ADC_MspInit+0x124>)
 8001248:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_ADC_MspInit+0x124>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_ADC_MspInit+0x124>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <HAL_ADC_MspInit+0x124>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_ADC_MspInit+0x124>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001272:	2303      	movs	r3, #3
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001276:	230b      	movs	r3, #11
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4806      	ldr	r0, [pc, #24]	; (80012a0 <HAL_ADC_MspInit+0x128>)
 8001286:	f001 ff07 	bl	8003098 <HAL_GPIO_Init>
}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	50040000 	.word	0x50040000
 8001298:	2000c190 	.word	0x2000c190
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000800 	.word	0x48000800
 80012a4:	48000400 	.word	0x48000400
 80012a8:	50040100 	.word	0x50040100

080012ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0ac      	sub	sp, #176	; 0xb0
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2288      	movs	r2, #136	; 0x88
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 fb1b 	bl	8006908 <memset>
  if(huart->Instance==USART2)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <HAL_UART_MspInit+0xb0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d13b      	bne.n	8001354 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012dc:	2302      	movs	r3, #2
 80012de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fefb 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012f4:	f7ff ff16 	bl	8001124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_UART_MspInit+0xb4>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_UART_MspInit+0xb4>)
 80012fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001302:	6593      	str	r3, [r2, #88]	; 0x58
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_UART_MspInit+0xb4>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_UART_MspInit+0xb4>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_UART_MspInit+0xb4>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_UART_MspInit+0xb4>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001328:	230c      	movs	r3, #12
 800132a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001340:	2307      	movs	r3, #7
 8001342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f001 fea2 	bl	8003098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	37b0      	adds	r7, #176	; 0xb0
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40004400 	.word	0x40004400
 8001360:	40021000 	.word	0x40021000

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <NMI_Handler+0x4>

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <MemManage_Handler+0x4>

08001376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler+0x4>

08001382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b0:	f000 f8d0 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f005 fa96 	bl	8006918 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20018000 	.word	0x20018000
 8001418:	00000400 	.word	0x00000400
 800141c:	2000c194 	.word	0x2000c194
 8001420:	2000c2e8 	.word	0x2000c2e8

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001480 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f005 fa55 	bl	8006924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff fbb5 	bl	8000be8 <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001480:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800148c:	0801a2b8 	.word	0x0801a2b8
  ldr r2, =_sbss
 8001490:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001494:	2000c2e4 	.word	0x2000c2e4

08001498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_2_IRQHandler>
	...

0800149c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_Init+0x3c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <HAL_Init+0x3c>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b2:	2003      	movs	r0, #3
 80014b4:	f001 fdae 	bl	8003014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 f80f 	bl	80014dc <HAL_InitTick>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	e001      	b.n	80014ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ca:	f7ff fe31 	bl	8001130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_InitTick+0x6c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_InitTick+0x70>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_InitTick+0x6c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fdb9 	bl	800307e <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10f      	bne.n	8001532 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d809      	bhi.n	800152c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001520:	f001 fd83 	bl	800302a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_InitTick+0x74>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e007      	b.n	800153c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e004      	b.n	800153c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e001      	b.n	800153c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	2000c198 	.word	0x2000c198

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2000c198 	.word	0x2000c198

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008

080015dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3360      	adds	r3, #96	; 0x60
 8001656:	461a      	mov	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <LL_ADC_SetOffset+0x44>)
 8001666:	4013      	ands	r3, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	4313      	orrs	r3, r2
 8001674:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800167c:	bf00      	nop
 800167e:	371c      	adds	r7, #28
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	03fff000 	.word	0x03fff000

0800168c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3360      	adds	r3, #96	; 0x60
 800169a:	461a      	mov	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3360      	adds	r3, #96	; 0x60
 80016c8:	461a      	mov	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	431a      	orrs	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3330      	adds	r3, #48	; 0x30
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	211f      	movs	r1, #31
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	401a      	ands	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0e9b      	lsrs	r3, r3, #26
 800174c:	f003 011f 	and.w	r1, r3, #31
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	431a      	orrs	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3314      	adds	r3, #20
 800177c:	461a      	mov	r2, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	0e5b      	lsrs	r3, r3, #25
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	4413      	add	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	0d1b      	lsrs	r3, r3, #20
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	2107      	movs	r1, #7
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	401a      	ands	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	0d1b      	lsrs	r3, r3, #20
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	431a      	orrs	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0318 	and.w	r3, r3, #24
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017e8:	40d9      	lsrs	r1, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	400b      	ands	r3, r1
 80017ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f2:	431a      	orrs	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	0007ffff 	.word	0x0007ffff

0800180c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 031f 	and.w	r3, r3, #31
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6093      	str	r3, [r2, #8]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800187c:	d101      	bne.n	8001882 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018cc:	d101      	bne.n	80018d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <LL_ADC_IsEnabled+0x18>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <LL_ADC_IsEnabled+0x1a>
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d101      	bne.n	800196e <LL_ADC_IsDisableOngoing+0x18>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_ADC_IsDisableOngoing+0x1a>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800198c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001990:	f043 0204 	orr.w	r2, r3, #4
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b8:	f043 0210 	orr.w	r2, r3, #16
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d101      	bne.n	80019e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a06:	f043 0220 	orr.w	r2, r3, #32
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d101      	bne.n	8001a32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e130      	b.n	8001cbc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fb85 	bl	8001178 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fef1 	bl	8001868 <LL_ADC_IsDeepPowerDownEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fed7 	bl	8001844 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff0c 	bl	80018b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fef0 	bl	8001890 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ab0:	4b84      	ldr	r3, [pc, #528]	; (8001cc4 <HAL_ADC_Init+0x284>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	4a84      	ldr	r2, [pc, #528]	; (8001cc8 <HAL_ADC_Init+0x288>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff feee 	bl	80018b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff62 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8001b08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80c9 	bne.w	8001caa <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 80c5 	bne.w	8001caa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b28:	f043 0202 	orr.w	r2, r3, #2
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fefb 	bl	8001930 <LL_ADC_IsEnabled>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d115      	bne.n	8001b6c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b40:	4862      	ldr	r0, [pc, #392]	; (8001ccc <HAL_ADC_Init+0x28c>)
 8001b42:	f7ff fef5 	bl	8001930 <LL_ADC_IsEnabled>
 8001b46:	4604      	mov	r4, r0
 8001b48:	4861      	ldr	r0, [pc, #388]	; (8001cd0 <HAL_ADC_Init+0x290>)
 8001b4a:	f7ff fef1 	bl	8001930 <LL_ADC_IsEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	431c      	orrs	r4, r3
 8001b52:	4860      	ldr	r0, [pc, #384]	; (8001cd4 <HAL_ADC_Init+0x294>)
 8001b54:	f7ff feec 	bl	8001930 <LL_ADC_IsEnabled>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4323      	orrs	r3, r4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4619      	mov	r1, r3
 8001b66:	485c      	ldr	r0, [pc, #368]	; (8001cd8 <HAL_ADC_Init+0x298>)
 8001b68:	f7ff fd38 	bl	80015dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e5b      	ldrb	r3, [r3, #25]
 8001b70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d106      	bne.n	8001ba8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	045b      	lsls	r3, r3, #17
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <HAL_ADC_Init+0x29c>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff1c 	bl	8001a1a <LL_ADC_INJ_IsConversionOngoing>
 8001be2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d13d      	bne.n	8001c66 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d13a      	bne.n	8001c66 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bf4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bfc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c0c:	f023 0302 	bic.w	r3, r3, #2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	69b9      	ldr	r1, [r7, #24]
 8001c16:	430b      	orrs	r3, r1
 8001c18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d118      	bne.n	8001c56 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c2e:	f023 0304 	bic.w	r3, r3, #4
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c3a:	4311      	orrs	r1, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c40:	4311      	orrs	r1, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c46:	430a      	orrs	r2, r1
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	611a      	str	r2, [r3, #16]
 8001c54:	e007      	b.n	8001c66 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d10c      	bne.n	8001c88 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	f023 010f 	bic.w	r1, r3, #15
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
 8001c86:	e007      	b.n	8001c98 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 020f 	bic.w	r2, r2, #15
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f023 0303 	bic.w	r3, r3, #3
 8001ca0:	f043 0201 	orr.w	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
 8001ca8:	e007      	b.n	8001cba <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	f043 0210 	orr.w	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3724      	adds	r7, #36	; 0x24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	053e2d63 	.word	0x053e2d63
 8001ccc:	50040000 	.word	0x50040000
 8001cd0:	50040100 	.word	0x50040100
 8001cd4:	50040200 	.word	0x50040200
 8001cd8:	50040300 	.word	0x50040300
 8001cdc:	fff0c007 	.word	0xfff0c007

08001ce0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ce8:	4857      	ldr	r0, [pc, #348]	; (8001e48 <HAL_ADC_Start+0x168>)
 8001cea:	f7ff fd8f 	bl	800180c <LL_ADC_GetMultimode>
 8001cee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fe69 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 809c 	bne.w	8001e3a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_Start+0x30>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e097      	b.n	8001e40 <HAL_ADC_Start+0x160>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fe63 	bl	80029e4 <ADC_Enable>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 8083 	bne.w	8001e30 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a42      	ldr	r2, [pc, #264]	; (8001e4c <HAL_ADC_Start+0x16c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d002      	beq.n	8001d4e <HAL_ADC_Start+0x6e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	e000      	b.n	8001d50 <HAL_ADC_Start+0x70>
 8001d4e:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <HAL_ADC_Start+0x170>)
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d002      	beq.n	8001d5e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d76:	d106      	bne.n	8001d86 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f023 0206 	bic.w	r2, r3, #6
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	659a      	str	r2, [r3, #88]	; 0x58
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	221c      	movs	r2, #28
 8001d92:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <HAL_ADC_Start+0x16c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d002      	beq.n	8001dac <HAL_ADC_Start+0xcc>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	e000      	b.n	8001dae <HAL_ADC_Start+0xce>
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_ADC_Start+0x170>)
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d008      	beq.n	8001dc8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d002      	beq.n	8001dc8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d114      	bne.n	8001df2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fdc6 	bl	800197c <LL_ADC_REG_StartConversion>
 8001df0:	e025      	b.n	8001e3e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_ADC_Start+0x16c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d002      	beq.n	8001e0e <HAL_ADC_Start+0x12e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	e000      	b.n	8001e10 <HAL_ADC_Start+0x130>
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_ADC_Start+0x170>)
 8001e10:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00f      	beq.n	8001e3e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
 8001e2e:	e006      	b.n	8001e3e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e38:	e001      	b.n	8001e3e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	50040300 	.word	0x50040300
 8001e4c:	50040100 	.word	0x50040100
 8001e50:	50040000 	.word	0x50040000

08001e54 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_Stop+0x16>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e023      	b.n	8001eb2 <HAL_ADC_Stop+0x5e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e72:	2103      	movs	r1, #3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fcf9 	bl	800286c <ADC_ConversionStop>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fe33 	bl	8002af0 <ADC_Disable>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ec6:	4866      	ldr	r0, [pc, #408]	; (8002060 <HAL_ADC_PollForConversion+0x1a4>)
 8001ec8:	f7ff fca0 	bl	800180c <LL_ADC_GetMultimode>
 8001ecc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d102      	bne.n	8001edc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e02a      	b.n	8001f32 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d002      	beq.n	8001eee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b09      	cmp	r3, #9
 8001eec:	d111      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	f043 0220 	orr.w	r2, r3, #32
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0a4      	b.n	8002056 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f10:	e00f      	b.n	8001f32 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f12:	4853      	ldr	r0, [pc, #332]	; (8002060 <HAL_ADC_PollForConversion+0x1a4>)
 8001f14:	f7ff fc88 	bl	8001828 <LL_ADC_GetMultiDMATransfer>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	f043 0220 	orr.w	r2, r3, #32
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e093      	b.n	8002056 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f2e:	2304      	movs	r3, #4
 8001f30:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f32:	f7ff fb23 	bl	800157c <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f38:	e021      	b.n	8001f7e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f40:	d01d      	beq.n	8001f7e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f42:	f7ff fb1b 	bl	800157c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d302      	bcc.n	8001f58 <HAL_ADC_PollForConversion+0x9c>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d112      	bne.n	8001f7e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10b      	bne.n	8001f7e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f043 0204 	orr.w	r2, r3, #4
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e06b      	b.n	8002056 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0d6      	beq.n	8001f3a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fba6 	bl	80016ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01c      	beq.n	8001fe2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7e5b      	ldrb	r3, [r3, #25]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d118      	bne.n	8001fe2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d111      	bne.n	8001fe2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <HAL_ADC_PollForConversion+0x1a8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d002      	beq.n	8001ff2 <HAL_ADC_PollForConversion+0x136>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	e000      	b.n	8001ff4 <HAL_ADC_PollForConversion+0x138>
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_ADC_PollForConversion+0x1ac>)
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d008      	beq.n	800200e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d002      	beq.n	800200e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b09      	cmp	r3, #9
 800200c:	d104      	bne.n	8002018 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	e00c      	b.n	8002032 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a11      	ldr	r2, [pc, #68]	; (8002064 <HAL_ADC_PollForConversion+0x1a8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d002      	beq.n	8002028 <HAL_ADC_PollForConversion+0x16c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	e000      	b.n	800202a <HAL_ADC_PollForConversion+0x16e>
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_ADC_PollForConversion+0x1ac>)
 800202a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d104      	bne.n	8002042 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2208      	movs	r2, #8
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e008      	b.n	8002054 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	220c      	movs	r2, #12
 8002052:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	50040300 	.word	0x50040300
 8002064:	50040100 	.word	0x50040100
 8002068:	50040000 	.word	0x50040000

0800206c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0b6      	sub	sp, #216	; 0xd8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x22>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e3c9      	b.n	800283e <HAL_ADC_ConfigChannel+0x7b6>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fc88 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 83aa 	bne.w	8002818 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d824      	bhi.n	800211e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	3b02      	subs	r3, #2
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d81b      	bhi.n	8002116 <HAL_ADC_ConfigChannel+0x8e>
 80020de:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <HAL_ADC_ConfigChannel+0x5c>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	080020fd 	.word	0x080020fd
 80020ec:	08002105 	.word	0x08002105
 80020f0:	0800210d 	.word	0x0800210d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020f4:	230c      	movs	r3, #12
 80020f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020fa:	e010      	b.n	800211e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020fc:	2312      	movs	r3, #18
 80020fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002102:	e00c      	b.n	800211e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002104:	2318      	movs	r3, #24
 8002106:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800210a:	e008      	b.n	800211e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800210c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002114:	e003      	b.n	800211e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002116:	2306      	movs	r3, #6
 8002118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800211c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800212c:	f7ff faf2 	bl	8001714 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fc49 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 800213a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fc69 	bl	8001a1a <LL_ADC_INJ_IsConversionOngoing>
 8002148:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800214c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 81a4 	bne.w	800249e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 819f 	bne.w	800249e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	461a      	mov	r2, r3
 800216e:	f7ff fafd 	bl	800176c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b04      	cmp	r3, #4
 8002192:	d00a      	beq.n	80021aa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6919      	ldr	r1, [r3, #16]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a4:	f7ff fa4e 	bl	8001644 <LL_ADC_SetOffset>
 80021a8:	e179      	b.n	800249e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fa6b 	bl	800168c <LL_ADC_GetOffsetChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10a      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x14e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fa60 	bl	800168c <LL_ADC_GetOffsetChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	0e9b      	lsrs	r3, r3, #26
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	e01e      	b.n	8002214 <HAL_ADC_ConfigChannel+0x18c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fa55 	bl	800168c <LL_ADC_GetOffsetChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002204:	2320      	movs	r3, #32
 8002206:	e004      	b.n	8002212 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002208:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1a4>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0e9b      	lsrs	r3, r3, #26
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	e018      	b.n	800225e <HAL_ADC_ConfigChannel+0x1d6>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e004      	b.n	800225e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800225e:	429a      	cmp	r2, r3
 8002260:	d106      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fa24 	bl	80016b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fa08 	bl	800168c <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_ADC_ConfigChannel+0x214>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2101      	movs	r1, #1
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f9fd 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 021f 	and.w	r2, r3, #31
 800229a:	e01e      	b.n	80022da <HAL_ADC_ConfigChannel+0x252>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff f9f2 	bl	800168c <LL_ADC_GetOffsetChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80022ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80022c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80022ca:	2320      	movs	r3, #32
 80022cc:	e004      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80022ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d105      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x26a>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	e018      	b.n	8002324 <HAL_ADC_ConfigChannel+0x29c>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800230a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800230e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002316:	2320      	movs	r3, #32
 8002318:	e004      	b.n	8002324 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800231a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f9c1 	bl	80016b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2102      	movs	r1, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f9a5 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002342:	4603      	mov	r3, r0
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x2da>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2102      	movs	r1, #2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f99a 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	e01e      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x318>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2102      	movs	r1, #2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f98f 	bl	800168c <LL_ADC_GetOffsetChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e004      	b.n	800239e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x330>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	e014      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x35a>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80023c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80023cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e004      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80023d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d106      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	2102      	movs	r1, #2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f962 	bl	80016b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2103      	movs	r1, #3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f946 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x398>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2103      	movs	r1, #3
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f93b 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	f003 021f 	and.w	r2, r3, #31
 800241e:	e017      	b.n	8002450 <HAL_ADC_ConfigChannel+0x3c8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2103      	movs	r1, #3
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f930 	bl	800168c <LL_ADC_GetOffsetChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800243c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002442:	2320      	movs	r3, #32
 8002444:	e003      	b.n	800244e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x3e0>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	e011      	b.n	800248c <HAL_ADC_ConfigChannel+0x404>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002478:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800247a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e003      	b.n	800248c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800248c:	429a      	cmp	r2, r3
 800248e:	d106      	bne.n	800249e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2200      	movs	r2, #0
 8002496:	2103      	movs	r1, #3
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f90d 	bl	80016b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fa44 	bl	8001930 <LL_ADC_IsEnabled>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 8140 	bne.w	8002730 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6819      	ldr	r1, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	461a      	mov	r2, r3
 80024be:	f7ff f981 	bl	80017c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4a8f      	ldr	r2, [pc, #572]	; (8002704 <HAL_ADC_ConfigChannel+0x67c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	f040 8131 	bne.w	8002730 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10b      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x46e>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	3301      	adds	r3, #1
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	bf94      	ite	ls
 80024ee:	2301      	movls	r3, #1
 80024f0:	2300      	movhi	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	e019      	b.n	800252a <HAL_ADC_ConfigChannel+0x4a2>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002506:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800250e:	2320      	movs	r3, #32
 8002510:	e003      	b.n	800251a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2b09      	cmp	r3, #9
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252a:	2b00      	cmp	r3, #0
 800252c:	d079      	beq.n	8002622 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d107      	bne.n	800254a <HAL_ADC_ConfigChannel+0x4c2>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	3301      	adds	r3, #1
 8002542:	069b      	lsls	r3, r3, #26
 8002544:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002548:	e015      	b.n	8002576 <HAL_ADC_ConfigChannel+0x4ee>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800255c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e003      	b.n	800256e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3301      	adds	r3, #1
 8002570:	069b      	lsls	r3, r3, #26
 8002572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x50e>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	3301      	adds	r3, #1
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	e017      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x53e>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80025ae:	2320      	movs	r3, #32
 80025b0:	e003      	b.n	80025ba <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80025b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	ea42 0103 	orr.w	r1, r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x564>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	3301      	adds	r3, #1
 80025de:	f003 021f 	and.w	r2, r3, #31
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	e018      	b.n	800261e <HAL_ADC_ConfigChannel+0x596>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e003      	b.n	8002610 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f003 021f 	and.w	r2, r3, #31
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800261e:	430b      	orrs	r3, r1
 8002620:	e081      	b.n	8002726 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d107      	bne.n	800263e <HAL_ADC_ConfigChannel+0x5b6>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	3301      	adds	r3, #1
 8002636:	069b      	lsls	r3, r3, #26
 8002638:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800263c:	e015      	b.n	800266a <HAL_ADC_ConfigChannel+0x5e2>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e003      	b.n	8002662 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	069b      	lsls	r3, r3, #26
 8002666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_ADC_ConfigChannel+0x602>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	3301      	adds	r3, #1
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	e017      	b.n	80026ba <HAL_ADC_ConfigChannel+0x632>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	61bb      	str	r3, [r7, #24]
  return result;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e003      	b.n	80026ae <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2101      	movs	r1, #1
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	ea42 0103 	orr.w	r1, r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10d      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x65e>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	3301      	adds	r3, #1
 80026d2:	f003 021f 	and.w	r2, r3, #31
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	3b1e      	subs	r3, #30
 80026de:	051b      	lsls	r3, r3, #20
 80026e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e4:	e01e      	b.n	8002724 <HAL_ADC_ConfigChannel+0x69c>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	60fb      	str	r3, [r7, #12]
  return result;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d104      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80026fe:	2320      	movs	r3, #32
 8002700:	e006      	b.n	8002710 <HAL_ADC_ConfigChannel+0x688>
 8002702:	bf00      	nop
 8002704:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f003 021f 	and.w	r2, r3, #31
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	3b1e      	subs	r3, #30
 800271e:	051b      	lsls	r3, r3, #20
 8002720:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002724:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272a:	4619      	mov	r1, r3
 800272c:	f7ff f81e 	bl	800176c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b44      	ldr	r3, [pc, #272]	; (8002848 <HAL_ADC_ConfigChannel+0x7c0>)
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d07a      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800273c:	4843      	ldr	r0, [pc, #268]	; (800284c <HAL_ADC_ConfigChannel+0x7c4>)
 800273e:	f7fe ff73 	bl	8001628 <LL_ADC_GetCommonPathInternalCh>
 8002742:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a41      	ldr	r2, [pc, #260]	; (8002850 <HAL_ADC_ConfigChannel+0x7c8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d12c      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d126      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a3c      	ldr	r2, [pc, #240]	; (8002854 <HAL_ADC_ConfigChannel+0x7cc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_ADC_ConfigChannel+0x6e8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a3b      	ldr	r2, [pc, #236]	; (8002858 <HAL_ADC_ConfigChannel+0x7d0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d15d      	bne.n	800282c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002778:	4619      	mov	r1, r3
 800277a:	4834      	ldr	r0, [pc, #208]	; (800284c <HAL_ADC_ConfigChannel+0x7c4>)
 800277c:	f7fe ff41 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002780:	4b36      	ldr	r3, [pc, #216]	; (800285c <HAL_ADC_ConfigChannel+0x7d4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	4a36      	ldr	r2, [pc, #216]	; (8002860 <HAL_ADC_ConfigChannel+0x7d8>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800279a:	e002      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	3b01      	subs	r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f9      	bne.n	800279c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a8:	e040      	b.n	800282c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2d      	ldr	r2, [pc, #180]	; (8002864 <HAL_ADC_ConfigChannel+0x7dc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d118      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d112      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a23      	ldr	r2, [pc, #140]	; (8002854 <HAL_ADC_ConfigChannel+0x7cc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_ADC_ConfigChannel+0x74c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_ADC_ConfigChannel+0x7d0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d12d      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027dc:	4619      	mov	r1, r3
 80027de:	481b      	ldr	r0, [pc, #108]	; (800284c <HAL_ADC_ConfigChannel+0x7c4>)
 80027e0:	f7fe ff0f 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e4:	e024      	b.n	8002830 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <HAL_ADC_ConfigChannel+0x7e0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d120      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d11a      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_ADC_ConfigChannel+0x7cc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d115      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800280a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800280e:	4619      	mov	r1, r3
 8002810:	480e      	ldr	r0, [pc, #56]	; (800284c <HAL_ADC_ConfigChannel+0x7c4>)
 8002812:	f7fe fef6 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
 8002816:	e00c      	b.n	8002832 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800282a:	e002      	b.n	8002832 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002830:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800283a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800283e:	4618      	mov	r0, r3
 8002840:	37d8      	adds	r7, #216	; 0xd8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	80080000 	.word	0x80080000
 800284c:	50040300 	.word	0x50040300
 8002850:	c7520000 	.word	0xc7520000
 8002854:	50040000 	.word	0x50040000
 8002858:	50040200 	.word	0x50040200
 800285c:	20000000 	.word	0x20000000
 8002860:	053e2d63 	.word	0x053e2d63
 8002864:	cb840000 	.word	0xcb840000
 8002868:	80000001 	.word	0x80000001

0800286c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f8a2 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8002888:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f8c3 	bl	8001a1a <LL_ADC_INJ_IsConversionOngoing>
 8002894:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d103      	bne.n	80028a4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8098 	beq.w	80029d4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d02a      	beq.n	8002908 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7e5b      	ldrb	r3, [r3, #25]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d126      	bne.n	8002908 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7e1b      	ldrb	r3, [r3, #24]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d122      	bne.n	8002908 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028c2:	2301      	movs	r3, #1
 80028c4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028c6:	e014      	b.n	80028f2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4a45      	ldr	r2, [pc, #276]	; (80029e0 <ADC_ConversionStop+0x174>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d90d      	bls.n	80028ec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0210 	orr.w	r2, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e074      	b.n	80029d6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	3301      	adds	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d1e3      	bne.n	80028c8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2240      	movs	r2, #64	; 0x40
 8002906:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d014      	beq.n	8002938 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f85a 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00c      	beq.n	8002938 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f817 	bl	8001956 <LL_ADC_IsDisableOngoing>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f836 	bl	80019a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d014      	beq.n	8002968 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f869 	bl	8001a1a <LL_ADC_INJ_IsConversionOngoing>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe ffff 	bl	8001956 <LL_ADC_IsDisableOngoing>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff f845 	bl	80019f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d005      	beq.n	800297a <ADC_ConversionStop+0x10e>
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d105      	bne.n	8002980 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002974:	230c      	movs	r3, #12
 8002976:	617b      	str	r3, [r7, #20]
        break;
 8002978:	e005      	b.n	8002986 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800297a:	2308      	movs	r3, #8
 800297c:	617b      	str	r3, [r7, #20]
        break;
 800297e:	e002      	b.n	8002986 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002980:	2304      	movs	r3, #4
 8002982:	617b      	str	r3, [r7, #20]
        break;
 8002984:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002986:	f7fe fdf9 	bl	800157c <HAL_GetTick>
 800298a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800298c:	e01b      	b.n	80029c6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800298e:	f7fe fdf5 	bl	800157c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b05      	cmp	r3, #5
 800299a:	d914      	bls.n	80029c6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f043 0210 	orr.w	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e007      	b.n	80029d6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1dc      	bne.n	800298e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	a33fffff 	.word	0xa33fffff

080029e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe ff9b 	bl	8001930 <LL_ADC_IsEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d169      	bne.n	8002ad4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <ADC_Enable+0xfc>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f043 0210 	orr.w	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e055      	b.n	8002ad6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe ff56 	bl	80018e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a34:	482b      	ldr	r0, [pc, #172]	; (8002ae4 <ADC_Enable+0x100>)
 8002a36:	f7fe fdf7 	bl	8001628 <LL_ADC_GetCommonPathInternalCh>
 8002a3a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <ADC_Enable+0x104>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	4a28      	ldr	r2, [pc, #160]	; (8002aec <ADC_Enable+0x108>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a5e:	e002      	b.n	8002a66 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f9      	bne.n	8002a60 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fd86 	bl	800157c <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a72:	e028      	b.n	8002ac6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe ff59 	bl	8001930 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe ff29 	bl	80018e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a8e:	f7fe fd75 	bl	800157c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d914      	bls.n	8002ac6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d00d      	beq.n	8002ac6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f043 0210 	orr.w	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e007      	b.n	8002ad6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d1cf      	bne.n	8002a74 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	8000003f 	.word	0x8000003f
 8002ae4:	50040300 	.word	0x50040300
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	053e2d63 	.word	0x053e2d63

08002af0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe ff2a 	bl	8001956 <LL_ADC_IsDisableOngoing>
 8002b02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe ff11 	bl	8001930 <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d047      	beq.n	8002ba4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d144      	bne.n	8002ba4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030d 	and.w	r3, r3, #13
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10c      	bne.n	8002b42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe feeb 	bl	8001908 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2203      	movs	r2, #3
 8002b38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b3a:	f7fe fd1f 	bl	800157c <HAL_GetTick>
 8002b3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b40:	e029      	b.n	8002b96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	f043 0210 	orr.w	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e023      	b.n	8002ba6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b5e:	f7fe fd0d 	bl	800157c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d914      	bls.n	8002b96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e007      	b.n	8002ba6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1dc      	bne.n	8002b5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <LL_ADC_IsEnabled>:
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <LL_ADC_IsEnabled+0x18>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <LL_ADC_IsEnabled+0x1a>
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_StartCalibration>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002be6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_IsCalibrationOnGoing>:
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c1a:	d101      	bne.n	8002c20 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_REG_IsConversionOngoing>:
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d101      	bne.n	8002c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADCEx_Calibration_Start+0x1c>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e04d      	b.n	8002d0c <HAL_ADCEx_Calibration_Start+0xb8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ff39 	bl	8002af0 <ADC_Disable>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d136      	bne.n	8002cf6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c90:	f023 0302 	bic.w	r3, r3, #2
 8002c94:	f043 0202 	orr.w	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ff96 	bl	8002bd4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ca8:	e014      	b.n	8002cd4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3301      	adds	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002cb6:	d30d      	bcc.n	8002cd4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f023 0312 	bic.w	r3, r3, #18
 8002cc0:	f043 0210 	orr.w	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e01b      	b.n	8002d0c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff94 	bl	8002c06 <LL_ADC_IsCalibrationOnGoing>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e2      	bne.n	8002caa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	f023 0303 	bic.w	r3, r3, #3
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
 8002cf4:	e005      	b.n	8002d02 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 0210 	orr.w	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b09f      	sub	sp, #124	; 0x7c
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e093      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a47      	ldr	r2, [pc, #284]	; (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d102      	bne.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d4c:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	e001      	b.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e072      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff59 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002d7c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff53 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d154      	bne.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d151      	bne.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d94:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d96:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d02c      	beq.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002db2:	035b      	lsls	r3, r3, #13
 8002db4:	430b      	orrs	r3, r1
 8002db6:	431a      	orrs	r2, r3
 8002db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dbc:	4829      	ldr	r0, [pc, #164]	; (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dbe:	f7ff fef6 	bl	8002bae <LL_ADC_IsEnabled>
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	4828      	ldr	r0, [pc, #160]	; (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dc6:	f7ff fef2 	bl	8002bae <LL_ADC_IsEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	431c      	orrs	r4, r3
 8002dce:	4828      	ldr	r0, [pc, #160]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002dd0:	f7ff feed 	bl	8002bae <LL_ADC_IsEnabled>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4323      	orrs	r3, r4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d137      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002de4:	f023 030f 	bic.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	6811      	ldr	r1, [r2, #0]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002df8:	e028      	b.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e06:	4817      	ldr	r0, [pc, #92]	; (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e08:	f7ff fed1 	bl	8002bae <LL_ADC_IsEnabled>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	4816      	ldr	r0, [pc, #88]	; (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e10:	f7ff fecd 	bl	8002bae <LL_ADC_IsEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	431c      	orrs	r4, r3
 8002e18:	4815      	ldr	r0, [pc, #84]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e1a:	f7ff fec8 	bl	8002bae <LL_ADC_IsEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4323      	orrs	r3, r4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d112      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e2e:	f023 030f 	bic.w	r3, r3, #15
 8002e32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e34:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e36:	e009      	b.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e4a:	e000      	b.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	377c      	adds	r7, #124	; 0x7c
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	50040000 	.word	0x50040000
 8002e68:	50040100 	.word	0x50040100
 8002e6c:	50040300 	.word	0x50040300
 8002e70:	50040200 	.word	0x50040200

08002e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e90:	4013      	ands	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea6:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	60d3      	str	r3, [r2, #12]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	f003 0307 	and.w	r3, r3, #7
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	db0b      	blt.n	8002f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	4907      	ldr	r1, [pc, #28]	; (8002f10 <__NVIC_EnableIRQ+0x38>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2001      	movs	r0, #1
 8002efa:	fa00 f202 	lsl.w	r2, r0, r2
 8002efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000e100 	.word	0xe000e100

08002f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db0a      	blt.n	8002f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	490c      	ldr	r1, [pc, #48]	; (8002f60 <__NVIC_SetPriority+0x4c>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	440b      	add	r3, r1
 8002f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f3c:	e00a      	b.n	8002f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4908      	ldr	r1, [pc, #32]	; (8002f64 <__NVIC_SetPriority+0x50>)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	440b      	add	r3, r1
 8002f52:	761a      	strb	r2, [r3, #24]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000e100 	.word	0xe000e100
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f1c3 0307 	rsb	r3, r3, #7
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	bf28      	it	cs
 8002f86:	2304      	movcs	r3, #4
 8002f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d902      	bls.n	8002f98 <NVIC_EncodePriority+0x30>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3b03      	subs	r3, #3
 8002f96:	e000      	b.n	8002f9a <NVIC_EncodePriority+0x32>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	401a      	ands	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	43d9      	mvns	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	4313      	orrs	r3, r2
         );
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	; 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe0:	d301      	bcc.n	8002fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00f      	b.n	8003006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <SysTick_Config+0x40>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fee:	210f      	movs	r1, #15
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ff4:	f7ff ff8e 	bl	8002f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <SysTick_Config+0x40>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffe:	4b04      	ldr	r3, [pc, #16]	; (8003010 <SysTick_Config+0x40>)
 8003000:	2207      	movs	r2, #7
 8003002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	e000e010 	.word	0xe000e010

08003014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff29 	bl	8002e74 <__NVIC_SetPriorityGrouping>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800303c:	f7ff ff3e 	bl	8002ebc <__NVIC_GetPriorityGrouping>
 8003040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f7ff ff8e 	bl	8002f68 <NVIC_EncodePriority>
 800304c:	4602      	mov	r2, r0
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff5d 	bl	8002f14 <__NVIC_SetPriority>
}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff31 	bl	8002ed8 <__NVIC_EnableIRQ>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ffa2 	bl	8002fd0 <SysTick_Config>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a6:	e17f      	b.n	80033a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8171 	beq.w	80033a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d005      	beq.n	80030d8 <HAL_GPIO_Init+0x40>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d130      	bne.n	800313a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800310e:	2201      	movs	r2, #1
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0201 	and.w	r2, r3, #1
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b03      	cmp	r3, #3
 8003144:	d118      	bne.n	8003178 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800314c:	2201      	movs	r2, #1
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	08db      	lsrs	r3, r3, #3
 8003162:	f003 0201 	and.w	r2, r3, #1
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b03      	cmp	r3, #3
 8003182:	d017      	beq.n	80031b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d123      	bne.n	8003208 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	08da      	lsrs	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3208      	adds	r2, #8
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	6939      	ldr	r1, [r7, #16]
 8003204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0203 	and.w	r2, r3, #3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80ac 	beq.w	80033a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <HAL_GPIO_Init+0x330>)
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	4a5e      	ldr	r2, [pc, #376]	; (80033c8 <HAL_GPIO_Init+0x330>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6613      	str	r3, [r2, #96]	; 0x60
 8003256:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <HAL_GPIO_Init+0x330>)
 8003258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003262:	4a5a      	ldr	r2, [pc, #360]	; (80033cc <HAL_GPIO_Init+0x334>)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	220f      	movs	r2, #15
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800328c:	d025      	beq.n	80032da <HAL_GPIO_Init+0x242>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4f      	ldr	r2, [pc, #316]	; (80033d0 <HAL_GPIO_Init+0x338>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01f      	beq.n	80032d6 <HAL_GPIO_Init+0x23e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4e      	ldr	r2, [pc, #312]	; (80033d4 <HAL_GPIO_Init+0x33c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d019      	beq.n	80032d2 <HAL_GPIO_Init+0x23a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4d      	ldr	r2, [pc, #308]	; (80033d8 <HAL_GPIO_Init+0x340>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_GPIO_Init+0x236>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4c      	ldr	r2, [pc, #304]	; (80033dc <HAL_GPIO_Init+0x344>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00d      	beq.n	80032ca <HAL_GPIO_Init+0x232>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4b      	ldr	r2, [pc, #300]	; (80033e0 <HAL_GPIO_Init+0x348>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <HAL_GPIO_Init+0x22e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4a      	ldr	r2, [pc, #296]	; (80033e4 <HAL_GPIO_Init+0x34c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_GPIO_Init+0x22a>
 80032be:	2306      	movs	r3, #6
 80032c0:	e00c      	b.n	80032dc <HAL_GPIO_Init+0x244>
 80032c2:	2307      	movs	r3, #7
 80032c4:	e00a      	b.n	80032dc <HAL_GPIO_Init+0x244>
 80032c6:	2305      	movs	r3, #5
 80032c8:	e008      	b.n	80032dc <HAL_GPIO_Init+0x244>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x244>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e004      	b.n	80032dc <HAL_GPIO_Init+0x244>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_Init+0x244>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x244>
 80032da:	2300      	movs	r3, #0
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	f002 0203 	and.w	r2, r2, #3
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4093      	lsls	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ec:	4937      	ldr	r1, [pc, #220]	; (80033cc <HAL_GPIO_Init+0x334>)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_GPIO_Init+0x350>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800331e:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <HAL_GPIO_Init+0x350>)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003324:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <HAL_GPIO_Init+0x350>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <HAL_GPIO_Init+0x350>)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_GPIO_Init+0x350>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_GPIO_Init+0x350>)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_GPIO_Init+0x350>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	43db      	mvns	r3, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800339c:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <HAL_GPIO_Init+0x350>)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f47f ae78 	bne.w	80030a8 <HAL_GPIO_Init+0x10>
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40010000 	.word	0x40010000
 80033d0:	48000400 	.word	0x48000400
 80033d4:	48000800 	.word	0x48000800
 80033d8:	48000c00 	.word	0x48000c00
 80033dc:	48001000 	.word	0x48001000
 80033e0:	48001400 	.word	0x48001400
 80033e4:	48001800 	.word	0x48001800
 80033e8:	40010400 	.word	0x40010400

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033fc:	787b      	ldrb	r3, [r7, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003408:	e002      	b.n	8003410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <HAL_PWREx_GetVoltageRange+0x18>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40007000 	.word	0x40007000

08003438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003446:	d130      	bne.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003454:	d038      	beq.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003456:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003464:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2232      	movs	r2, #50	; 0x32
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0c9b      	lsrs	r3, r3, #18
 8003478:	3301      	adds	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800347c:	e002      	b.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3b01      	subs	r3, #1
 8003482:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003484:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003490:	d102      	bne.n	8003498 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f2      	bne.n	800347e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a4:	d110      	bne.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e00f      	b.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d007      	beq.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034c0:	4a05      	ldr	r2, [pc, #20]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40007000 	.word	0x40007000
 80034dc:	20000000 	.word	0x20000000
 80034e0:	431bde83 	.word	0x431bde83

080034e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e3ca      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f6:	4b97      	ldr	r3, [pc, #604]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003500:	4b94      	ldr	r3, [pc, #592]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80e4 	beq.w	80036e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_RCC_OscConfig+0x4a>
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b0c      	cmp	r3, #12
 8003522:	f040 808b 	bne.w	800363c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b01      	cmp	r3, #1
 800352a:	f040 8087 	bne.w	800363c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800352e:	4b89      	ldr	r3, [pc, #548]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x62>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e3a2      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1a      	ldr	r2, [r3, #32]
 800354a:	4b82      	ldr	r3, [pc, #520]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d004      	beq.n	8003560 <HAL_RCC_OscConfig+0x7c>
 8003556:	4b7f      	ldr	r3, [pc, #508]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355e:	e005      	b.n	800356c <HAL_RCC_OscConfig+0x88>
 8003560:	4b7c      	ldr	r3, [pc, #496]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356c:	4293      	cmp	r3, r2
 800356e:	d223      	bcs.n	80035b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fd55 	bl	8004024 <RCC_SetFlashLatencyFromMSIRange>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e383      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003584:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a72      	ldr	r2, [pc, #456]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800358a:	f043 0308 	orr.w	r3, r3, #8
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	496d      	ldr	r1, [pc, #436]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035a2:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	4968      	ldr	r1, [pc, #416]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
 80035b6:	e025      	b.n	8003604 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b8:	4b66      	ldr	r3, [pc, #408]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a65      	ldr	r2, [pc, #404]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80035be:	f043 0308 	orr.w	r3, r3, #8
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4960      	ldr	r1, [pc, #384]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035d6:	4b5f      	ldr	r3, [pc, #380]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	495b      	ldr	r1, [pc, #364]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fd15 	bl	8004024 <RCC_SetFlashLatencyFromMSIRange>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e343      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003604:	f000 fc4a 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b52      	ldr	r3, [pc, #328]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	4950      	ldr	r1, [pc, #320]	; (8003758 <HAL_RCC_OscConfig+0x274>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	4a4e      	ldr	r2, [pc, #312]	; (800375c <HAL_RCC_OscConfig+0x278>)
 8003622:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003624:	4b4e      	ldr	r3, [pc, #312]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd ff57 	bl	80014dc <HAL_InitTick>
 800362e:	4603      	mov	r3, r0
 8003630:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d052      	beq.n	80036de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	e327      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d032      	beq.n	80036aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a42      	ldr	r2, [pc, #264]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003650:	f7fd ff94 	bl	800157c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003658:	f7fd ff90 	bl	800157c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e310      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800366a:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003676:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a36      	ldr	r2, [pc, #216]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800367c:	f043 0308 	orr.w	r3, r3, #8
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4931      	ldr	r1, [pc, #196]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003694:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	492c      	ldr	r1, [pc, #176]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
 80036a8:	e01a      	b.n	80036e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036aa:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036b6:	f7fd ff61 	bl	800157c <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036be:	f7fd ff5d 	bl	800157c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e2dd      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036d0:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f0      	bne.n	80036be <HAL_RCC_OscConfig+0x1da>
 80036dc:	e000      	b.n	80036e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d074      	beq.n	80037d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d005      	beq.n	80036fe <HAL_RCC_OscConfig+0x21a>
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d10e      	bne.n	8003716 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d10b      	bne.n	8003716 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d064      	beq.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d160      	bne.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e2ba      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x24a>
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e026      	b.n	800377c <HAL_RCC_OscConfig+0x298>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003736:	d115      	bne.n	8003764 <HAL_RCC_OscConfig+0x280>
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800373e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a02      	ldr	r2, [pc, #8]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800374a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	e014      	b.n	800377c <HAL_RCC_OscConfig+0x298>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	08007244 	.word	0x08007244
 800375c:	20000000 	.word	0x20000000
 8003760:	20000004 	.word	0x20000004
 8003764:	4ba0      	ldr	r3, [pc, #640]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a9f      	ldr	r2, [pc, #636]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b9d      	ldr	r3, [pc, #628]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a9c      	ldr	r2, [pc, #624]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 8003776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fd fefa 	bl	800157c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fd fef6 	bl	800157c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e276      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800379e:	4b92      	ldr	r3, [pc, #584]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x2a8>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd fee6 	bl	800157c <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fd fee2 	bl	800157c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e262      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2d0>
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d060      	beq.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_OscConfig+0x310>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d119      	bne.n	8003822 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d116      	bne.n	8003822 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f4:	4b7c      	ldr	r3, [pc, #496]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_OscConfig+0x328>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e23f      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	061b      	lsls	r3, r3, #24
 800381a:	4973      	ldr	r1, [pc, #460]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003820:	e040      	b.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d023      	beq.n	8003872 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800382a:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fd fea1 	bl	800157c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383e:	f7fd fe9d 	bl	800157c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e21d      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003850:	4b65      	ldr	r3, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	495f      	ldr	r1, [pc, #380]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	e018      	b.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003872:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a5c      	ldr	r2, [pc, #368]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 8003878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fd fe7d 	bl	800157c <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003886:	f7fd fe79 	bl	800157c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e1f9      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003898:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f0      	bne.n	8003886 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d03c      	beq.n	800392a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01c      	beq.n	80038f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b8:	4b4b      	ldr	r3, [pc, #300]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80038ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038be:	4a4a      	ldr	r2, [pc, #296]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd fe58 	bl	800157c <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fd fe54 	bl	800157c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1d4      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80038e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ef      	beq.n	80038d0 <HAL_RCC_OscConfig+0x3ec>
 80038f0:	e01b      	b.n	800392a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f2:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80038f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f8:	4a3b      	ldr	r2, [pc, #236]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7fd fe3b 	bl	800157c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390a:	f7fd fe37 	bl	800157c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1b7      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800391c:	4b32      	ldr	r3, [pc, #200]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800391e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1ef      	bne.n	800390a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80a6 	beq.w	8003a84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800393c:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10d      	bne.n	8003964 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 800394e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003952:	6593      	str	r3, [r2, #88]	; 0x58
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003960:	2301      	movs	r3, #1
 8003962:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003964:	4b21      	ldr	r3, [pc, #132]	; (80039ec <HAL_RCC_OscConfig+0x508>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d118      	bne.n	80039a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003970:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <HAL_RCC_OscConfig+0x508>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <HAL_RCC_OscConfig+0x508>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397c:	f7fd fdfe 	bl	800157c <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fd fdfa 	bl	800157c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e17a      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <HAL_RCC_OscConfig+0x508>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d108      	bne.n	80039bc <HAL_RCC_OscConfig+0x4d8>
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b0:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039ba:	e029      	b.n	8003a10 <HAL_RCC_OscConfig+0x52c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d115      	bne.n	80039f0 <HAL_RCC_OscConfig+0x50c>
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_RCC_OscConfig+0x504>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039e4:	e014      	b.n	8003a10 <HAL_RCC_OscConfig+0x52c>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
 80039f0:	4b9c      	ldr	r3, [pc, #624]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	4a9b      	ldr	r2, [pc, #620]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a00:	4b98      	ldr	r3, [pc, #608]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	4a97      	ldr	r2, [pc, #604]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d016      	beq.n	8003a46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fd fdb0 	bl	800157c <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7fd fdac 	bl	800157c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e12a      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a36:	4b8b      	ldr	r3, [pc, #556]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0ed      	beq.n	8003a20 <HAL_RCC_OscConfig+0x53c>
 8003a44:	e015      	b.n	8003a72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a46:	f7fd fd99 	bl	800157c <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4e:	f7fd fd95 	bl	800157c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e113      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a64:	4b7f      	ldr	r3, [pc, #508]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1ed      	bne.n	8003a4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a72:	7ffb      	ldrb	r3, [r7, #31]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d105      	bne.n	8003a84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a78:	4b7a      	ldr	r3, [pc, #488]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	4a79      	ldr	r2, [pc, #484]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80fe 	beq.w	8003c8a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	f040 80d0 	bne.w	8003c38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a98:	4b72      	ldr	r3, [pc, #456]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0203 	and.w	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d130      	bne.n	8003b0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d127      	bne.n	8003b0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d11f      	bne.n	8003b0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad8:	2a07      	cmp	r2, #7
 8003ada:	bf14      	ite	ne
 8003adc:	2201      	movne	r2, #1
 8003ade:	2200      	moveq	r2, #0
 8003ae0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d113      	bne.n	8003b0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	3b01      	subs	r3, #1
 8003af4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d109      	bne.n	8003b0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	3b01      	subs	r3, #1
 8003b08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d06e      	beq.n	8003bec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b0c      	cmp	r3, #12
 8003b12:	d069      	beq.n	8003be8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b14:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b20:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0ad      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b30:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b3c:	f7fd fd1e 	bl	800157c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd fd1a 	bl	800157c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e09a      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b56:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b62:	4b40      	ldr	r3, [pc, #256]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <HAL_RCC_OscConfig+0x784>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b72:	3a01      	subs	r2, #1
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	4311      	orrs	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b7c:	0212      	lsls	r2, r2, #8
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b84:	0852      	lsrs	r2, r2, #1
 8003b86:	3a01      	subs	r2, #1
 8003b88:	0552      	lsls	r2, r2, #21
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b90:	0852      	lsrs	r2, r2, #1
 8003b92:	3a01      	subs	r2, #1
 8003b94:	0652      	lsls	r2, r2, #25
 8003b96:	4311      	orrs	r1, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b9c:	0912      	lsrs	r2, r2, #4
 8003b9e:	0452      	lsls	r2, r2, #17
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	4930      	ldr	r1, [pc, #192]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ba8:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2d      	ldr	r2, [pc, #180]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bb4:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bc0:	f7fd fcdc 	bl	800157c <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd fcd8 	bl	800157c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e058      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003be6:	e050      	b.n	8003c8a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e04f      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d148      	bne.n	8003c8a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c04:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c10:	f7fd fcb4 	bl	800157c <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fd fcb0 	bl	800157c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e030      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x734>
 8003c36:	e028      	b.n	8003c8a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d023      	beq.n	8003c86 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <HAL_RCC_OscConfig+0x780>)
 8003c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fc97 	bl	800157c <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c50:	e00c      	b.n	8003c6c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fd fc93 	bl	800157c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d905      	bls.n	8003c6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e013      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
 8003c64:	40021000 	.word	0x40021000
 8003c68:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RCC_OscConfig+0x7b0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1ec      	bne.n	8003c52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_OscConfig+0x7b0>)
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	4905      	ldr	r1, [pc, #20]	; (8003c94 <HAL_RCC_OscConfig+0x7b0>)
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCC_OscConfig+0x7b4>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	60cb      	str	r3, [r1, #12]
 8003c84:	e001      	b.n	8003c8a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	feeefffc 	.word	0xfeeefffc

08003c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0e7      	b.n	8003e80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b75      	ldr	r3, [pc, #468]	; (8003e88 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d910      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b72      	ldr	r3, [pc, #456]	; (8003e88 <HAL_RCC_ClockConfig+0x1ec>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	4970      	ldr	r1, [pc, #448]	; (8003e88 <HAL_RCC_ClockConfig+0x1ec>)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b6e      	ldr	r3, [pc, #440]	; (8003e88 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0cf      	b.n	8003e80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d010      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	4b66      	ldr	r3, [pc, #408]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d908      	bls.n	8003d0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfc:	4b63      	ldr	r3, [pc, #396]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4960      	ldr	r1, [pc, #384]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d04c      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d22:	4b5a      	ldr	r3, [pc, #360]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d121      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e0a6      	b.n	8003e80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d115      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e09a      	b.n	8003e80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d52:	4b4e      	ldr	r3, [pc, #312]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e08e      	b.n	8003e80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d62:	4b4a      	ldr	r3, [pc, #296]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e086      	b.n	8003e80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d72:	4b46      	ldr	r3, [pc, #280]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f023 0203 	bic.w	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4943      	ldr	r1, [pc, #268]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d84:	f7fd fbfa 	bl	800157c <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8c:	f7fd fbf6 	bl	800157c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e06e      	b.n	8003e80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 020c 	and.w	r2, r3, #12
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1eb      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d010      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d208      	bcs.n	8003de2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	492b      	ldr	r1, [pc, #172]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de2:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <HAL_RCC_ClockConfig+0x1ec>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d210      	bcs.n	8003e12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_RCC_ClockConfig+0x1ec>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 0207 	bic.w	r2, r3, #7
 8003df8:	4923      	ldr	r1, [pc, #140]	; (8003e88 <HAL_RCC_ClockConfig+0x1ec>)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_RCC_ClockConfig+0x1ec>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e036      	b.n	8003e80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4918      	ldr	r1, [pc, #96]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4910      	ldr	r1, [pc, #64]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e50:	f000 f824 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	091b      	lsrs	r3, r3, #4
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	490b      	ldr	r1, [pc, #44]	; (8003e90 <HAL_RCC_ClockConfig+0x1f4>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_RCC_ClockConfig+0x1f8>)
 8003e6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1fc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fd fb31 	bl	80014dc <HAL_InitTick>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e7e:	7afb      	ldrb	r3, [r7, #11]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	08007244 	.word	0x08007244
 8003e94:	20000000 	.word	0x20000000
 8003e98:	20000004 	.word	0x20000004

08003e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eaa:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb4:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b0c      	cmp	r3, #12
 8003ec8:	d121      	bne.n	8003f0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d11e      	bne.n	8003f0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ed0:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003edc:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	e005      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d102      	bne.n	8003f1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <HAL_RCC_GetSysClockFreq+0x110>)
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e004      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f20:	4b23      	ldr	r3, [pc, #140]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d134      	bne.n	8003f94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0xac>
 8003f40:	e005      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f42:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <HAL_RCC_GetSysClockFreq+0x110>)
 8003f44:	617b      	str	r3, [r7, #20]
      break;
 8003f46:	e005      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f4a:	617b      	str	r3, [r7, #20]
      break;
 8003f4c:	e002      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	617b      	str	r3, [r7, #20]
      break;
 8003f52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	3301      	adds	r3, #1
 8003f60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	fb03 f202 	mul.w	r2, r3, r2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	0e5b      	lsrs	r3, r3, #25
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	3301      	adds	r3, #1
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f94:	69bb      	ldr	r3, [r7, #24]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3724      	adds	r7, #36	; 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	0800725c 	.word	0x0800725c
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	007a1200 	.word	0x007a1200

08003fb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	; (8003fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000000 	.word	0x20000000

08003fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fd0:	f7ff fff0 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4904      	ldr	r1, [pc, #16]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	08007254 	.word	0x08007254

08003ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ffc:	f7ff ffda 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0adb      	lsrs	r3, r3, #11
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4904      	ldr	r1, [pc, #16]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	08007254 	.word	0x08007254

08004024 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004030:	4b2a      	ldr	r3, [pc, #168]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800403c:	f7ff f9ee 	bl	800341c <HAL_PWREx_GetVoltageRange>
 8004040:	6178      	str	r0, [r7, #20]
 8004042:	e014      	b.n	800406e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	4a24      	ldr	r2, [pc, #144]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	6593      	str	r3, [r2, #88]	; 0x58
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800405c:	f7ff f9de 	bl	800341c <HAL_PWREx_GetVoltageRange>
 8004060:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004062:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004074:	d10b      	bne.n	800408e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d919      	bls.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2ba0      	cmp	r3, #160	; 0xa0
 8004080:	d902      	bls.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004082:	2302      	movs	r3, #2
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e013      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004088:	2301      	movs	r3, #1
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	e010      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d902      	bls.n	800409a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004094:	2303      	movs	r3, #3
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e00a      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d102      	bne.n	80040a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040a0:	2302      	movs	r3, #2
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	e004      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b70      	cmp	r3, #112	; 0x70
 80040aa:	d101      	bne.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ac:	2301      	movs	r3, #1
 80040ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 0207 	bic.w	r2, r3, #7
 80040b8:	4909      	ldr	r1, [pc, #36]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d001      	beq.n	80040d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40022000 	.word	0x40022000

080040e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040ec:	2300      	movs	r3, #0
 80040ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040f0:	2300      	movs	r3, #0
 80040f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d041      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004104:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004108:	d02a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800410a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800410e:	d824      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004114:	d008      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800411a:	d81e      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004124:	d010      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004126:	e018      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004128:	4b86      	ldr	r3, [pc, #536]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a85      	ldr	r2, [pc, #532]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004132:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004134:	e015      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3304      	adds	r3, #4
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fabb 	bl	80046b8 <RCCEx_PLLSAI1_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004146:	e00c      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3320      	adds	r3, #32
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fba6 	bl	80048a0 <RCCEx_PLLSAI2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004158:	e003      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	74fb      	strb	r3, [r7, #19]
      break;
 800415e:	e000      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004162:	7cfb      	ldrb	r3, [r7, #19]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004168:	4b76      	ldr	r3, [pc, #472]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004176:	4973      	ldr	r1, [pc, #460]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800417e:	e001      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d041      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004194:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004198:	d02a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800419a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800419e:	d824      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041a4:	d008      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041aa:	d81e      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b4:	d010      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041b6:	e018      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041b8:	4b62      	ldr	r3, [pc, #392]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a61      	ldr	r2, [pc, #388]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041c4:	e015      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fa73 	bl	80046b8 <RCCEx_PLLSAI1_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041d6:	e00c      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3320      	adds	r3, #32
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fb5e 	bl	80048a0 <RCCEx_PLLSAI2_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041e8:	e003      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	74fb      	strb	r3, [r7, #19]
      break;
 80041ee:	e000      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10b      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041f8:	4b52      	ldr	r3, [pc, #328]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004206:	494f      	ldr	r1, [pc, #316]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800420e:	e001      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a0 	beq.w	8004362 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004226:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00d      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423c:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	4a40      	ldr	r2, [pc, #256]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004246:	6593      	str	r3, [r2, #88]	; 0x58
 8004248:	4b3e      	ldr	r3, [pc, #248]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004254:	2301      	movs	r3, #1
 8004256:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004258:	4b3b      	ldr	r3, [pc, #236]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a3a      	ldr	r2, [pc, #232]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800425e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004264:	f7fd f98a 	bl	800157c <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800426a:	e009      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426c:	f7fd f986 	bl	800157c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d902      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	74fb      	strb	r3, [r7, #19]
        break;
 800427e:	e005      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ef      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d15c      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004292:	4b2c      	ldr	r3, [pc, #176]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01f      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d019      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042b0:	4b24      	ldr	r3, [pc, #144]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a20      	ldr	r2, [pc, #128]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042cc:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042dc:	4a19      	ldr	r2, [pc, #100]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d016      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd f945 	bl	800157c <HAL_GetTick>
 80042f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f4:	e00b      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fd f941 	bl	800157c <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f241 3288 	movw	r2, #5000	; 0x1388
 8004304:	4293      	cmp	r3, r2
 8004306:	d902      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	74fb      	strb	r3, [r7, #19]
            break;
 800430c:	e006      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430e:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ec      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10c      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004332:	4904      	ldr	r1, [pc, #16]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800433a:	e009      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
 8004340:	e006      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004350:	7c7b      	ldrb	r3, [r7, #17]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004356:	4b9e      	ldr	r3, [pc, #632]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	4a9d      	ldr	r2, [pc, #628]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004360:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800436e:	4b98      	ldr	r3, [pc, #608]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f023 0203 	bic.w	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	4994      	ldr	r1, [pc, #592]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004390:	4b8f      	ldr	r3, [pc, #572]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f023 020c 	bic.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	498c      	ldr	r1, [pc, #560]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043b2:	4b87      	ldr	r3, [pc, #540]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	4983      	ldr	r1, [pc, #524]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043d4:	4b7e      	ldr	r3, [pc, #504]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	497b      	ldr	r1, [pc, #492]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043f6:	4b76      	ldr	r3, [pc, #472]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004404:	4972      	ldr	r1, [pc, #456]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004418:	4b6d      	ldr	r3, [pc, #436]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	496a      	ldr	r1, [pc, #424]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800443a:	4b65      	ldr	r3, [pc, #404]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004448:	4961      	ldr	r1, [pc, #388]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800445c:	4b5c      	ldr	r3, [pc, #368]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	4959      	ldr	r1, [pc, #356]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800447e:	4b54      	ldr	r3, [pc, #336]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	4950      	ldr	r1, [pc, #320]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044a0:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	4948      	ldr	r1, [pc, #288]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044c2:	4b43      	ldr	r3, [pc, #268]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	493f      	ldr	r1, [pc, #252]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d028      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044e4:	4b3a      	ldr	r3, [pc, #232]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f2:	4937      	ldr	r1, [pc, #220]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004502:	d106      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a31      	ldr	r2, [pc, #196]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450e:	60d3      	str	r3, [r2, #12]
 8004510:	e011      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800451a:	d10c      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	2101      	movs	r1, #1
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f8c8 	bl	80046b8 <RCCEx_PLLSAI1_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004532:	7cfb      	ldrb	r3, [r7, #19]
 8004534:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d028      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004542:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	491f      	ldr	r1, [pc, #124]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004560:	d106      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004562:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800456c:	60d3      	str	r3, [r2, #12]
 800456e:	e011      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004578:	d10c      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	2101      	movs	r1, #1
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f899 	bl	80046b8 <RCCEx_PLLSAI1_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02b      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ae:	4908      	ldr	r1, [pc, #32]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045be:	d109      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a02      	ldr	r2, [pc, #8]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ca:	60d3      	str	r3, [r2, #12]
 80045cc:	e014      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f867 	bl	80046b8 <RCCEx_PLLSAI1_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02f      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004604:	4b2b      	ldr	r3, [pc, #172]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004612:	4928      	ldr	r1, [pc, #160]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800461e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004622:	d10d      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	2102      	movs	r1, #2
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f844 	bl	80046b8 <RCCEx_PLLSAI1_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d014      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	74bb      	strb	r3, [r7, #18]
 800463e:	e011      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004648:	d10c      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3320      	adds	r3, #32
 800464e:	2102      	movs	r1, #2
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f925 	bl	80048a0 <RCCEx_PLLSAI2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004676:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467e:	490d      	ldr	r1, [pc, #52]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a2:	4904      	ldr	r1, [pc, #16]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000

080046b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046c6:	4b75      	ldr	r3, [pc, #468]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d018      	beq.n	8004704 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046d2:	4b72      	ldr	r3, [pc, #456]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0203 	and.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d10d      	bne.n	80046fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
       ||
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d009      	beq.n	80046fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046ea:	4b6c      	ldr	r3, [pc, #432]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
       ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d047      	beq.n	800478e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
 8004702:	e044      	b.n	800478e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d018      	beq.n	800473e <RCCEx_PLLSAI1_Config+0x86>
 800470c:	2b03      	cmp	r3, #3
 800470e:	d825      	bhi.n	800475c <RCCEx_PLLSAI1_Config+0xa4>
 8004710:	2b01      	cmp	r3, #1
 8004712:	d002      	beq.n	800471a <RCCEx_PLLSAI1_Config+0x62>
 8004714:	2b02      	cmp	r3, #2
 8004716:	d009      	beq.n	800472c <RCCEx_PLLSAI1_Config+0x74>
 8004718:	e020      	b.n	800475c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800471a:	4b60      	ldr	r3, [pc, #384]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11d      	bne.n	8004762 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800472a:	e01a      	b.n	8004762 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800472c:	4b5b      	ldr	r3, [pc, #364]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004734:	2b00      	cmp	r3, #0
 8004736:	d116      	bne.n	8004766 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800473c:	e013      	b.n	8004766 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800473e:	4b57      	ldr	r3, [pc, #348]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800474a:	4b54      	ldr	r3, [pc, #336]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800475a:	e006      	b.n	800476a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      break;
 8004760:	e004      	b.n	800476c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800476a:	bf00      	nop
    }

    if(status == HAL_OK)
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004772:	4b4a      	ldr	r3, [pc, #296]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	430b      	orrs	r3, r1
 8004788:	4944      	ldr	r1, [pc, #272]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 800478a:	4313      	orrs	r3, r2
 800478c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d17d      	bne.n	8004890 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004794:	4b41      	ldr	r3, [pc, #260]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a40      	ldr	r2, [pc, #256]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 800479a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800479e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a0:	f7fc feec 	bl	800157c <HAL_GetTick>
 80047a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047a6:	e009      	b.n	80047bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047a8:	f7fc fee8 	bl	800157c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d902      	bls.n	80047bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ba:	e005      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047bc:	4b37      	ldr	r3, [pc, #220]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1ef      	bne.n	80047a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d160      	bne.n	8004890 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d111      	bne.n	80047f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047d4:	4b31      	ldr	r3, [pc, #196]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6892      	ldr	r2, [r2, #8]
 80047e4:	0211      	lsls	r1, r2, #8
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68d2      	ldr	r2, [r2, #12]
 80047ea:	0912      	lsrs	r2, r2, #4
 80047ec:	0452      	lsls	r2, r2, #17
 80047ee:	430a      	orrs	r2, r1
 80047f0:	492a      	ldr	r1, [pc, #168]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	610b      	str	r3, [r1, #16]
 80047f6:	e027      	b.n	8004848 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d112      	bne.n	8004824 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047fe:	4b27      	ldr	r3, [pc, #156]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004806:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6892      	ldr	r2, [r2, #8]
 800480e:	0211      	lsls	r1, r2, #8
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6912      	ldr	r2, [r2, #16]
 8004814:	0852      	lsrs	r2, r2, #1
 8004816:	3a01      	subs	r2, #1
 8004818:	0552      	lsls	r2, r2, #21
 800481a:	430a      	orrs	r2, r1
 800481c:	491f      	ldr	r1, [pc, #124]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	610b      	str	r3, [r1, #16]
 8004822:	e011      	b.n	8004848 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004824:	4b1d      	ldr	r3, [pc, #116]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800482c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6892      	ldr	r2, [r2, #8]
 8004834:	0211      	lsls	r1, r2, #8
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6952      	ldr	r2, [r2, #20]
 800483a:	0852      	lsrs	r2, r2, #1
 800483c:	3a01      	subs	r2, #1
 800483e:	0652      	lsls	r2, r2, #25
 8004840:	430a      	orrs	r2, r1
 8004842:	4916      	ldr	r1, [pc, #88]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004844:	4313      	orrs	r3, r2
 8004846:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004848:	4b14      	ldr	r3, [pc, #80]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a13      	ldr	r2, [pc, #76]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 800484e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004852:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fc fe92 	bl	800157c <HAL_GetTick>
 8004858:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800485a:	e009      	b.n	8004870 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800485c:	f7fc fe8e 	bl	800157c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d902      	bls.n	8004870 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	73fb      	strb	r3, [r7, #15]
          break;
 800486e:	e005      	b.n	800487c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ef      	beq.n	800485c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	4904      	ldr	r1, [pc, #16]	; (800489c <RCCEx_PLLSAI1_Config+0x1e4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000

080048a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ae:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048ba:	4b67      	ldr	r3, [pc, #412]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0203 	and.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d10d      	bne.n	80048e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
       ||
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048d2:	4b61      	ldr	r3, [pc, #388]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
       ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d047      	beq.n	8004976 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e044      	b.n	8004976 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d018      	beq.n	8004926 <RCCEx_PLLSAI2_Config+0x86>
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d825      	bhi.n	8004944 <RCCEx_PLLSAI2_Config+0xa4>
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d002      	beq.n	8004902 <RCCEx_PLLSAI2_Config+0x62>
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d009      	beq.n	8004914 <RCCEx_PLLSAI2_Config+0x74>
 8004900:	e020      	b.n	8004944 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004902:	4b55      	ldr	r3, [pc, #340]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11d      	bne.n	800494a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004912:	e01a      	b.n	800494a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004914:	4b50      	ldr	r3, [pc, #320]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d116      	bne.n	800494e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004924:	e013      	b.n	800494e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004926:	4b4c      	ldr	r3, [pc, #304]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004932:	4b49      	ldr	r3, [pc, #292]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004942:	e006      	b.n	8004952 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      break;
 8004948:	e004      	b.n	8004954 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004952:	bf00      	nop
    }

    if(status == HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800495a:	4b3f      	ldr	r3, [pc, #252]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	430b      	orrs	r3, r1
 8004970:	4939      	ldr	r1, [pc, #228]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004972:	4313      	orrs	r3, r2
 8004974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d167      	bne.n	8004a4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800497c:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a35      	ldr	r2, [pc, #212]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fc fdf8 	bl	800157c <HAL_GetTick>
 800498c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800498e:	e009      	b.n	80049a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004990:	f7fc fdf4 	bl	800157c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d902      	bls.n	80049a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	73fb      	strb	r3, [r7, #15]
        break;
 80049a2:	e005      	b.n	80049b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049a4:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ef      	bne.n	8004990 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d14a      	bne.n	8004a4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d111      	bne.n	80049e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049bc:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6892      	ldr	r2, [r2, #8]
 80049cc:	0211      	lsls	r1, r2, #8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68d2      	ldr	r2, [r2, #12]
 80049d2:	0912      	lsrs	r2, r2, #4
 80049d4:	0452      	lsls	r2, r2, #17
 80049d6:	430a      	orrs	r2, r1
 80049d8:	491f      	ldr	r1, [pc, #124]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	614b      	str	r3, [r1, #20]
 80049de:	e011      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	0211      	lsls	r1, r2, #8
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6912      	ldr	r2, [r2, #16]
 80049f6:	0852      	lsrs	r2, r2, #1
 80049f8:	3a01      	subs	r2, #1
 80049fa:	0652      	lsls	r2, r2, #25
 80049fc:	430a      	orrs	r2, r1
 80049fe:	4916      	ldr	r1, [pc, #88]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a04:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a10:	f7fc fdb4 	bl	800157c <HAL_GetTick>
 8004a14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a16:	e009      	b.n	8004a2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a18:	f7fc fdb0 	bl	800157c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d902      	bls.n	8004a2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	73fb      	strb	r3, [r7, #15]
          break;
 8004a2a:	e005      	b.n	8004a38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ef      	beq.n	8004a18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a3e:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4904      	ldr	r1, [pc, #16]	; (8004a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000

08004a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e040      	b.n	8004af0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fc14 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2224      	movs	r2, #36	; 0x24
 8004a88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fb6a 	bl	800517c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8af 	bl	8004c0c <UART_SetConfig>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e01b      	b.n	8004af0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fbe9 	bl	80052c0 <UART_CheckIdleState>
 8004aee:	4603      	mov	r3, r0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d178      	bne.n	8004c02 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_UART_Transmit+0x24>
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e071      	b.n	8004c04 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2221      	movs	r2, #33	; 0x21
 8004b2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b2e:	f7fc fd25 	bl	800157c <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	88fa      	ldrh	r2, [r7, #6]
 8004b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4c:	d108      	bne.n	8004b60 <HAL_UART_Transmit+0x68>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d104      	bne.n	8004b60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	e003      	b.n	8004b68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b68:	e030      	b.n	8004bcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fc4b 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e03c      	b.n	8004c04 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	881a      	ldrh	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	3302      	adds	r3, #2
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e008      	b.n	8004bba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	b292      	uxth	r2, r2
 8004bb2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1c8      	bne.n	8004b6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2200      	movs	r2, #0
 8004be0:	2140      	movs	r1, #64	; 0x40
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fc14 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d004      	beq.n	8004bf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e005      	b.n	8004c04 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c10:	b08a      	sub	sp, #40	; 0x28
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4ba4      	ldr	r3, [pc, #656]	; (8004ecc <UART_SetConfig+0x2c0>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a99      	ldr	r2, [pc, #612]	; (8004ed0 <UART_SetConfig+0x2c4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c74:	4313      	orrs	r3, r2
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a90      	ldr	r2, [pc, #576]	; (8004ed4 <UART_SetConfig+0x2c8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d126      	bne.n	8004ce4 <UART_SetConfig+0xd8>
 8004c96:	4b90      	ldr	r3, [pc, #576]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d81b      	bhi.n	8004cdc <UART_SetConfig+0xd0>
 8004ca4:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0xa0>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	08004cc5 	.word	0x08004cc5
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e116      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e112      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e10e      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e10a      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e106      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a7c      	ldr	r2, [pc, #496]	; (8004edc <UART_SetConfig+0x2d0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d138      	bne.n	8004d60 <UART_SetConfig+0x154>
 8004cee:	4b7a      	ldr	r3, [pc, #488]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f003 030c 	and.w	r3, r3, #12
 8004cf8:	2b0c      	cmp	r3, #12
 8004cfa:	d82d      	bhi.n	8004d58 <UART_SetConfig+0x14c>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0xf8>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d39 	.word	0x08004d39
 8004d08:	08004d59 	.word	0x08004d59
 8004d0c:	08004d59 	.word	0x08004d59
 8004d10:	08004d59 	.word	0x08004d59
 8004d14:	08004d49 	.word	0x08004d49
 8004d18:	08004d59 	.word	0x08004d59
 8004d1c:	08004d59 	.word	0x08004d59
 8004d20:	08004d59 	.word	0x08004d59
 8004d24:	08004d41 	.word	0x08004d41
 8004d28:	08004d59 	.word	0x08004d59
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d51 	.word	0x08004d51
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e0d8      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e0d4      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	e0d0      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d56:	e0cc      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5e:	e0c8      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a5e      	ldr	r2, [pc, #376]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d125      	bne.n	8004db6 <UART_SetConfig+0x1aa>
 8004d6a:	4b5b      	ldr	r3, [pc, #364]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d74:	2b30      	cmp	r3, #48	; 0x30
 8004d76:	d016      	beq.n	8004da6 <UART_SetConfig+0x19a>
 8004d78:	2b30      	cmp	r3, #48	; 0x30
 8004d7a:	d818      	bhi.n	8004dae <UART_SetConfig+0x1a2>
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d00a      	beq.n	8004d96 <UART_SetConfig+0x18a>
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d814      	bhi.n	8004dae <UART_SetConfig+0x1a2>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <UART_SetConfig+0x182>
 8004d88:	2b10      	cmp	r3, #16
 8004d8a:	d008      	beq.n	8004d9e <UART_SetConfig+0x192>
 8004d8c:	e00f      	b.n	8004dae <UART_SetConfig+0x1a2>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d94:	e0ad      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004d96:	2302      	movs	r3, #2
 8004d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9c:	e0a9      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004d9e:	2304      	movs	r3, #4
 8004da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da4:	e0a5      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004da6:	2308      	movs	r3, #8
 8004da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dac:	e0a1      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004dae:	2310      	movs	r3, #16
 8004db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db4:	e09d      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a4a      	ldr	r2, [pc, #296]	; (8004ee4 <UART_SetConfig+0x2d8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d125      	bne.n	8004e0c <UART_SetConfig+0x200>
 8004dc0:	4b45      	ldr	r3, [pc, #276]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dca:	2bc0      	cmp	r3, #192	; 0xc0
 8004dcc:	d016      	beq.n	8004dfc <UART_SetConfig+0x1f0>
 8004dce:	2bc0      	cmp	r3, #192	; 0xc0
 8004dd0:	d818      	bhi.n	8004e04 <UART_SetConfig+0x1f8>
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d00a      	beq.n	8004dec <UART_SetConfig+0x1e0>
 8004dd6:	2b80      	cmp	r3, #128	; 0x80
 8004dd8:	d814      	bhi.n	8004e04 <UART_SetConfig+0x1f8>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <UART_SetConfig+0x1d8>
 8004dde:	2b40      	cmp	r3, #64	; 0x40
 8004de0:	d008      	beq.n	8004df4 <UART_SetConfig+0x1e8>
 8004de2:	e00f      	b.n	8004e04 <UART_SetConfig+0x1f8>
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e082      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004dec:	2302      	movs	r3, #2
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e07e      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004df4:	2304      	movs	r3, #4
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e07a      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e076      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004e04:	2310      	movs	r3, #16
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e072      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a35      	ldr	r2, [pc, #212]	; (8004ee8 <UART_SetConfig+0x2dc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d12a      	bne.n	8004e6c <UART_SetConfig+0x260>
 8004e16:	4b30      	ldr	r3, [pc, #192]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e24:	d01a      	beq.n	8004e5c <UART_SetConfig+0x250>
 8004e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2a:	d81b      	bhi.n	8004e64 <UART_SetConfig+0x258>
 8004e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e30:	d00c      	beq.n	8004e4c <UART_SetConfig+0x240>
 8004e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e36:	d815      	bhi.n	8004e64 <UART_SetConfig+0x258>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <UART_SetConfig+0x238>
 8004e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e40:	d008      	beq.n	8004e54 <UART_SetConfig+0x248>
 8004e42:	e00f      	b.n	8004e64 <UART_SetConfig+0x258>
 8004e44:	2300      	movs	r3, #0
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4a:	e052      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e04e      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004e54:	2304      	movs	r3, #4
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e04a      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e62:	e046      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004e64:	2310      	movs	r3, #16
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6a:	e042      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <UART_SetConfig+0x2c4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d13a      	bne.n	8004eec <UART_SetConfig+0x2e0>
 8004e76:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e84:	d01a      	beq.n	8004ebc <UART_SetConfig+0x2b0>
 8004e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e8a:	d81b      	bhi.n	8004ec4 <UART_SetConfig+0x2b8>
 8004e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e90:	d00c      	beq.n	8004eac <UART_SetConfig+0x2a0>
 8004e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e96:	d815      	bhi.n	8004ec4 <UART_SetConfig+0x2b8>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <UART_SetConfig+0x298>
 8004e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea0:	d008      	beq.n	8004eb4 <UART_SetConfig+0x2a8>
 8004ea2:	e00f      	b.n	8004ec4 <UART_SetConfig+0x2b8>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eaa:	e022      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004eac:	2302      	movs	r3, #2
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb2:	e01e      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eba:	e01a      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec2:	e016      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eca:	e012      	b.n	8004ef2 <UART_SetConfig+0x2e6>
 8004ecc:	efff69f3 	.word	0xefff69f3
 8004ed0:	40008000 	.word	0x40008000
 8004ed4:	40013800 	.word	0x40013800
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40004400 	.word	0x40004400
 8004ee0:	40004800 	.word	0x40004800
 8004ee4:	40004c00 	.word	0x40004c00
 8004ee8:	40005000 	.word	0x40005000
 8004eec:	2310      	movs	r3, #16
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a9f      	ldr	r2, [pc, #636]	; (8005174 <UART_SetConfig+0x568>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d17a      	bne.n	8004ff2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004efc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d824      	bhi.n	8004f4e <UART_SetConfig+0x342>
 8004f04:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <UART_SetConfig+0x300>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f31 	.word	0x08004f31
 8004f10:	08004f4f 	.word	0x08004f4f
 8004f14:	08004f39 	.word	0x08004f39
 8004f18:	08004f4f 	.word	0x08004f4f
 8004f1c:	08004f3f 	.word	0x08004f3f
 8004f20:	08004f4f 	.word	0x08004f4f
 8004f24:	08004f4f 	.word	0x08004f4f
 8004f28:	08004f4f 	.word	0x08004f4f
 8004f2c:	08004f47 	.word	0x08004f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f30:	f7ff f84c 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 8004f34:	61f8      	str	r0, [r7, #28]
        break;
 8004f36:	e010      	b.n	8004f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f38:	4b8f      	ldr	r3, [pc, #572]	; (8005178 <UART_SetConfig+0x56c>)
 8004f3a:	61fb      	str	r3, [r7, #28]
        break;
 8004f3c:	e00d      	b.n	8004f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3e:	f7fe ffad 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8004f42:	61f8      	str	r0, [r7, #28]
        break;
 8004f44:	e009      	b.n	8004f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4a:	61fb      	str	r3, [r7, #28]
        break;
 8004f4c:	e005      	b.n	8004f5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80fb 	beq.w	8005158 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4413      	add	r3, r2
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d305      	bcc.n	8004f7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d903      	bls.n	8004f86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f84:	e0e8      	b.n	8005158 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	461c      	mov	r4, r3
 8004f8c:	4615      	mov	r5, r2
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	022b      	lsls	r3, r5, #8
 8004f98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f9c:	0222      	lsls	r2, r4, #8
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	6849      	ldr	r1, [r1, #4]
 8004fa2:	0849      	lsrs	r1, r1, #1
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	4688      	mov	r8, r1
 8004fa8:	4681      	mov	r9, r0
 8004faa:	eb12 0a08 	adds.w	sl, r2, r8
 8004fae:	eb43 0b09 	adc.w	fp, r3, r9
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc0:	4650      	mov	r0, sl
 8004fc2:	4659      	mov	r1, fp
 8004fc4:	f7fb fc92 	bl	80008ec <__aeabi_uldivmod>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4613      	mov	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd6:	d308      	bcc.n	8004fea <UART_SetConfig+0x3de>
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fde:	d204      	bcs.n	8004fea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	60da      	str	r2, [r3, #12]
 8004fe8:	e0b6      	b.n	8005158 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ff0:	e0b2      	b.n	8005158 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ffa:	d15e      	bne.n	80050ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005000:	2b08      	cmp	r3, #8
 8005002:	d828      	bhi.n	8005056 <UART_SetConfig+0x44a>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x400>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005031 	.word	0x08005031
 8005010:	08005039 	.word	0x08005039
 8005014:	08005041 	.word	0x08005041
 8005018:	08005057 	.word	0x08005057
 800501c:	08005047 	.word	0x08005047
 8005020:	08005057 	.word	0x08005057
 8005024:	08005057 	.word	0x08005057
 8005028:	08005057 	.word	0x08005057
 800502c:	0800504f 	.word	0x0800504f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005030:	f7fe ffcc 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 8005034:	61f8      	str	r0, [r7, #28]
        break;
 8005036:	e014      	b.n	8005062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005038:	f7fe ffde 	bl	8003ff8 <HAL_RCC_GetPCLK2Freq>
 800503c:	61f8      	str	r0, [r7, #28]
        break;
 800503e:	e010      	b.n	8005062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005040:	4b4d      	ldr	r3, [pc, #308]	; (8005178 <UART_SetConfig+0x56c>)
 8005042:	61fb      	str	r3, [r7, #28]
        break;
 8005044:	e00d      	b.n	8005062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005046:	f7fe ff29 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 800504a:	61f8      	str	r0, [r7, #28]
        break;
 800504c:	e009      	b.n	8005062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800504e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005052:	61fb      	str	r3, [r7, #28]
        break;
 8005054:	e005      	b.n	8005062 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d077      	beq.n	8005158 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	005a      	lsls	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	441a      	add	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b0f      	cmp	r3, #15
 8005082:	d916      	bls.n	80050b2 <UART_SetConfig+0x4a6>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508a:	d212      	bcs.n	80050b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f023 030f 	bic.w	r3, r3, #15
 8005094:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	b29b      	uxth	r3, r3
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	8afb      	ldrh	r3, [r7, #22]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	8afa      	ldrh	r2, [r7, #22]
 80050ae:	60da      	str	r2, [r3, #12]
 80050b0:	e052      	b.n	8005158 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050b8:	e04e      	b.n	8005158 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d827      	bhi.n	8005112 <UART_SetConfig+0x506>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <UART_SetConfig+0x4bc>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	08005113 	.word	0x08005113
 80050d8:	08005103 	.word	0x08005103
 80050dc:	08005113 	.word	0x08005113
 80050e0:	08005113 	.word	0x08005113
 80050e4:	08005113 	.word	0x08005113
 80050e8:	0800510b 	.word	0x0800510b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ec:	f7fe ff6e 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 80050f0:	61f8      	str	r0, [r7, #28]
        break;
 80050f2:	e014      	b.n	800511e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f4:	f7fe ff80 	bl	8003ff8 <HAL_RCC_GetPCLK2Freq>
 80050f8:	61f8      	str	r0, [r7, #28]
        break;
 80050fa:	e010      	b.n	800511e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050fc:	4b1e      	ldr	r3, [pc, #120]	; (8005178 <UART_SetConfig+0x56c>)
 80050fe:	61fb      	str	r3, [r7, #28]
        break;
 8005100:	e00d      	b.n	800511e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005102:	f7fe fecb 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8005106:	61f8      	str	r0, [r7, #28]
        break;
 8005108:	e009      	b.n	800511e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510e:	61fb      	str	r3, [r7, #28]
        break;
 8005110:	e005      	b.n	800511e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800511c:	bf00      	nop
    }

    if (pclk != 0U)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d019      	beq.n	8005158 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	085a      	lsrs	r2, r3, #1
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	441a      	add	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	fbb2 f3f3 	udiv	r3, r2, r3
 8005136:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d909      	bls.n	8005152 <UART_SetConfig+0x546>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d205      	bcs.n	8005152 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60da      	str	r2, [r3, #12]
 8005150:	e002      	b.n	8005158 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005164:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	; 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005172:	bf00      	nop
 8005174:	40008000 	.word	0x40008000
 8005178:	00f42400 	.word	0x00f42400

0800517c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01a      	beq.n	8005292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527a:	d10a      	bne.n	8005292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  }
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b098      	sub	sp, #96	; 0x60
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d0:	f7fc f954 	bl	800157c <HAL_GetTick>
 80052d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d12e      	bne.n	8005342 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ec:	2200      	movs	r2, #0
 80052ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f88c 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d021      	beq.n	8005342 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005312:	653b      	str	r3, [r7, #80]	; 0x50
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800531c:	647b      	str	r3, [r7, #68]	; 0x44
 800531e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e6      	bne.n	80052fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e062      	b.n	8005408 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b04      	cmp	r3, #4
 800534e:	d149      	bne.n	80053e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005358:	2200      	movs	r2, #0
 800535a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f856 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d03c      	beq.n	80053e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	623b      	str	r3, [r7, #32]
   return(result);
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005388:	633b      	str	r3, [r7, #48]	; 0x30
 800538a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800538e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e6      	bne.n	800536a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053bc:	61fa      	str	r2, [r7, #28]
 80053be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	69b9      	ldr	r1, [r7, #24]
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	617b      	str	r3, [r7, #20]
   return(result);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e011      	b.n	8005408 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3758      	adds	r7, #88	; 0x58
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005420:	e049      	b.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005428:	d045      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7fc f8a7 	bl	800157c <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <UART_WaitOnFlagUntilTimeout+0x30>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e048      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d031      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b08      	cmp	r3, #8
 800545e:	d110      	bne.n	8005482 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2208      	movs	r2, #8
 8005466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f838 	bl	80054de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2208      	movs	r2, #8
 8005472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e029      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005490:	d111      	bne.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800549a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f81e 	bl	80054de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e00f      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4013      	ands	r3, r2
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	bf0c      	ite	eq
 80054c6:	2301      	moveq	r3, #1
 80054c8:	2300      	movne	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d0a6      	beq.n	8005422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054de:	b480      	push	{r7}
 80054e0:	b095      	sub	sp, #84	; 0x54
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005504:	643b      	str	r3, [r7, #64]	; 0x40
 8005506:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800550a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e6      	bne.n	80054e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	61fb      	str	r3, [r7, #28]
   return(result);
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005538:	62fa      	str	r2, [r7, #44]	; 0x2c
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800553e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e5      	bne.n	8005518 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005550:	2b01      	cmp	r3, #1
 8005552:	d118      	bne.n	8005586 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	60bb      	str	r3, [r7, #8]
   return(result);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f023 0310 	bic.w	r3, r3, #16
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6979      	ldr	r1, [r7, #20]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	613b      	str	r3, [r7, #16]
   return(result);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e6      	bne.n	8005554 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	669a      	str	r2, [r3, #104]	; 0x68
}
 800559a:	bf00      	nop
 800559c:	3754      	adds	r7, #84	; 0x54
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <arm_rfft_32_fast_init_f32>:
 80055a8:	b178      	cbz	r0, 80055ca <arm_rfft_32_fast_init_f32+0x22>
 80055aa:	b430      	push	{r4, r5}
 80055ac:	4908      	ldr	r1, [pc, #32]	; (80055d0 <arm_rfft_32_fast_init_f32+0x28>)
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <arm_rfft_32_fast_init_f32+0x2c>)
 80055b0:	2310      	movs	r3, #16
 80055b2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80055b6:	8003      	strh	r3, [r0, #0]
 80055b8:	2520      	movs	r5, #32
 80055ba:	2414      	movs	r4, #20
 80055bc:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <arm_rfft_32_fast_init_f32+0x30>)
 80055be:	8205      	strh	r5, [r0, #16]
 80055c0:	8184      	strh	r4, [r0, #12]
 80055c2:	6143      	str	r3, [r0, #20]
 80055c4:	bc30      	pop	{r4, r5}
 80055c6:	2000      	movs	r0, #0
 80055c8:	4770      	bx	lr
 80055ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ce:	4770      	bx	lr
 80055d0:	0800823c 	.word	0x0800823c
 80055d4:	0800cb74 	.word	0x0800cb74
 80055d8:	080158f4 	.word	0x080158f4

080055dc <arm_rfft_64_fast_init_f32>:
 80055dc:	b178      	cbz	r0, 80055fe <arm_rfft_64_fast_init_f32+0x22>
 80055de:	b430      	push	{r4, r5}
 80055e0:	4908      	ldr	r1, [pc, #32]	; (8005604 <arm_rfft_64_fast_init_f32+0x28>)
 80055e2:	4a09      	ldr	r2, [pc, #36]	; (8005608 <arm_rfft_64_fast_init_f32+0x2c>)
 80055e4:	2320      	movs	r3, #32
 80055e6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80055ea:	8003      	strh	r3, [r0, #0]
 80055ec:	2540      	movs	r5, #64	; 0x40
 80055ee:	2430      	movs	r4, #48	; 0x30
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <arm_rfft_64_fast_init_f32+0x30>)
 80055f2:	8205      	strh	r5, [r0, #16]
 80055f4:	8184      	strh	r4, [r0, #12]
 80055f6:	6143      	str	r3, [r0, #20]
 80055f8:	bc30      	pop	{r4, r5}
 80055fa:	2000      	movs	r0, #0
 80055fc:	4770      	bx	lr
 80055fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005602:	4770      	bx	lr
 8005604:	0800a394 	.word	0x0800a394
 8005608:	080113f4 	.word	0x080113f4
 800560c:	0801a174 	.word	0x0801a174

08005610 <arm_rfft_256_fast_init_f32>:
 8005610:	b180      	cbz	r0, 8005634 <arm_rfft_256_fast_init_f32+0x24>
 8005612:	b430      	push	{r4, r5}
 8005614:	4909      	ldr	r1, [pc, #36]	; (800563c <arm_rfft_256_fast_init_f32+0x2c>)
 8005616:	4a0a      	ldr	r2, [pc, #40]	; (8005640 <arm_rfft_256_fast_init_f32+0x30>)
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800561e:	8003      	strh	r3, [r0, #0]
 8005620:	f44f 7580 	mov.w	r5, #256	; 0x100
 8005624:	24d0      	movs	r4, #208	; 0xd0
 8005626:	4b07      	ldr	r3, [pc, #28]	; (8005644 <arm_rfft_256_fast_init_f32+0x34>)
 8005628:	8205      	strh	r5, [r0, #16]
 800562a:	8184      	strh	r4, [r0, #12]
 800562c:	6143      	str	r3, [r0, #20]
 800562e:	bc30      	pop	{r4, r5}
 8005630:	2000      	movs	r0, #0
 8005632:	4770      	bx	lr
 8005634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	0800809c 	.word	0x0800809c
 8005640:	0800c774 	.word	0x0800c774
 8005644:	080154f4 	.word	0x080154f4

08005648 <arm_rfft_512_fast_init_f32>:
 8005648:	b190      	cbz	r0, 8005670 <arm_rfft_512_fast_init_f32+0x28>
 800564a:	b430      	push	{r4, r5}
 800564c:	490a      	ldr	r1, [pc, #40]	; (8005678 <arm_rfft_512_fast_init_f32+0x30>)
 800564e:	4a0b      	ldr	r2, [pc, #44]	; (800567c <arm_rfft_512_fast_init_f32+0x34>)
 8005650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005654:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005658:	8003      	strh	r3, [r0, #0]
 800565a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800565e:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8005662:	4b07      	ldr	r3, [pc, #28]	; (8005680 <arm_rfft_512_fast_init_f32+0x38>)
 8005664:	8205      	strh	r5, [r0, #16]
 8005666:	8184      	strh	r4, [r0, #12]
 8005668:	6143      	str	r3, [r0, #20]
 800566a:	bc30      	pop	{r4, r5}
 800566c:	2000      	movs	r0, #0
 800566e:	4770      	bx	lr
 8005670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	0800a024 	.word	0x0800a024
 800567c:	08010bf4 	.word	0x08010bf4
 8005680:	08019974 	.word	0x08019974

08005684 <arm_rfft_1024_fast_init_f32>:
 8005684:	b190      	cbz	r0, 80056ac <arm_rfft_1024_fast_init_f32+0x28>
 8005686:	b430      	push	{r4, r5}
 8005688:	490a      	ldr	r1, [pc, #40]	; (80056b4 <arm_rfft_1024_fast_init_f32+0x30>)
 800568a:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <arm_rfft_1024_fast_init_f32+0x34>)
 800568c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005690:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005694:	8003      	strh	r3, [r0, #0]
 8005696:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800569a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <arm_rfft_1024_fast_init_f32+0x38>)
 80056a0:	8205      	strh	r5, [r0, #16]
 80056a2:	8184      	strh	r4, [r0, #12]
 80056a4:	6143      	str	r3, [r0, #20]
 80056a6:	bc30      	pop	{r4, r5}
 80056a8:	2000      	movs	r0, #0
 80056aa:	4770      	bx	lr
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	0800a3f4 	.word	0x0800a3f4
 80056b8:	080114f4 	.word	0x080114f4
 80056bc:	080124f4 	.word	0x080124f4

080056c0 <arm_rfft_2048_fast_init_f32>:
 80056c0:	b190      	cbz	r0, 80056e8 <arm_rfft_2048_fast_init_f32+0x28>
 80056c2:	b430      	push	{r4, r5}
 80056c4:	490a      	ldr	r1, [pc, #40]	; (80056f0 <arm_rfft_2048_fast_init_f32+0x30>)
 80056c6:	4a0b      	ldr	r2, [pc, #44]	; (80056f4 <arm_rfft_2048_fast_init_f32+0x34>)
 80056c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056cc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80056d0:	8003      	strh	r3, [r0, #0]
 80056d2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80056d6:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <arm_rfft_2048_fast_init_f32+0x38>)
 80056dc:	8205      	strh	r5, [r0, #16]
 80056de:	8184      	strh	r4, [r0, #12]
 80056e0:	6143      	str	r3, [r0, #20]
 80056e2:	bc30      	pop	{r4, r5}
 80056e4:	2000      	movs	r0, #0
 80056e6:	4770      	bx	lr
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	0800728c 	.word	0x0800728c
 80056f4:	0800a774 	.word	0x0800a774
 80056f8:	080134f4 	.word	0x080134f4

080056fc <arm_rfft_4096_fast_init_f32>:
 80056fc:	b190      	cbz	r0, 8005724 <arm_rfft_4096_fast_init_f32+0x28>
 80056fe:	b430      	push	{r4, r5}
 8005700:	490a      	ldr	r1, [pc, #40]	; (800572c <arm_rfft_4096_fast_init_f32+0x30>)
 8005702:	4a0b      	ldr	r2, [pc, #44]	; (8005730 <arm_rfft_4096_fast_init_f32+0x34>)
 8005704:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005708:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800570c:	8003      	strh	r3, [r0, #0]
 800570e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8005712:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <arm_rfft_4096_fast_init_f32+0x38>)
 8005718:	8205      	strh	r5, [r0, #16]
 800571a:	8184      	strh	r4, [r0, #12]
 800571c:	6143      	str	r3, [r0, #20]
 800571e:	bc30      	pop	{r4, r5}
 8005720:	2000      	movs	r0, #0
 8005722:	4770      	bx	lr
 8005724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	08008264 	.word	0x08008264
 8005730:	0800cbf4 	.word	0x0800cbf4
 8005734:	08015974 	.word	0x08015974

08005738 <arm_rfft_fast_init_f32>:
 8005738:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800573c:	d01f      	beq.n	800577e <arm_rfft_fast_init_f32+0x46>
 800573e:	d90b      	bls.n	8005758 <arm_rfft_fast_init_f32+0x20>
 8005740:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005744:	d019      	beq.n	800577a <arm_rfft_fast_init_f32+0x42>
 8005746:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800574a:	d012      	beq.n	8005772 <arm_rfft_fast_init_f32+0x3a>
 800574c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005750:	d00d      	beq.n	800576e <arm_rfft_fast_init_f32+0x36>
 8005752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005756:	4770      	bx	lr
 8005758:	2940      	cmp	r1, #64	; 0x40
 800575a:	d00c      	beq.n	8005776 <arm_rfft_fast_init_f32+0x3e>
 800575c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005760:	d003      	beq.n	800576a <arm_rfft_fast_init_f32+0x32>
 8005762:	2920      	cmp	r1, #32
 8005764:	d1f5      	bne.n	8005752 <arm_rfft_fast_init_f32+0x1a>
 8005766:	4b07      	ldr	r3, [pc, #28]	; (8005784 <arm_rfft_fast_init_f32+0x4c>)
 8005768:	4718      	bx	r3
 800576a:	4b07      	ldr	r3, [pc, #28]	; (8005788 <arm_rfft_fast_init_f32+0x50>)
 800576c:	4718      	bx	r3
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <arm_rfft_fast_init_f32+0x54>)
 8005770:	4718      	bx	r3
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <arm_rfft_fast_init_f32+0x58>)
 8005774:	4718      	bx	r3
 8005776:	4b07      	ldr	r3, [pc, #28]	; (8005794 <arm_rfft_fast_init_f32+0x5c>)
 8005778:	e7f6      	b.n	8005768 <arm_rfft_fast_init_f32+0x30>
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <arm_rfft_fast_init_f32+0x60>)
 800577c:	e7f4      	b.n	8005768 <arm_rfft_fast_init_f32+0x30>
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <arm_rfft_fast_init_f32+0x64>)
 8005780:	e7f2      	b.n	8005768 <arm_rfft_fast_init_f32+0x30>
 8005782:	bf00      	nop
 8005784:	080055a9 	.word	0x080055a9
 8005788:	08005611 	.word	0x08005611
 800578c:	08005685 	.word	0x08005685
 8005790:	080056fd 	.word	0x080056fd
 8005794:	080055dd 	.word	0x080055dd
 8005798:	080056c1 	.word	0x080056c1
 800579c:	08005649 	.word	0x08005649

080057a0 <stage_rfft_f32>:
 80057a0:	b410      	push	{r4}
 80057a2:	edd1 7a00 	vldr	s15, [r1]
 80057a6:	ed91 7a01 	vldr	s14, [r1, #4]
 80057aa:	8804      	ldrh	r4, [r0, #0]
 80057ac:	6940      	ldr	r0, [r0, #20]
 80057ae:	ee37 7a07 	vadd.f32	s14, s14, s14
 80057b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80057b6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80057ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 80057be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057c2:	3c01      	subs	r4, #1
 80057c4:	ee26 7a84 	vmul.f32	s14, s13, s8
 80057c8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80057cc:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80057d0:	ed82 7a00 	vstr	s14, [r2]
 80057d4:	edc2 7a01 	vstr	s15, [r2, #4]
 80057d8:	3010      	adds	r0, #16
 80057da:	3210      	adds	r2, #16
 80057dc:	3b08      	subs	r3, #8
 80057de:	3110      	adds	r1, #16
 80057e0:	ed11 5a02 	vldr	s10, [r1, #-8]
 80057e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80057e8:	ed50 6a02 	vldr	s13, [r0, #-8]
 80057ec:	edd3 4a03 	vldr	s9, [r3, #12]
 80057f0:	ed51 7a01 	vldr	s15, [r1, #-4]
 80057f4:	ed10 6a01 	vldr	s12, [r0, #-4]
 80057f8:	ee77 5a45 	vsub.f32	s11, s14, s10
 80057fc:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005800:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005804:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005808:	ee66 5a25 	vmul.f32	s11, s12, s11
 800580c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005810:	ee37 7a23 	vadd.f32	s14, s14, s7
 8005814:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005818:	ee26 6a05 	vmul.f32	s12, s12, s10
 800581c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005820:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005824:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005828:	ee27 7a04 	vmul.f32	s14, s14, s8
 800582c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005830:	3c01      	subs	r4, #1
 8005832:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005836:	ed42 7a01 	vstr	s15, [r2, #-4]
 800583a:	f1a3 0308 	sub.w	r3, r3, #8
 800583e:	f101 0108 	add.w	r1, r1, #8
 8005842:	f100 0008 	add.w	r0, r0, #8
 8005846:	f102 0208 	add.w	r2, r2, #8
 800584a:	d1c9      	bne.n	80057e0 <stage_rfft_f32+0x40>
 800584c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop

08005854 <merge_rfft_f32>:
 8005854:	b410      	push	{r4}
 8005856:	edd1 7a00 	vldr	s15, [r1]
 800585a:	edd1 6a01 	vldr	s13, [r1, #4]
 800585e:	8804      	ldrh	r4, [r0, #0]
 8005860:	6940      	ldr	r0, [r0, #20]
 8005862:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005866:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800586a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800586e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005872:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005876:	3c01      	subs	r4, #1
 8005878:	ed82 7a00 	vstr	s14, [r2]
 800587c:	edc2 7a01 	vstr	s15, [r2, #4]
 8005880:	b3dc      	cbz	r4, 80058fa <merge_rfft_f32+0xa6>
 8005882:	00e3      	lsls	r3, r4, #3
 8005884:	3b08      	subs	r3, #8
 8005886:	440b      	add	r3, r1
 8005888:	3010      	adds	r0, #16
 800588a:	3210      	adds	r2, #16
 800588c:	3110      	adds	r1, #16
 800588e:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005892:	ed93 7a02 	vldr	s14, [r3, #8]
 8005896:	ed50 6a02 	vldr	s13, [r0, #-8]
 800589a:	edd3 4a03 	vldr	s9, [r3, #12]
 800589e:	ed51 7a01 	vldr	s15, [r1, #-4]
 80058a2:	ed10 6a01 	vldr	s12, [r0, #-4]
 80058a6:	ee75 5a47 	vsub.f32	s11, s10, s14
 80058aa:	ee37 7a05 	vadd.f32	s14, s14, s10
 80058ae:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80058b2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80058b6:	ee66 5a25 	vmul.f32	s11, s12, s11
 80058ba:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80058be:	ee37 7a63 	vsub.f32	s14, s14, s7
 80058c2:	ee66 6a85 	vmul.f32	s13, s13, s10
 80058c6:	ee26 6a05 	vmul.f32	s12, s12, s10
 80058ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80058ce:	ee37 7a46 	vsub.f32	s14, s14, s12
 80058d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80058da:	ee67 7a84 	vmul.f32	s15, s15, s8
 80058de:	3c01      	subs	r4, #1
 80058e0:	ed02 7a02 	vstr	s14, [r2, #-8]
 80058e4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80058e8:	f1a3 0308 	sub.w	r3, r3, #8
 80058ec:	f101 0108 	add.w	r1, r1, #8
 80058f0:	f100 0008 	add.w	r0, r0, #8
 80058f4:	f102 0208 	add.w	r2, r2, #8
 80058f8:	d1c9      	bne.n	800588e <merge_rfft_f32+0x3a>
 80058fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <arm_rfft_fast_f32>:
 8005900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005904:	8a05      	ldrh	r5, [r0, #16]
 8005906:	086d      	lsrs	r5, r5, #1
 8005908:	8005      	strh	r5, [r0, #0]
 800590a:	4604      	mov	r4, r0
 800590c:	4616      	mov	r6, r2
 800590e:	461d      	mov	r5, r3
 8005910:	b14b      	cbz	r3, 8005926 <arm_rfft_fast_f32+0x26>
 8005912:	f7ff ff9f 	bl	8005854 <merge_rfft_f32>
 8005916:	462a      	mov	r2, r5
 8005918:	4631      	mov	r1, r6
 800591a:	4620      	mov	r0, r4
 800591c:	2301      	movs	r3, #1
 800591e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005922:	f000 bb33 	b.w	8005f8c <arm_cfft_f32>
 8005926:	460f      	mov	r7, r1
 8005928:	461a      	mov	r2, r3
 800592a:	2301      	movs	r3, #1
 800592c:	f000 fb2e 	bl	8005f8c <arm_cfft_f32>
 8005930:	4632      	mov	r2, r6
 8005932:	4639      	mov	r1, r7
 8005934:	4620      	mov	r0, r4
 8005936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800593a:	f7ff bf31 	b.w	80057a0 <stage_rfft_f32>
 800593e:	bf00      	nop

08005940 <arm_cfft_radix8by2_f32>:
 8005940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	ed2d 8b08 	vpush	{d8-d11}
 8005948:	4607      	mov	r7, r0
 800594a:	4608      	mov	r0, r1
 800594c:	f8b7 c000 	ldrh.w	ip, [r7]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8005956:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800595a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800595e:	f000 80b0 	beq.w	8005ac2 <arm_cfft_radix8by2_f32+0x182>
 8005962:	008c      	lsls	r4, r1, #2
 8005964:	3410      	adds	r4, #16
 8005966:	f100 0310 	add.w	r3, r0, #16
 800596a:	1906      	adds	r6, r0, r4
 800596c:	3210      	adds	r2, #16
 800596e:	4444      	add	r4, r8
 8005970:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8005974:	f108 0510 	add.w	r5, r8, #16
 8005978:	ed15 2a04 	vldr	s4, [r5, #-16]
 800597c:	ed55 2a03 	vldr	s5, [r5, #-12]
 8005980:	ed54 4a04 	vldr	s9, [r4, #-16]
 8005984:	ed14 4a03 	vldr	s8, [r4, #-12]
 8005988:	ed14 6a02 	vldr	s12, [r4, #-8]
 800598c:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005990:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005994:	ed15 0a02 	vldr	s0, [r5, #-8]
 8005998:	ed55 0a01 	vldr	s1, [r5, #-4]
 800599c:	ed56 6a04 	vldr	s13, [r6, #-16]
 80059a0:	ed16 3a03 	vldr	s6, [r6, #-12]
 80059a4:	ed13 7a03 	vldr	s14, [r3, #-12]
 80059a8:	ed13 5a02 	vldr	s10, [r3, #-8]
 80059ac:	ed53 7a01 	vldr	s15, [r3, #-4]
 80059b0:	ed16 1a02 	vldr	s2, [r6, #-8]
 80059b4:	ed56 1a01 	vldr	s3, [r6, #-4]
 80059b8:	ee73 ba82 	vadd.f32	s23, s7, s4
 80059bc:	ee37 ba22 	vadd.f32	s22, s14, s5
 80059c0:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80059c4:	ee33 9a04 	vadd.f32	s18, s6, s8
 80059c8:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80059cc:	ee75 aa00 	vadd.f32	s21, s10, s0
 80059d0:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80059d4:	ee71 8a06 	vadd.f32	s17, s2, s12
 80059d8:	ed43 ba04 	vstr	s23, [r3, #-16]
 80059dc:	ed03 ba03 	vstr	s22, [r3, #-12]
 80059e0:	ed43 aa02 	vstr	s21, [r3, #-8]
 80059e4:	ed03 aa01 	vstr	s20, [r3, #-4]
 80059e8:	ed06 8a01 	vstr	s16, [r6, #-4]
 80059ec:	ed46 9a04 	vstr	s19, [r6, #-16]
 80059f0:	ed06 9a03 	vstr	s18, [r6, #-12]
 80059f4:	ed46 8a02 	vstr	s17, [r6, #-8]
 80059f8:	ee37 7a62 	vsub.f32	s14, s14, s5
 80059fc:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005a00:	ee34 4a43 	vsub.f32	s8, s8, s6
 8005a04:	ed52 6a03 	vldr	s13, [r2, #-12]
 8005a08:	ed12 3a04 	vldr	s6, [r2, #-16]
 8005a0c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8005a10:	ee27 8a26 	vmul.f32	s16, s14, s13
 8005a14:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8005a18:	ee23 2a83 	vmul.f32	s4, s7, s6
 8005a1c:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005a20:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8005a24:	ee27 7a03 	vmul.f32	s14, s14, s6
 8005a28:	ee64 6a26 	vmul.f32	s13, s8, s13
 8005a2c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8005a30:	ee37 7a63 	vsub.f32	s14, s14, s7
 8005a34:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005a38:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8005a3c:	ee32 3a08 	vadd.f32	s6, s4, s16
 8005a40:	ed05 7a03 	vstr	s14, [r5, #-12]
 8005a44:	ed05 3a04 	vstr	s6, [r5, #-16]
 8005a48:	ed04 4a04 	vstr	s8, [r4, #-16]
 8005a4c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005a50:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005a54:	ee76 6a41 	vsub.f32	s13, s12, s2
 8005a58:	ee35 5a40 	vsub.f32	s10, s10, s0
 8005a5c:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8005a60:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005a64:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005a68:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005a6c:	ee66 4a87 	vmul.f32	s9, s13, s14
 8005a70:	ee25 4a25 	vmul.f32	s8, s10, s11
 8005a74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005a78:	ee25 5a07 	vmul.f32	s10, s10, s14
 8005a7c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005a80:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005a84:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005a88:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005a8c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005a90:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8005a94:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005a98:	3310      	adds	r3, #16
 8005a9a:	4563      	cmp	r3, ip
 8005a9c:	ed45 5a02 	vstr	s11, [r5, #-8]
 8005aa0:	f106 0610 	add.w	r6, r6, #16
 8005aa4:	ed45 7a01 	vstr	s15, [r5, #-4]
 8005aa8:	f102 0210 	add.w	r2, r2, #16
 8005aac:	ed04 6a02 	vstr	s12, [r4, #-8]
 8005ab0:	ed04 7a01 	vstr	s14, [r4, #-4]
 8005ab4:	f105 0510 	add.w	r5, r5, #16
 8005ab8:	f104 0410 	add.w	r4, r4, #16
 8005abc:	f47f af5c 	bne.w	8005978 <arm_cfft_radix8by2_f32+0x38>
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	b28c      	uxth	r4, r1
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	f000 fc1c 	bl	8006304 <arm_radix8_butterfly_f32>
 8005acc:	ecbd 8b08 	vpop	{d8-d11}
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	f000 bc12 	b.w	8006304 <arm_radix8_butterfly_f32>

08005ae0 <arm_cfft_radix8by4_f32>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	ed2d 8b0a 	vpush	{d8-d12}
 8005ae8:	b08d      	sub	sp, #52	; 0x34
 8005aea:	460d      	mov	r5, r1
 8005aec:	910b      	str	r1, [sp, #44]	; 0x2c
 8005aee:	8801      	ldrh	r1, [r0, #0]
 8005af0:	6842      	ldr	r2, [r0, #4]
 8005af2:	900a      	str	r0, [sp, #40]	; 0x28
 8005af4:	0849      	lsrs	r1, r1, #1
 8005af6:	008b      	lsls	r3, r1, #2
 8005af8:	18ee      	adds	r6, r5, r3
 8005afa:	18f0      	adds	r0, r6, r3
 8005afc:	edd0 5a00 	vldr	s11, [r0]
 8005b00:	edd5 7a00 	vldr	s15, [r5]
 8005b04:	ed96 7a00 	vldr	s14, [r6]
 8005b08:	edd0 3a01 	vldr	s7, [r0, #4]
 8005b0c:	ed96 4a01 	vldr	s8, [r6, #4]
 8005b10:	ed95 5a01 	vldr	s10, [r5, #4]
 8005b14:	9008      	str	r0, [sp, #32]
 8005b16:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8005b1a:	18c7      	adds	r7, r0, r3
 8005b1c:	edd7 4a00 	vldr	s9, [r7]
 8005b20:	ed97 3a01 	vldr	s6, [r7, #4]
 8005b24:	9701      	str	r7, [sp, #4]
 8005b26:	ee77 6a06 	vadd.f32	s13, s14, s12
 8005b2a:	462c      	mov	r4, r5
 8005b2c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005b30:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005b34:	ee16 ca90 	vmov	ip, s13
 8005b38:	f844 cb08 	str.w	ip, [r4], #8
 8005b3c:	ee75 6a23 	vadd.f32	s13, s10, s7
 8005b40:	edd6 5a01 	vldr	s11, [r6, #4]
 8005b44:	edd7 2a01 	vldr	s5, [r7, #4]
 8005b48:	9404      	str	r4, [sp, #16]
 8005b4a:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005b4e:	ee74 3a27 	vadd.f32	s7, s8, s15
 8005b52:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005b56:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8005b5a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005b5e:	0849      	lsrs	r1, r1, #1
 8005b60:	f102 0e08 	add.w	lr, r2, #8
 8005b64:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005b68:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005b6c:	9109      	str	r1, [sp, #36]	; 0x24
 8005b6e:	ee35 4a47 	vsub.f32	s8, s10, s14
 8005b72:	f1a1 0902 	sub.w	r9, r1, #2
 8005b76:	f8cd e00c 	str.w	lr, [sp, #12]
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	ee13 ea90 	vmov	lr, s7
 8005b80:	ee36 6a64 	vsub.f32	s12, s12, s9
 8005b84:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8005b88:	4604      	mov	r4, r0
 8005b8a:	edc5 5a01 	vstr	s11, [r5, #4]
 8005b8e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005b92:	f841 eb08 	str.w	lr, [r1], #8
 8005b96:	ee34 5a24 	vadd.f32	s10, s8, s9
 8005b9a:	ee16 ea10 	vmov	lr, s12
 8005b9e:	ed86 5a01 	vstr	s10, [r6, #4]
 8005ba2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005ba6:	f844 eb08 	str.w	lr, [r4], #8
 8005baa:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005bae:	edc0 6a01 	vstr	s13, [r0, #4]
 8005bb2:	9405      	str	r4, [sp, #20]
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	ee17 0a90 	vmov	r0, s15
 8005bba:	9106      	str	r1, [sp, #24]
 8005bbc:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005bc0:	f102 0110 	add.w	r1, r2, #16
 8005bc4:	46bc      	mov	ip, r7
 8005bc6:	9100      	str	r1, [sp, #0]
 8005bc8:	f847 0b08 	str.w	r0, [r7], #8
 8005bcc:	f102 0118 	add.w	r1, r2, #24
 8005bd0:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8005bd4:	9102      	str	r1, [sp, #8]
 8005bd6:	ed8c 7a01 	vstr	s14, [ip, #4]
 8005bda:	9007      	str	r0, [sp, #28]
 8005bdc:	f000 8134 	beq.w	8005e48 <arm_cfft_radix8by4_f32+0x368>
 8005be0:	f102 0920 	add.w	r9, r2, #32
 8005be4:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8005be8:	9a01      	ldr	r2, [sp, #4]
 8005bea:	f8dd a000 	ldr.w	sl, [sp]
 8005bee:	3b0c      	subs	r3, #12
 8005bf0:	4683      	mov	fp, r0
 8005bf2:	4463      	add	r3, ip
 8005bf4:	f105 0e10 	add.w	lr, r5, #16
 8005bf8:	f1a4 010c 	sub.w	r1, r4, #12
 8005bfc:	f104 0510 	add.w	r5, r4, #16
 8005c00:	f1a6 0c0c 	sub.w	ip, r6, #12
 8005c04:	f1a2 040c 	sub.w	r4, r2, #12
 8005c08:	f106 0010 	add.w	r0, r6, #16
 8005c0c:	3210      	adds	r2, #16
 8005c0e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8005c12:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005c16:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005c1a:	ed52 1a02 	vldr	s3, [r2, #-8]
 8005c1e:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005c22:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8005c26:	ed12 1a01 	vldr	s2, [r2, #-4]
 8005c2a:	ed10 8a01 	vldr	s16, [r0, #-4]
 8005c2e:	ee35 4a25 	vadd.f32	s8, s10, s11
 8005c32:	ee30 6a26 	vadd.f32	s12, s0, s13
 8005c36:	ee37 7a84 	vadd.f32	s14, s15, s8
 8005c3a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005c3e:	ee37 7a21 	vadd.f32	s14, s14, s3
 8005c42:	ee75 5a65 	vsub.f32	s11, s10, s11
 8005c46:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8005c4a:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005c4e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8005c52:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005c56:	ee78 aa25 	vadd.f32	s21, s16, s11
 8005c5a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005c5e:	ee70 3a67 	vsub.f32	s7, s0, s15
 8005c62:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8005c66:	ed94 7a02 	vldr	s14, [r4, #8]
 8005c6a:	ed9c 2a02 	vldr	s4, [ip, #8]
 8005c6e:	ed91 ba02 	vldr	s22, [r1, #8]
 8005c72:	edd3 9a02 	vldr	s19, [r3, #8]
 8005c76:	edd4 2a01 	vldr	s5, [r4, #4]
 8005c7a:	ed9c 9a01 	vldr	s18, [ip, #4]
 8005c7e:	ed93 5a01 	vldr	s10, [r3, #4]
 8005c82:	edd1 0a01 	vldr	s1, [r1, #4]
 8005c86:	ee72 6a07 	vadd.f32	s13, s4, s14
 8005c8a:	ee32 2a47 	vsub.f32	s4, s4, s14
 8005c8e:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8005c92:	ee79 4a22 	vadd.f32	s9, s18, s5
 8005c96:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8005c9a:	ee79 2a62 	vsub.f32	s5, s18, s5
 8005c9e:	ed8c 7a02 	vstr	s14, [ip, #8]
 8005ca2:	ed91 7a01 	vldr	s14, [r1, #4]
 8005ca6:	edd3 8a01 	vldr	s17, [r3, #4]
 8005caa:	ee34 7a87 	vadd.f32	s14, s9, s14
 8005cae:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8005cb2:	ee37 7a28 	vadd.f32	s14, s14, s17
 8005cb6:	ee32 9a60 	vsub.f32	s18, s4, s1
 8005cba:	ed8c 7a01 	vstr	s14, [ip, #4]
 8005cbe:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8005cc2:	ed1a aa02 	vldr	s20, [sl, #-8]
 8005cc6:	ee73 8a22 	vadd.f32	s17, s6, s5
 8005cca:	ee39 9a05 	vadd.f32	s18, s18, s10
 8005cce:	ee7a aac1 	vsub.f32	s21, s21, s2
 8005cd2:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8005cd6:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8005cda:	ee69 ba07 	vmul.f32	s23, s18, s14
 8005cde:	ee6a aa87 	vmul.f32	s21, s21, s14
 8005ce2:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8005ce6:	ee63 ca87 	vmul.f32	s25, s7, s14
 8005cea:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8005cee:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8005cf2:	ee68 8a87 	vmul.f32	s17, s17, s14
 8005cf6:	ee73 3aea 	vsub.f32	s7, s7, s21
 8005cfa:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005cfe:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8005d02:	ee3b aaca 	vsub.f32	s20, s23, s20
 8005d06:	ee34 4a67 	vsub.f32	s8, s8, s15
 8005d0a:	ee76 6acb 	vsub.f32	s13, s13, s22
 8005d0e:	ee36 6a48 	vsub.f32	s12, s12, s16
 8005d12:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8005d16:	ed00 7a02 	vstr	s14, [r0, #-8]
 8005d1a:	ed40 3a01 	vstr	s7, [r0, #-4]
 8005d1e:	edc1 8a01 	vstr	s17, [r1, #4]
 8005d22:	ed81 aa02 	vstr	s20, [r1, #8]
 8005d26:	ed59 3a04 	vldr	s7, [r9, #-16]
 8005d2a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8005d2e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8005d32:	ed59 6a03 	vldr	s13, [r9, #-12]
 8005d36:	ee34 4a61 	vsub.f32	s8, s8, s3
 8005d3a:	ee36 6a41 	vsub.f32	s12, s12, s2
 8005d3e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8005d42:	ee66 9a26 	vmul.f32	s19, s12, s13
 8005d46:	ee24 9a23 	vmul.f32	s18, s8, s7
 8005d4a:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005d4e:	ee24 4a26 	vmul.f32	s8, s8, s13
 8005d52:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005d56:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005d5a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8005d5e:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005d62:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005d66:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8005d6a:	ee79 3a29 	vadd.f32	s7, s18, s19
 8005d6e:	ee75 6a60 	vsub.f32	s13, s10, s1
 8005d72:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8005d76:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005d7a:	ed45 3a02 	vstr	s7, [r5, #-8]
 8005d7e:	ed05 6a01 	vstr	s12, [r5, #-4]
 8005d82:	ed84 7a01 	vstr	s14, [r4, #4]
 8005d86:	ed84 4a02 	vstr	s8, [r4, #8]
 8005d8a:	ee35 6a81 	vadd.f32	s12, s11, s2
 8005d8e:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8005d92:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8005d96:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8005d9a:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005d9e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8005da2:	ee67 2a26 	vmul.f32	s5, s14, s13
 8005da6:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8005daa:	ee26 5a25 	vmul.f32	s10, s12, s11
 8005dae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005db2:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005db6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005dba:	ee63 6a26 	vmul.f32	s13, s6, s13
 8005dbe:	ee23 3a25 	vmul.f32	s6, s6, s11
 8005dc2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005dc6:	ee75 5a24 	vadd.f32	s11, s10, s9
 8005dca:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8005dce:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005dd2:	f1bb 0b01 	subs.w	fp, fp, #1
 8005dd6:	ed42 5a02 	vstr	s11, [r2, #-8]
 8005dda:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005dde:	f10e 0e08 	add.w	lr, lr, #8
 8005de2:	ed83 3a02 	vstr	s6, [r3, #8]
 8005de6:	ed83 7a01 	vstr	s14, [r3, #4]
 8005dea:	f1ac 0c08 	sub.w	ip, ip, #8
 8005dee:	f10a 0a08 	add.w	sl, sl, #8
 8005df2:	f100 0008 	add.w	r0, r0, #8
 8005df6:	f1a1 0108 	sub.w	r1, r1, #8
 8005dfa:	f109 0910 	add.w	r9, r9, #16
 8005dfe:	f105 0508 	add.w	r5, r5, #8
 8005e02:	f1a4 0408 	sub.w	r4, r4, #8
 8005e06:	f108 0818 	add.w	r8, r8, #24
 8005e0a:	f102 0208 	add.w	r2, r2, #8
 8005e0e:	f1a3 0308 	sub.w	r3, r3, #8
 8005e12:	f47f aefc 	bne.w	8005c0e <arm_cfft_radix8by4_f32+0x12e>
 8005e16:	9907      	ldr	r1, [sp, #28]
 8005e18:	9800      	ldr	r0, [sp, #0]
 8005e1a:	00cb      	lsls	r3, r1, #3
 8005e1c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005e20:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005e24:	9100      	str	r1, [sp, #0]
 8005e26:	9904      	ldr	r1, [sp, #16]
 8005e28:	4419      	add	r1, r3
 8005e2a:	9104      	str	r1, [sp, #16]
 8005e2c:	9903      	ldr	r1, [sp, #12]
 8005e2e:	4419      	add	r1, r3
 8005e30:	9103      	str	r1, [sp, #12]
 8005e32:	9906      	ldr	r1, [sp, #24]
 8005e34:	4419      	add	r1, r3
 8005e36:	9106      	str	r1, [sp, #24]
 8005e38:	9905      	ldr	r1, [sp, #20]
 8005e3a:	441f      	add	r7, r3
 8005e3c:	4419      	add	r1, r3
 8005e3e:	9b02      	ldr	r3, [sp, #8]
 8005e40:	9105      	str	r1, [sp, #20]
 8005e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e46:	9302      	str	r3, [sp, #8]
 8005e48:	9904      	ldr	r1, [sp, #16]
 8005e4a:	9805      	ldr	r0, [sp, #20]
 8005e4c:	ed91 4a00 	vldr	s8, [r1]
 8005e50:	edd0 6a00 	vldr	s13, [r0]
 8005e54:	9b06      	ldr	r3, [sp, #24]
 8005e56:	ed97 3a00 	vldr	s6, [r7]
 8005e5a:	edd3 7a00 	vldr	s15, [r3]
 8005e5e:	edd0 4a01 	vldr	s9, [r0, #4]
 8005e62:	edd1 3a01 	vldr	s7, [r1, #4]
 8005e66:	ed97 2a01 	vldr	s4, [r7, #4]
 8005e6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8005e6e:	9a03      	ldr	r2, [sp, #12]
 8005e70:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8005e74:	ee34 6a26 	vadd.f32	s12, s8, s13
 8005e78:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8005e7c:	ee37 5a86 	vadd.f32	s10, s15, s12
 8005e80:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005e84:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005e88:	ee74 6a66 	vsub.f32	s13, s8, s13
 8005e8c:	ed81 5a00 	vstr	s10, [r1]
 8005e90:	ed93 5a01 	vldr	s10, [r3, #4]
 8005e94:	edd7 4a01 	vldr	s9, [r7, #4]
 8005e98:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005e9c:	ee37 4a26 	vadd.f32	s8, s14, s13
 8005ea0:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005ea4:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8005ea8:	ed81 5a01 	vstr	s10, [r1, #4]
 8005eac:	edd2 1a00 	vldr	s3, [r2]
 8005eb0:	edd2 2a01 	vldr	s5, [r2, #4]
 8005eb4:	ee34 5a83 	vadd.f32	s10, s9, s6
 8005eb8:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005ebc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005ec0:	ee64 4a21 	vmul.f32	s9, s8, s3
 8005ec4:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005ec8:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005ecc:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005ed0:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005ed4:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005ed8:	edc3 2a00 	vstr	s5, [r3]
 8005edc:	ed83 5a01 	vstr	s10, [r3, #4]
 8005ee0:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8005ee4:	9b00      	ldr	r3, [sp, #0]
 8005ee6:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005eea:	ed93 4a01 	vldr	s8, [r3, #4]
 8005eee:	ed93 5a00 	vldr	s10, [r3]
 8005ef2:	9b02      	ldr	r3, [sp, #8]
 8005ef4:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005ef8:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005efc:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005f00:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005f04:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005f08:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005f0c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005f10:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005f14:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f18:	ed80 6a01 	vstr	s12, [r0, #4]
 8005f1c:	edc0 5a00 	vstr	s11, [r0]
 8005f20:	edd3 5a01 	vldr	s11, [r3, #4]
 8005f24:	edd3 6a00 	vldr	s13, [r3]
 8005f28:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005f2c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8005f30:	ee27 6a26 	vmul.f32	s12, s14, s13
 8005f34:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f38:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005f3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005f40:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f44:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005f48:	ed87 7a01 	vstr	s14, [r7, #4]
 8005f4c:	edc7 7a00 	vstr	s15, [r7]
 8005f50:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8005f54:	4621      	mov	r1, r4
 8005f56:	686a      	ldr	r2, [r5, #4]
 8005f58:	2304      	movs	r3, #4
 8005f5a:	f000 f9d3 	bl	8006304 <arm_radix8_butterfly_f32>
 8005f5e:	4630      	mov	r0, r6
 8005f60:	4621      	mov	r1, r4
 8005f62:	686a      	ldr	r2, [r5, #4]
 8005f64:	2304      	movs	r3, #4
 8005f66:	f000 f9cd 	bl	8006304 <arm_radix8_butterfly_f32>
 8005f6a:	9808      	ldr	r0, [sp, #32]
 8005f6c:	686a      	ldr	r2, [r5, #4]
 8005f6e:	4621      	mov	r1, r4
 8005f70:	2304      	movs	r3, #4
 8005f72:	f000 f9c7 	bl	8006304 <arm_radix8_butterfly_f32>
 8005f76:	686a      	ldr	r2, [r5, #4]
 8005f78:	9801      	ldr	r0, [sp, #4]
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	b00d      	add	sp, #52	; 0x34
 8005f80:	ecbd 8b0a 	vpop	{d8-d12}
 8005f84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f88:	f000 b9bc 	b.w	8006304 <arm_radix8_butterfly_f32>

08005f8c <arm_cfft_f32>:
 8005f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f90:	2a01      	cmp	r2, #1
 8005f92:	4606      	mov	r6, r0
 8005f94:	4617      	mov	r7, r2
 8005f96:	460c      	mov	r4, r1
 8005f98:	4698      	mov	r8, r3
 8005f9a:	8805      	ldrh	r5, [r0, #0]
 8005f9c:	d056      	beq.n	800604c <arm_cfft_f32+0xc0>
 8005f9e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005fa2:	d063      	beq.n	800606c <arm_cfft_f32+0xe0>
 8005fa4:	d916      	bls.n	8005fd4 <arm_cfft_f32+0x48>
 8005fa6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005faa:	d01a      	beq.n	8005fe2 <arm_cfft_f32+0x56>
 8005fac:	d947      	bls.n	800603e <arm_cfft_f32+0xb2>
 8005fae:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005fb2:	d05b      	beq.n	800606c <arm_cfft_f32+0xe0>
 8005fb4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005fb8:	d105      	bne.n	8005fc6 <arm_cfft_f32+0x3a>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	6872      	ldr	r2, [r6, #4]
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f99f 	bl	8006304 <arm_radix8_butterfly_f32>
 8005fc6:	f1b8 0f00 	cmp.w	r8, #0
 8005fca:	d111      	bne.n	8005ff0 <arm_cfft_f32+0x64>
 8005fcc:	2f01      	cmp	r7, #1
 8005fce:	d016      	beq.n	8005ffe <arm_cfft_f32+0x72>
 8005fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd4:	2d20      	cmp	r5, #32
 8005fd6:	d049      	beq.n	800606c <arm_cfft_f32+0xe0>
 8005fd8:	d935      	bls.n	8006046 <arm_cfft_f32+0xba>
 8005fda:	2d40      	cmp	r5, #64	; 0x40
 8005fdc:	d0ed      	beq.n	8005fba <arm_cfft_f32+0x2e>
 8005fde:	2d80      	cmp	r5, #128	; 0x80
 8005fe0:	d1f1      	bne.n	8005fc6 <arm_cfft_f32+0x3a>
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f7ff fcab 	bl	8005940 <arm_cfft_radix8by2_f32>
 8005fea:	f1b8 0f00 	cmp.w	r8, #0
 8005fee:	d0ed      	beq.n	8005fcc <arm_cfft_f32+0x40>
 8005ff0:	68b2      	ldr	r2, [r6, #8]
 8005ff2:	89b1      	ldrh	r1, [r6, #12]
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 f841 	bl	800607c <arm_bitreversal_32>
 8005ffa:	2f01      	cmp	r7, #1
 8005ffc:	d1e8      	bne.n	8005fd0 <arm_cfft_f32+0x44>
 8005ffe:	ee07 5a90 	vmov	s15, r5
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800600a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800600e:	2d00      	cmp	r5, #0
 8006010:	d0de      	beq.n	8005fd0 <arm_cfft_f32+0x44>
 8006012:	f104 0108 	add.w	r1, r4, #8
 8006016:	2300      	movs	r3, #0
 8006018:	3301      	adds	r3, #1
 800601a:	429d      	cmp	r5, r3
 800601c:	f101 0108 	add.w	r1, r1, #8
 8006020:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006024:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006028:	ee27 7a26 	vmul.f32	s14, s14, s13
 800602c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006030:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006034:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006038:	d1ee      	bne.n	8006018 <arm_cfft_f32+0x8c>
 800603a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006042:	d0ba      	beq.n	8005fba <arm_cfft_f32+0x2e>
 8006044:	e7bf      	b.n	8005fc6 <arm_cfft_f32+0x3a>
 8006046:	2d10      	cmp	r5, #16
 8006048:	d0cb      	beq.n	8005fe2 <arm_cfft_f32+0x56>
 800604a:	e7bc      	b.n	8005fc6 <arm_cfft_f32+0x3a>
 800604c:	b19d      	cbz	r5, 8006076 <arm_cfft_f32+0xea>
 800604e:	f101 030c 	add.w	r3, r1, #12
 8006052:	2200      	movs	r2, #0
 8006054:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006058:	3201      	adds	r2, #1
 800605a:	eef1 7a67 	vneg.f32	s15, s15
 800605e:	4295      	cmp	r5, r2
 8006060:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006064:	f103 0308 	add.w	r3, r3, #8
 8006068:	d1f4      	bne.n	8006054 <arm_cfft_f32+0xc8>
 800606a:	e798      	b.n	8005f9e <arm_cfft_f32+0x12>
 800606c:	4621      	mov	r1, r4
 800606e:	4630      	mov	r0, r6
 8006070:	f7ff fd36 	bl	8005ae0 <arm_cfft_radix8by4_f32>
 8006074:	e7a7      	b.n	8005fc6 <arm_cfft_f32+0x3a>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0aa      	beq.n	8005fd0 <arm_cfft_f32+0x44>
 800607a:	e7b9      	b.n	8005ff0 <arm_cfft_f32+0x64>

0800607c <arm_bitreversal_32>:
 800607c:	b1e9      	cbz	r1, 80060ba <arm_bitreversal_32+0x3e>
 800607e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006080:	2500      	movs	r5, #0
 8006082:	f102 0e02 	add.w	lr, r2, #2
 8006086:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800608a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800608e:	08a4      	lsrs	r4, r4, #2
 8006090:	089b      	lsrs	r3, r3, #2
 8006092:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006096:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800609a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800609e:	00a6      	lsls	r6, r4, #2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80060a6:	3304      	adds	r3, #4
 80060a8:	1d34      	adds	r4, r6, #4
 80060aa:	3502      	adds	r5, #2
 80060ac:	58c6      	ldr	r6, [r0, r3]
 80060ae:	5907      	ldr	r7, [r0, r4]
 80060b0:	50c7      	str	r7, [r0, r3]
 80060b2:	428d      	cmp	r5, r1
 80060b4:	5106      	str	r6, [r0, r4]
 80060b6:	d3e6      	bcc.n	8006086 <arm_bitreversal_32+0xa>
 80060b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ba:	4770      	bx	lr

080060bc <arm_cmplx_mag_f32>:
 80060bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c0:	ed2d 8b02 	vpush	{d8}
 80060c4:	0897      	lsrs	r7, r2, #2
 80060c6:	b084      	sub	sp, #16
 80060c8:	d077      	beq.n	80061ba <arm_cmplx_mag_f32+0xfe>
 80060ca:	f04f 0800 	mov.w	r8, #0
 80060ce:	f100 0420 	add.w	r4, r0, #32
 80060d2:	f101 0510 	add.w	r5, r1, #16
 80060d6:	463e      	mov	r6, r7
 80060d8:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80060dc:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80060e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80060e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80060e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80060ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80060f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f4:	f2c0 80c5 	blt.w	8006282 <arm_cmplx_mag_f32+0x1c6>
 80060f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80060fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006100:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006104:	f100 80cb 	bmi.w	800629e <arm_cmplx_mag_f32+0x1e2>
 8006108:	ed05 8a04 	vstr	s16, [r5, #-16]
 800610c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8006110:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8006114:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006118:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800611c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006120:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006128:	f2c0 80a8 	blt.w	800627c <arm_cmplx_mag_f32+0x1c0>
 800612c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006134:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006138:	f100 80a8 	bmi.w	800628c <arm_cmplx_mag_f32+0x1d0>
 800613c:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006140:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006144:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006148:	ee20 0a00 	vmul.f32	s0, s0, s0
 800614c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006150:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006154:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615c:	f2c0 808b 	blt.w	8006276 <arm_cmplx_mag_f32+0x1ba>
 8006160:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006168:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800616c:	f100 80a9 	bmi.w	80062c2 <arm_cmplx_mag_f32+0x206>
 8006170:	ed05 8a02 	vstr	s16, [r5, #-8]
 8006174:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006178:	ed54 7a01 	vldr	s15, [r4, #-4]
 800617c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006180:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006184:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006188:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006190:	db6e      	blt.n	8006270 <arm_cmplx_mag_f32+0x1b4>
 8006192:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800619e:	f100 8087 	bmi.w	80062b0 <arm_cmplx_mag_f32+0x1f4>
 80061a2:	ed05 8a01 	vstr	s16, [r5, #-4]
 80061a6:	3e01      	subs	r6, #1
 80061a8:	f104 0420 	add.w	r4, r4, #32
 80061ac:	f105 0510 	add.w	r5, r5, #16
 80061b0:	d192      	bne.n	80060d8 <arm_cmplx_mag_f32+0x1c>
 80061b2:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80061b6:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80061ba:	f012 0203 	ands.w	r2, r2, #3
 80061be:	d052      	beq.n	8006266 <arm_cmplx_mag_f32+0x1aa>
 80061c0:	ed90 0a00 	vldr	s0, [r0]
 80061c4:	edd0 7a01 	vldr	s15, [r0, #4]
 80061c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80061cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061d0:	2300      	movs	r3, #0
 80061d2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80061d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80061da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061de:	bfb8      	it	lt
 80061e0:	600b      	strlt	r3, [r1, #0]
 80061e2:	db08      	blt.n	80061f6 <arm_cmplx_mag_f32+0x13a>
 80061e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80061f0:	d479      	bmi.n	80062e6 <arm_cmplx_mag_f32+0x22a>
 80061f2:	ed81 8a00 	vstr	s16, [r1]
 80061f6:	3a01      	subs	r2, #1
 80061f8:	d035      	beq.n	8006266 <arm_cmplx_mag_f32+0x1aa>
 80061fa:	ed90 0a02 	vldr	s0, [r0, #8]
 80061fe:	edd0 7a03 	vldr	s15, [r0, #12]
 8006202:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006206:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800620a:	2300      	movs	r3, #0
 800620c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006210:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006218:	bfb8      	it	lt
 800621a:	604b      	strlt	r3, [r1, #4]
 800621c:	db08      	blt.n	8006230 <arm_cmplx_mag_f32+0x174>
 800621e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006226:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800622a:	d453      	bmi.n	80062d4 <arm_cmplx_mag_f32+0x218>
 800622c:	ed81 8a01 	vstr	s16, [r1, #4]
 8006230:	2a01      	cmp	r2, #1
 8006232:	d018      	beq.n	8006266 <arm_cmplx_mag_f32+0x1aa>
 8006234:	ed90 0a04 	vldr	s0, [r0, #16]
 8006238:	edd0 7a05 	vldr	s15, [r0, #20]
 800623c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006240:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006244:	2300      	movs	r3, #0
 8006246:	ee30 0a27 	vadd.f32	s0, s0, s15
 800624a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800624e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006252:	db19      	blt.n	8006288 <arm_cmplx_mag_f32+0x1cc>
 8006254:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006260:	d44a      	bmi.n	80062f8 <arm_cmplx_mag_f32+0x23c>
 8006262:	ed81 8a02 	vstr	s16, [r1, #8]
 8006266:	b004      	add	sp, #16
 8006268:	ecbd 8b02 	vpop	{d8}
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006270:	f845 8c04 	str.w	r8, [r5, #-4]
 8006274:	e797      	b.n	80061a6 <arm_cmplx_mag_f32+0xea>
 8006276:	f845 8c08 	str.w	r8, [r5, #-8]
 800627a:	e77b      	b.n	8006174 <arm_cmplx_mag_f32+0xb8>
 800627c:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006280:	e75e      	b.n	8006140 <arm_cmplx_mag_f32+0x84>
 8006282:	f845 8c10 	str.w	r8, [r5, #-16]
 8006286:	e741      	b.n	800610c <arm_cmplx_mag_f32+0x50>
 8006288:	608b      	str	r3, [r1, #8]
 800628a:	e7ec      	b.n	8006266 <arm_cmplx_mag_f32+0x1aa>
 800628c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006290:	9001      	str	r0, [sp, #4]
 8006292:	f000 faf7 	bl	8006884 <sqrtf>
 8006296:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800629a:	9801      	ldr	r0, [sp, #4]
 800629c:	e74e      	b.n	800613c <arm_cmplx_mag_f32+0x80>
 800629e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80062a2:	9001      	str	r0, [sp, #4]
 80062a4:	f000 faee 	bl	8006884 <sqrtf>
 80062a8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80062ac:	9801      	ldr	r0, [sp, #4]
 80062ae:	e72b      	b.n	8006108 <arm_cmplx_mag_f32+0x4c>
 80062b0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80062b4:	9001      	str	r0, [sp, #4]
 80062b6:	f000 fae5 	bl	8006884 <sqrtf>
 80062ba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80062be:	9801      	ldr	r0, [sp, #4]
 80062c0:	e76f      	b.n	80061a2 <arm_cmplx_mag_f32+0xe6>
 80062c2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80062c6:	9001      	str	r0, [sp, #4]
 80062c8:	f000 fadc 	bl	8006884 <sqrtf>
 80062cc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80062d0:	9801      	ldr	r0, [sp, #4]
 80062d2:	e74d      	b.n	8006170 <arm_cmplx_mag_f32+0xb4>
 80062d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d8:	9201      	str	r2, [sp, #4]
 80062da:	f000 fad3 	bl	8006884 <sqrtf>
 80062de:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80062e2:	9903      	ldr	r1, [sp, #12]
 80062e4:	e7a2      	b.n	800622c <arm_cmplx_mag_f32+0x170>
 80062e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062ea:	9201      	str	r2, [sp, #4]
 80062ec:	f000 faca 	bl	8006884 <sqrtf>
 80062f0:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80062f4:	9903      	ldr	r1, [sp, #12]
 80062f6:	e77c      	b.n	80061f2 <arm_cmplx_mag_f32+0x136>
 80062f8:	9101      	str	r1, [sp, #4]
 80062fa:	f000 fac3 	bl	8006884 <sqrtf>
 80062fe:	9901      	ldr	r1, [sp, #4]
 8006300:	e7af      	b.n	8006262 <arm_cmplx_mag_f32+0x1a6>
 8006302:	bf00      	nop

08006304 <arm_radix8_butterfly_f32>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	ed2d 8b10 	vpush	{d8-d15}
 800630c:	b095      	sub	sp, #84	; 0x54
 800630e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8006312:	4603      	mov	r3, r0
 8006314:	3304      	adds	r3, #4
 8006316:	ed9f bab9 	vldr	s22, [pc, #740]	; 80065fc <arm_radix8_butterfly_f32+0x2f8>
 800631a:	9012      	str	r0, [sp, #72]	; 0x48
 800631c:	468b      	mov	fp, r1
 800631e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006320:	4689      	mov	r9, r1
 8006322:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006326:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006328:	960f      	str	r6, [sp, #60]	; 0x3c
 800632a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800632e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006332:	eb03 0508 	add.w	r5, r3, r8
 8006336:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800633a:	eb05 040e 	add.w	r4, r5, lr
 800633e:	0137      	lsls	r7, r6, #4
 8006340:	eba6 030a 	sub.w	r3, r6, sl
 8006344:	eb04 000e 	add.w	r0, r4, lr
 8006348:	44b2      	add	sl, r6
 800634a:	1d3a      	adds	r2, r7, #4
 800634c:	9702      	str	r7, [sp, #8]
 800634e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006352:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006356:	ebae 0c06 	sub.w	ip, lr, r6
 800635a:	9703      	str	r7, [sp, #12]
 800635c:	eb03 0708 	add.w	r7, r3, r8
 8006360:	9701      	str	r7, [sp, #4]
 8006362:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006366:	9706      	str	r7, [sp, #24]
 8006368:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800636a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800636e:	f10e 0104 	add.w	r1, lr, #4
 8006372:	4439      	add	r1, r7
 8006374:	443a      	add	r2, r7
 8006376:	0137      	lsls	r7, r6, #4
 8006378:	00f6      	lsls	r6, r6, #3
 800637a:	9704      	str	r7, [sp, #16]
 800637c:	9605      	str	r6, [sp, #20]
 800637e:	9f01      	ldr	r7, [sp, #4]
 8006380:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006382:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006386:	f04f 0c00 	mov.w	ip, #0
 800638a:	edd4 6a00 	vldr	s13, [r4]
 800638e:	edd7 1a00 	vldr	s3, [r7]
 8006392:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006396:	edd5 5a00 	vldr	s11, [r5]
 800639a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800639e:	ed90 6a00 	vldr	s12, [r0]
 80063a2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80063a6:	ed93 3a00 	vldr	s6, [r3]
 80063aa:	ee39 0a86 	vadd.f32	s0, s19, s12
 80063ae:	ee33 2a21 	vadd.f32	s4, s6, s3
 80063b2:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80063b6:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80063ba:	ee35 7a02 	vadd.f32	s14, s10, s4
 80063be:	ee34 4a80 	vadd.f32	s8, s9, s0
 80063c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063c6:	ee74 6a07 	vadd.f32	s13, s8, s14
 80063ca:	ee34 4a47 	vsub.f32	s8, s8, s14
 80063ce:	ed46 6a01 	vstr	s13, [r6, #-4]
 80063d2:	ed85 4a00 	vstr	s8, [r5]
 80063d6:	edd1 6a00 	vldr	s13, [r1]
 80063da:	ed94 9a01 	vldr	s18, [r4, #4]
 80063de:	edd3 2a01 	vldr	s5, [r3, #4]
 80063e2:	edd7 8a01 	vldr	s17, [r7, #4]
 80063e6:	edd6 0a00 	vldr	s1, [r6]
 80063ea:	edd5 3a01 	vldr	s7, [r5, #4]
 80063ee:	ed90 8a01 	vldr	s16, [r0, #4]
 80063f2:	ed92 7a00 	vldr	s14, [r2]
 80063f6:	ee33 3a61 	vsub.f32	s6, s6, s3
 80063fa:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80063fe:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006402:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006406:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800640a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800640e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006412:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006416:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800641a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800641e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006422:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006426:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800642a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800642e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006432:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006436:	ee76 6a89 	vadd.f32	s13, s13, s18
 800643a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800643e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006442:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006446:	ee35 5a42 	vsub.f32	s10, s10, s4
 800644a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800644e:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006452:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006456:	ee33 3a60 	vsub.f32	s6, s6, s1
 800645a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800645e:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006462:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006466:	ee37 7a41 	vsub.f32	s14, s14, s2
 800646a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800646e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006472:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006476:	ee76 7a67 	vsub.f32	s15, s12, s15
 800647a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800647e:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006482:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006486:	ee35 5a03 	vadd.f32	s10, s10, s6
 800648a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800648e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006492:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006496:	ee34 6a67 	vsub.f32	s12, s8, s15
 800649a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800649e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80064a2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80064a6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80064aa:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80064ae:	44dc      	add	ip, fp
 80064b0:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80064b4:	45e1      	cmp	r9, ip
 80064b6:	ed86 8a00 	vstr	s16, [r6]
 80064ba:	ed85 2a01 	vstr	s4, [r5, #4]
 80064be:	4456      	add	r6, sl
 80064c0:	ed02 0a01 	vstr	s0, [r2, #-4]
 80064c4:	4455      	add	r5, sl
 80064c6:	edc0 6a00 	vstr	s13, [r0]
 80064ca:	ed82 1a00 	vstr	s2, [r2]
 80064ce:	ed80 5a01 	vstr	s10, [r0, #4]
 80064d2:	4452      	add	r2, sl
 80064d4:	ed01 3a01 	vstr	s6, [r1, #-4]
 80064d8:	4450      	add	r0, sl
 80064da:	edc7 2a00 	vstr	s5, [r7]
 80064de:	edc4 4a00 	vstr	s9, [r4]
 80064e2:	ed83 7a00 	vstr	s14, [r3]
 80064e6:	edc1 5a00 	vstr	s11, [r1]
 80064ea:	edc7 3a01 	vstr	s7, [r7, #4]
 80064ee:	4451      	add	r1, sl
 80064f0:	ed84 6a01 	vstr	s12, [r4, #4]
 80064f4:	4457      	add	r7, sl
 80064f6:	edc3 7a01 	vstr	s15, [r3, #4]
 80064fa:	4454      	add	r4, sl
 80064fc:	4453      	add	r3, sl
 80064fe:	f63f af44 	bhi.w	800638a <arm_radix8_butterfly_f32+0x86>
 8006502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006504:	2b07      	cmp	r3, #7
 8006506:	f240 81b7 	bls.w	8006878 <arm_radix8_butterfly_f32+0x574>
 800650a:	9b06      	ldr	r3, [sp, #24]
 800650c:	9903      	ldr	r1, [sp, #12]
 800650e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006510:	9e05      	ldr	r6, [sp, #20]
 8006512:	9a04      	ldr	r2, [sp, #16]
 8006514:	f103 0c08 	add.w	ip, r3, #8
 8006518:	9b02      	ldr	r3, [sp, #8]
 800651a:	3108      	adds	r1, #8
 800651c:	f108 0808 	add.w	r8, r8, #8
 8006520:	1841      	adds	r1, r0, r1
 8006522:	3608      	adds	r6, #8
 8006524:	330c      	adds	r3, #12
 8006526:	4604      	mov	r4, r0
 8006528:	4444      	add	r4, r8
 800652a:	18c3      	adds	r3, r0, r3
 800652c:	9109      	str	r1, [sp, #36]	; 0x24
 800652e:	1981      	adds	r1, r0, r6
 8006530:	f10e 0e08 	add.w	lr, lr, #8
 8006534:	3208      	adds	r2, #8
 8006536:	940b      	str	r4, [sp, #44]	; 0x2c
 8006538:	9107      	str	r1, [sp, #28]
 800653a:	4604      	mov	r4, r0
 800653c:	4601      	mov	r1, r0
 800653e:	9304      	str	r3, [sp, #16]
 8006540:	f100 030c 	add.w	r3, r0, #12
 8006544:	4474      	add	r4, lr
 8006546:	f04f 0801 	mov.w	r8, #1
 800654a:	1882      	adds	r2, r0, r2
 800654c:	4461      	add	r1, ip
 800654e:	9305      	str	r3, [sp, #20]
 8006550:	464b      	mov	r3, r9
 8006552:	940a      	str	r4, [sp, #40]	; 0x28
 8006554:	46c1      	mov	r9, r8
 8006556:	9208      	str	r2, [sp, #32]
 8006558:	46d8      	mov	r8, fp
 800655a:	9106      	str	r1, [sp, #24]
 800655c:	f04f 0e00 	mov.w	lr, #0
 8006560:	469b      	mov	fp, r3
 8006562:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006564:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006566:	449e      	add	lr, r3
 8006568:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800656c:	441a      	add	r2, r3
 800656e:	920e      	str	r2, [sp, #56]	; 0x38
 8006570:	441a      	add	r2, r3
 8006572:	18d4      	adds	r4, r2, r3
 8006574:	18e5      	adds	r5, r4, r3
 8006576:	18ee      	adds	r6, r5, r3
 8006578:	18f7      	adds	r7, r6, r3
 800657a:	eb07 0c03 	add.w	ip, r7, r3
 800657e:	920d      	str	r2, [sp, #52]	; 0x34
 8006580:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006584:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006588:	910c      	str	r1, [sp, #48]	; 0x30
 800658a:	4419      	add	r1, r3
 800658c:	9103      	str	r1, [sp, #12]
 800658e:	4419      	add	r1, r3
 8006590:	18ca      	adds	r2, r1, r3
 8006592:	9202      	str	r2, [sp, #8]
 8006594:	441a      	add	r2, r3
 8006596:	18d0      	adds	r0, r2, r3
 8006598:	ed92 ea01 	vldr	s28, [r2, #4]
 800659c:	9a02      	ldr	r2, [sp, #8]
 800659e:	edd4 7a00 	vldr	s15, [r4]
 80065a2:	edd2 da01 	vldr	s27, [r2, #4]
 80065a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065a8:	ed91 da01 	vldr	s26, [r1, #4]
 80065ac:	ed92 ca01 	vldr	s24, [r2, #4]
 80065b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065b2:	9903      	ldr	r1, [sp, #12]
 80065b4:	edcd 7a03 	vstr	s15, [sp, #12]
 80065b8:	edd2 7a00 	vldr	s15, [r2]
 80065bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065be:	edcd 7a02 	vstr	s15, [sp, #8]
 80065c2:	edd2 7a00 	vldr	s15, [r2]
 80065c6:	edd0 ea01 	vldr	s29, [r0, #4]
 80065ca:	edd1 ca01 	vldr	s25, [r1, #4]
 80065ce:	eddc ba00 	vldr	s23, [ip]
 80065d2:	edd7 aa00 	vldr	s21, [r7]
 80065d6:	ed96 aa00 	vldr	s20, [r6]
 80065da:	edd5 9a00 	vldr	s19, [r5]
 80065de:	edcd 7a01 	vstr	s15, [sp, #4]
 80065e2:	4403      	add	r3, r0
 80065e4:	ed93 fa01 	vldr	s30, [r3, #4]
 80065e8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80065ec:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80065f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065f8:	46cc      	mov	ip, r9
 80065fa:	e001      	b.n	8006600 <arm_radix8_butterfly_f32+0x2fc>
 80065fc:	3f3504f3 	.word	0x3f3504f3
 8006600:	ed91 6a00 	vldr	s12, [r1]
 8006604:	ed93 5a00 	vldr	s10, [r3]
 8006608:	edd0 fa00 	vldr	s31, [r0]
 800660c:	edd4 7a00 	vldr	s15, [r4]
 8006610:	ed95 7a00 	vldr	s14, [r5]
 8006614:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006618:	ed17 3a01 	vldr	s6, [r7, #-4]
 800661c:	ed92 2a00 	vldr	s4, [r2]
 8006620:	ed96 0a00 	vldr	s0, [r6]
 8006624:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006628:	ee32 1a06 	vadd.f32	s2, s4, s12
 800662c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8006630:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006634:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006638:	ee71 6a24 	vadd.f32	s13, s2, s9
 800663c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006640:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006644:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006648:	ed06 6a01 	vstr	s12, [r6, #-4]
 800664c:	edd4 8a01 	vldr	s17, [r4, #4]
 8006650:	ed92 9a01 	vldr	s18, [r2, #4]
 8006654:	edd7 0a00 	vldr	s1, [r7]
 8006658:	edd1 2a01 	vldr	s5, [r1, #4]
 800665c:	ed95 7a01 	vldr	s14, [r5, #4]
 8006660:	ed93 6a01 	vldr	s12, [r3, #4]
 8006664:	edd0 5a01 	vldr	s11, [r0, #4]
 8006668:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800666c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8006670:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006674:	ee78 fac7 	vsub.f32	s31, s17, s14
 8006678:	ee38 4a44 	vsub.f32	s8, s16, s8
 800667c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006680:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006684:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006688:	ee32 9a27 	vadd.f32	s18, s4, s15
 800668c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006690:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006694:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8006698:	ee71 4a64 	vsub.f32	s9, s2, s9
 800669c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80066a0:	ee32 1a08 	vadd.f32	s2, s4, s16
 80066a4:	ee72 fa87 	vadd.f32	s31, s5, s14
 80066a8:	ee32 2a48 	vsub.f32	s4, s4, s16
 80066ac:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80066b0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80066b4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80066b8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80066bc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80066c0:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80066c4:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80066c8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80066cc:	ee30 6a46 	vsub.f32	s12, s0, s12
 80066d0:	ee74 0a22 	vadd.f32	s1, s8, s5
 80066d4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80066d8:	ee74 2a62 	vsub.f32	s5, s8, s5
 80066dc:	ee36 6a68 	vsub.f32	s12, s12, s17
 80066e0:	ee32 4a64 	vsub.f32	s8, s4, s9
 80066e4:	ee73 8a09 	vadd.f32	s17, s6, s18
 80066e8:	ee74 4a82 	vadd.f32	s9, s9, s4
 80066ec:	ee33 9a49 	vsub.f32	s18, s6, s18
 80066f0:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80066f4:	ee35 3a85 	vadd.f32	s6, s11, s10
 80066f8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80066fc:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8006700:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006704:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8006708:	ee30 7a68 	vsub.f32	s14, s0, s17
 800670c:	ee35 8a03 	vadd.f32	s16, s10, s6
 8006710:	ee38 0a80 	vadd.f32	s0, s17, s0
 8006714:	ee73 3a82 	vadd.f32	s7, s7, s4
 8006718:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800671c:	ed9d 2a01 	vldr	s4, [sp, #4]
 8006720:	eddd 1a02 	vldr	s3, [sp, #8]
 8006724:	ee35 5a43 	vsub.f32	s10, s10, s6
 8006728:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800672c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8006730:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8006734:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006738:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800673c:	ee76 5a49 	vsub.f32	s11, s12, s18
 8006740:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8006744:	ee39 6a06 	vadd.f32	s12, s18, s12
 8006748:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800674c:	ee21 4a84 	vmul.f32	s8, s3, s8
 8006750:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8006754:	ee22 7a07 	vmul.f32	s14, s4, s14
 8006758:	ee22 2a08 	vmul.f32	s4, s4, s16
 800675c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006760:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8006764:	ee31 1a09 	vadd.f32	s2, s2, s18
 8006768:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800676c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8006770:	ee74 0a60 	vsub.f32	s1, s8, s1
 8006774:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006778:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800677c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8006780:	ee72 1a21 	vadd.f32	s3, s4, s3
 8006784:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8006788:	ee38 2a89 	vadd.f32	s4, s17, s18
 800678c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8006790:	ee38 8a04 	vadd.f32	s16, s16, s8
 8006794:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8006798:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800679c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80067a0:	eddd 5a03 	vldr	s11, [sp, #12]
 80067a4:	edc6 fa00 	vstr	s31, [r6]
 80067a8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80067ac:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80067b0:	ee30 0a45 	vsub.f32	s0, s0, s10
 80067b4:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80067b8:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80067bc:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80067c0:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80067c4:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80067c8:	ee25 6a86 	vmul.f32	s12, s11, s12
 80067cc:	ee74 4a89 	vadd.f32	s9, s9, s18
 80067d0:	ee34 3a43 	vsub.f32	s6, s8, s6
 80067d4:	ee78 8a85 	vadd.f32	s17, s17, s10
 80067d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80067dc:	44c4      	add	ip, r8
 80067de:	45e3      	cmp	fp, ip
 80067e0:	edc3 3a00 	vstr	s7, [r3]
 80067e4:	edc3 6a01 	vstr	s13, [r3, #4]
 80067e8:	4456      	add	r6, sl
 80067ea:	ed07 1a01 	vstr	s2, [r7, #-4]
 80067ee:	edc7 0a00 	vstr	s1, [r7]
 80067f2:	4453      	add	r3, sl
 80067f4:	ed80 2a00 	vstr	s4, [r0]
 80067f8:	edc0 2a01 	vstr	s5, [r0, #4]
 80067fc:	4457      	add	r7, sl
 80067fe:	edc2 1a00 	vstr	s3, [r2]
 8006802:	ed82 7a01 	vstr	s14, [r2, #4]
 8006806:	4450      	add	r0, sl
 8006808:	ed85 8a00 	vstr	s16, [r5]
 800680c:	ed85 0a01 	vstr	s0, [r5, #4]
 8006810:	4452      	add	r2, sl
 8006812:	edc1 4a00 	vstr	s9, [r1]
 8006816:	4455      	add	r5, sl
 8006818:	ed81 3a01 	vstr	s6, [r1, #4]
 800681c:	edc4 8a00 	vstr	s17, [r4]
 8006820:	ed84 6a01 	vstr	s12, [r4, #4]
 8006824:	4451      	add	r1, sl
 8006826:	4454      	add	r4, sl
 8006828:	f63f aeea 	bhi.w	8006600 <arm_radix8_butterfly_f32+0x2fc>
 800682c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800682e:	3308      	adds	r3, #8
 8006830:	930b      	str	r3, [sp, #44]	; 0x2c
 8006832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006834:	3308      	adds	r3, #8
 8006836:	930a      	str	r3, [sp, #40]	; 0x28
 8006838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683a:	3308      	adds	r3, #8
 800683c:	9309      	str	r3, [sp, #36]	; 0x24
 800683e:	9b08      	ldr	r3, [sp, #32]
 8006840:	3308      	adds	r3, #8
 8006842:	9308      	str	r3, [sp, #32]
 8006844:	9b07      	ldr	r3, [sp, #28]
 8006846:	3308      	adds	r3, #8
 8006848:	9307      	str	r3, [sp, #28]
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	3308      	adds	r3, #8
 800684e:	9306      	str	r3, [sp, #24]
 8006850:	9b05      	ldr	r3, [sp, #20]
 8006852:	3308      	adds	r3, #8
 8006854:	9305      	str	r3, [sp, #20]
 8006856:	9b04      	ldr	r3, [sp, #16]
 8006858:	3308      	adds	r3, #8
 800685a:	9304      	str	r3, [sp, #16]
 800685c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800685e:	f109 0901 	add.w	r9, r9, #1
 8006862:	454b      	cmp	r3, r9
 8006864:	f47f ae7d 	bne.w	8006562 <arm_radix8_butterfly_f32+0x25e>
 8006868:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	b29b      	uxth	r3, r3
 800686e:	46d9      	mov	r9, fp
 8006870:	9310      	str	r3, [sp, #64]	; 0x40
 8006872:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8006876:	e554      	b.n	8006322 <arm_radix8_butterfly_f32+0x1e>
 8006878:	b015      	add	sp, #84	; 0x54
 800687a:	ecbd 8b10 	vpop	{d8-d15}
 800687e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006882:	bf00      	nop

08006884 <sqrtf>:
 8006884:	b508      	push	{r3, lr}
 8006886:	ed2d 8b02 	vpush	{d8}
 800688a:	eeb0 8a40 	vmov.f32	s16, s0
 800688e:	f000 f817 	bl	80068c0 <__ieee754_sqrtf>
 8006892:	eeb4 8a48 	vcmp.f32	s16, s16
 8006896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689a:	d60c      	bvs.n	80068b6 <sqrtf+0x32>
 800689c:	eddf 8a07 	vldr	s17, [pc, #28]	; 80068bc <sqrtf+0x38>
 80068a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80068a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a8:	d505      	bpl.n	80068b6 <sqrtf+0x32>
 80068aa:	f000 f835 	bl	8006918 <__errno>
 80068ae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80068b2:	2321      	movs	r3, #33	; 0x21
 80068b4:	6003      	str	r3, [r0, #0]
 80068b6:	ecbd 8b02 	vpop	{d8}
 80068ba:	bd08      	pop	{r3, pc}
 80068bc:	00000000 	.word	0x00000000

080068c0 <__ieee754_sqrtf>:
 80068c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80068c4:	4770      	bx	lr
	...

080068c8 <siprintf>:
 80068c8:	b40e      	push	{r1, r2, r3}
 80068ca:	b500      	push	{lr}
 80068cc:	b09c      	sub	sp, #112	; 0x70
 80068ce:	ab1d      	add	r3, sp, #116	; 0x74
 80068d0:	9002      	str	r0, [sp, #8]
 80068d2:	9006      	str	r0, [sp, #24]
 80068d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068d8:	4809      	ldr	r0, [pc, #36]	; (8006900 <siprintf+0x38>)
 80068da:	9107      	str	r1, [sp, #28]
 80068dc:	9104      	str	r1, [sp, #16]
 80068de:	4909      	ldr	r1, [pc, #36]	; (8006904 <siprintf+0x3c>)
 80068e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e4:	9105      	str	r1, [sp, #20]
 80068e6:	6800      	ldr	r0, [r0, #0]
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	a902      	add	r1, sp, #8
 80068ec:	f000 f992 	bl	8006c14 <_svfiprintf_r>
 80068f0:	9b02      	ldr	r3, [sp, #8]
 80068f2:	2200      	movs	r2, #0
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	b01c      	add	sp, #112	; 0x70
 80068f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80068fc:	b003      	add	sp, #12
 80068fe:	4770      	bx	lr
 8006900:	20000058 	.word	0x20000058
 8006904:	ffff0208 	.word	0xffff0208

08006908 <memset>:
 8006908:	4402      	add	r2, r0
 800690a:	4603      	mov	r3, r0
 800690c:	4293      	cmp	r3, r2
 800690e:	d100      	bne.n	8006912 <memset+0xa>
 8006910:	4770      	bx	lr
 8006912:	f803 1b01 	strb.w	r1, [r3], #1
 8006916:	e7f9      	b.n	800690c <memset+0x4>

08006918 <__errno>:
 8006918:	4b01      	ldr	r3, [pc, #4]	; (8006920 <__errno+0x8>)
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000058 	.word	0x20000058

08006924 <__libc_init_array>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4d0d      	ldr	r5, [pc, #52]	; (800695c <__libc_init_array+0x38>)
 8006928:	4c0d      	ldr	r4, [pc, #52]	; (8006960 <__libc_init_array+0x3c>)
 800692a:	1b64      	subs	r4, r4, r5
 800692c:	10a4      	asrs	r4, r4, #2
 800692e:	2600      	movs	r6, #0
 8006930:	42a6      	cmp	r6, r4
 8006932:	d109      	bne.n	8006948 <__libc_init_array+0x24>
 8006934:	4d0b      	ldr	r5, [pc, #44]	; (8006964 <__libc_init_array+0x40>)
 8006936:	4c0c      	ldr	r4, [pc, #48]	; (8006968 <__libc_init_array+0x44>)
 8006938:	f000 fc6a 	bl	8007210 <_init>
 800693c:	1b64      	subs	r4, r4, r5
 800693e:	10a4      	asrs	r4, r4, #2
 8006940:	2600      	movs	r6, #0
 8006942:	42a6      	cmp	r6, r4
 8006944:	d105      	bne.n	8006952 <__libc_init_array+0x2e>
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	f855 3b04 	ldr.w	r3, [r5], #4
 800694c:	4798      	blx	r3
 800694e:	3601      	adds	r6, #1
 8006950:	e7ee      	b.n	8006930 <__libc_init_array+0xc>
 8006952:	f855 3b04 	ldr.w	r3, [r5], #4
 8006956:	4798      	blx	r3
 8006958:	3601      	adds	r6, #1
 800695a:	e7f2      	b.n	8006942 <__libc_init_array+0x1e>
 800695c:	0801a2b0 	.word	0x0801a2b0
 8006960:	0801a2b0 	.word	0x0801a2b0
 8006964:	0801a2b0 	.word	0x0801a2b0
 8006968:	0801a2b4 	.word	0x0801a2b4

0800696c <__retarget_lock_acquire_recursive>:
 800696c:	4770      	bx	lr

0800696e <__retarget_lock_release_recursive>:
 800696e:	4770      	bx	lr

08006970 <_free_r>:
 8006970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006972:	2900      	cmp	r1, #0
 8006974:	d044      	beq.n	8006a00 <_free_r+0x90>
 8006976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697a:	9001      	str	r0, [sp, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f1a1 0404 	sub.w	r4, r1, #4
 8006982:	bfb8      	it	lt
 8006984:	18e4      	addlt	r4, r4, r3
 8006986:	f000 f8df 	bl	8006b48 <__malloc_lock>
 800698a:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <_free_r+0x94>)
 800698c:	9801      	ldr	r0, [sp, #4]
 800698e:	6813      	ldr	r3, [r2, #0]
 8006990:	b933      	cbnz	r3, 80069a0 <_free_r+0x30>
 8006992:	6063      	str	r3, [r4, #4]
 8006994:	6014      	str	r4, [r2, #0]
 8006996:	b003      	add	sp, #12
 8006998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800699c:	f000 b8da 	b.w	8006b54 <__malloc_unlock>
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d908      	bls.n	80069b6 <_free_r+0x46>
 80069a4:	6825      	ldr	r5, [r4, #0]
 80069a6:	1961      	adds	r1, r4, r5
 80069a8:	428b      	cmp	r3, r1
 80069aa:	bf01      	itttt	eq
 80069ac:	6819      	ldreq	r1, [r3, #0]
 80069ae:	685b      	ldreq	r3, [r3, #4]
 80069b0:	1949      	addeq	r1, r1, r5
 80069b2:	6021      	streq	r1, [r4, #0]
 80069b4:	e7ed      	b.n	8006992 <_free_r+0x22>
 80069b6:	461a      	mov	r2, r3
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	b10b      	cbz	r3, 80069c0 <_free_r+0x50>
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d9fa      	bls.n	80069b6 <_free_r+0x46>
 80069c0:	6811      	ldr	r1, [r2, #0]
 80069c2:	1855      	adds	r5, r2, r1
 80069c4:	42a5      	cmp	r5, r4
 80069c6:	d10b      	bne.n	80069e0 <_free_r+0x70>
 80069c8:	6824      	ldr	r4, [r4, #0]
 80069ca:	4421      	add	r1, r4
 80069cc:	1854      	adds	r4, r2, r1
 80069ce:	42a3      	cmp	r3, r4
 80069d0:	6011      	str	r1, [r2, #0]
 80069d2:	d1e0      	bne.n	8006996 <_free_r+0x26>
 80069d4:	681c      	ldr	r4, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	6053      	str	r3, [r2, #4]
 80069da:	440c      	add	r4, r1
 80069dc:	6014      	str	r4, [r2, #0]
 80069de:	e7da      	b.n	8006996 <_free_r+0x26>
 80069e0:	d902      	bls.n	80069e8 <_free_r+0x78>
 80069e2:	230c      	movs	r3, #12
 80069e4:	6003      	str	r3, [r0, #0]
 80069e6:	e7d6      	b.n	8006996 <_free_r+0x26>
 80069e8:	6825      	ldr	r5, [r4, #0]
 80069ea:	1961      	adds	r1, r4, r5
 80069ec:	428b      	cmp	r3, r1
 80069ee:	bf04      	itt	eq
 80069f0:	6819      	ldreq	r1, [r3, #0]
 80069f2:	685b      	ldreq	r3, [r3, #4]
 80069f4:	6063      	str	r3, [r4, #4]
 80069f6:	bf04      	itt	eq
 80069f8:	1949      	addeq	r1, r1, r5
 80069fa:	6021      	streq	r1, [r4, #0]
 80069fc:	6054      	str	r4, [r2, #4]
 80069fe:	e7ca      	b.n	8006996 <_free_r+0x26>
 8006a00:	b003      	add	sp, #12
 8006a02:	bd30      	pop	{r4, r5, pc}
 8006a04:	2000c2dc 	.word	0x2000c2dc

08006a08 <sbrk_aligned>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	4e0e      	ldr	r6, [pc, #56]	; (8006a44 <sbrk_aligned+0x3c>)
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	6831      	ldr	r1, [r6, #0]
 8006a10:	4605      	mov	r5, r0
 8006a12:	b911      	cbnz	r1, 8006a1a <sbrk_aligned+0x12>
 8006a14:	f000 fba6 	bl	8007164 <_sbrk_r>
 8006a18:	6030      	str	r0, [r6, #0]
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f000 fba1 	bl	8007164 <_sbrk_r>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	d00a      	beq.n	8006a3c <sbrk_aligned+0x34>
 8006a26:	1cc4      	adds	r4, r0, #3
 8006a28:	f024 0403 	bic.w	r4, r4, #3
 8006a2c:	42a0      	cmp	r0, r4
 8006a2e:	d007      	beq.n	8006a40 <sbrk_aligned+0x38>
 8006a30:	1a21      	subs	r1, r4, r0
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 fb96 	bl	8007164 <_sbrk_r>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d101      	bne.n	8006a40 <sbrk_aligned+0x38>
 8006a3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a40:	4620      	mov	r0, r4
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	2000c2e0 	.word	0x2000c2e0

08006a48 <_malloc_r>:
 8006a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a4c:	1ccd      	adds	r5, r1, #3
 8006a4e:	f025 0503 	bic.w	r5, r5, #3
 8006a52:	3508      	adds	r5, #8
 8006a54:	2d0c      	cmp	r5, #12
 8006a56:	bf38      	it	cc
 8006a58:	250c      	movcc	r5, #12
 8006a5a:	2d00      	cmp	r5, #0
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	db01      	blt.n	8006a64 <_malloc_r+0x1c>
 8006a60:	42a9      	cmp	r1, r5
 8006a62:	d905      	bls.n	8006a70 <_malloc_r+0x28>
 8006a64:	230c      	movs	r3, #12
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	2600      	movs	r6, #0
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b44 <_malloc_r+0xfc>
 8006a74:	f000 f868 	bl	8006b48 <__malloc_lock>
 8006a78:	f8d8 3000 	ldr.w	r3, [r8]
 8006a7c:	461c      	mov	r4, r3
 8006a7e:	bb5c      	cbnz	r4, 8006ad8 <_malloc_r+0x90>
 8006a80:	4629      	mov	r1, r5
 8006a82:	4638      	mov	r0, r7
 8006a84:	f7ff ffc0 	bl	8006a08 <sbrk_aligned>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	d155      	bne.n	8006b3a <_malloc_r+0xf2>
 8006a8e:	f8d8 4000 	ldr.w	r4, [r8]
 8006a92:	4626      	mov	r6, r4
 8006a94:	2e00      	cmp	r6, #0
 8006a96:	d145      	bne.n	8006b24 <_malloc_r+0xdc>
 8006a98:	2c00      	cmp	r4, #0
 8006a9a:	d048      	beq.n	8006b2e <_malloc_r+0xe6>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	eb04 0903 	add.w	r9, r4, r3
 8006aa6:	f000 fb5d 	bl	8007164 <_sbrk_r>
 8006aaa:	4581      	cmp	r9, r0
 8006aac:	d13f      	bne.n	8006b2e <_malloc_r+0xe6>
 8006aae:	6821      	ldr	r1, [r4, #0]
 8006ab0:	1a6d      	subs	r5, r5, r1
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f7ff ffa7 	bl	8006a08 <sbrk_aligned>
 8006aba:	3001      	adds	r0, #1
 8006abc:	d037      	beq.n	8006b2e <_malloc_r+0xe6>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	442b      	add	r3, r5
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d038      	beq.n	8006b3e <_malloc_r+0xf6>
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	42a2      	cmp	r2, r4
 8006ad0:	d12b      	bne.n	8006b2a <_malloc_r+0xe2>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	e00f      	b.n	8006af8 <_malloc_r+0xb0>
 8006ad8:	6822      	ldr	r2, [r4, #0]
 8006ada:	1b52      	subs	r2, r2, r5
 8006adc:	d41f      	bmi.n	8006b1e <_malloc_r+0xd6>
 8006ade:	2a0b      	cmp	r2, #11
 8006ae0:	d917      	bls.n	8006b12 <_malloc_r+0xca>
 8006ae2:	1961      	adds	r1, r4, r5
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	6025      	str	r5, [r4, #0]
 8006ae8:	bf18      	it	ne
 8006aea:	6059      	strne	r1, [r3, #4]
 8006aec:	6863      	ldr	r3, [r4, #4]
 8006aee:	bf08      	it	eq
 8006af0:	f8c8 1000 	streq.w	r1, [r8]
 8006af4:	5162      	str	r2, [r4, r5]
 8006af6:	604b      	str	r3, [r1, #4]
 8006af8:	4638      	mov	r0, r7
 8006afa:	f104 060b 	add.w	r6, r4, #11
 8006afe:	f000 f829 	bl	8006b54 <__malloc_unlock>
 8006b02:	f026 0607 	bic.w	r6, r6, #7
 8006b06:	1d23      	adds	r3, r4, #4
 8006b08:	1af2      	subs	r2, r6, r3
 8006b0a:	d0ae      	beq.n	8006a6a <_malloc_r+0x22>
 8006b0c:	1b9b      	subs	r3, r3, r6
 8006b0e:	50a3      	str	r3, [r4, r2]
 8006b10:	e7ab      	b.n	8006a6a <_malloc_r+0x22>
 8006b12:	42a3      	cmp	r3, r4
 8006b14:	6862      	ldr	r2, [r4, #4]
 8006b16:	d1dd      	bne.n	8006ad4 <_malloc_r+0x8c>
 8006b18:	f8c8 2000 	str.w	r2, [r8]
 8006b1c:	e7ec      	b.n	8006af8 <_malloc_r+0xb0>
 8006b1e:	4623      	mov	r3, r4
 8006b20:	6864      	ldr	r4, [r4, #4]
 8006b22:	e7ac      	b.n	8006a7e <_malloc_r+0x36>
 8006b24:	4634      	mov	r4, r6
 8006b26:	6876      	ldr	r6, [r6, #4]
 8006b28:	e7b4      	b.n	8006a94 <_malloc_r+0x4c>
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	e7cc      	b.n	8006ac8 <_malloc_r+0x80>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	603b      	str	r3, [r7, #0]
 8006b32:	4638      	mov	r0, r7
 8006b34:	f000 f80e 	bl	8006b54 <__malloc_unlock>
 8006b38:	e797      	b.n	8006a6a <_malloc_r+0x22>
 8006b3a:	6025      	str	r5, [r4, #0]
 8006b3c:	e7dc      	b.n	8006af8 <_malloc_r+0xb0>
 8006b3e:	605b      	str	r3, [r3, #4]
 8006b40:	deff      	udf	#255	; 0xff
 8006b42:	bf00      	nop
 8006b44:	2000c2dc 	.word	0x2000c2dc

08006b48 <__malloc_lock>:
 8006b48:	4801      	ldr	r0, [pc, #4]	; (8006b50 <__malloc_lock+0x8>)
 8006b4a:	f7ff bf0f 	b.w	800696c <__retarget_lock_acquire_recursive>
 8006b4e:	bf00      	nop
 8006b50:	2000c2d8 	.word	0x2000c2d8

08006b54 <__malloc_unlock>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__malloc_unlock+0x8>)
 8006b56:	f7ff bf0a 	b.w	800696e <__retarget_lock_release_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	2000c2d8 	.word	0x2000c2d8

08006b60 <__ssputs_r>:
 8006b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	688e      	ldr	r6, [r1, #8]
 8006b66:	461f      	mov	r7, r3
 8006b68:	42be      	cmp	r6, r7
 8006b6a:	680b      	ldr	r3, [r1, #0]
 8006b6c:	4682      	mov	sl, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	4690      	mov	r8, r2
 8006b72:	d82c      	bhi.n	8006bce <__ssputs_r+0x6e>
 8006b74:	898a      	ldrh	r2, [r1, #12]
 8006b76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b7a:	d026      	beq.n	8006bca <__ssputs_r+0x6a>
 8006b7c:	6965      	ldr	r5, [r4, #20]
 8006b7e:	6909      	ldr	r1, [r1, #16]
 8006b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b84:	eba3 0901 	sub.w	r9, r3, r1
 8006b88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b8c:	1c7b      	adds	r3, r7, #1
 8006b8e:	444b      	add	r3, r9
 8006b90:	106d      	asrs	r5, r5, #1
 8006b92:	429d      	cmp	r5, r3
 8006b94:	bf38      	it	cc
 8006b96:	461d      	movcc	r5, r3
 8006b98:	0553      	lsls	r3, r2, #21
 8006b9a:	d527      	bpl.n	8006bec <__ssputs_r+0x8c>
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	f7ff ff53 	bl	8006a48 <_malloc_r>
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	b360      	cbz	r0, 8006c00 <__ssputs_r+0xa0>
 8006ba6:	6921      	ldr	r1, [r4, #16]
 8006ba8:	464a      	mov	r2, r9
 8006baa:	f000 faeb 	bl	8007184 <memcpy>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	6126      	str	r6, [r4, #16]
 8006bbc:	6165      	str	r5, [r4, #20]
 8006bbe:	444e      	add	r6, r9
 8006bc0:	eba5 0509 	sub.w	r5, r5, r9
 8006bc4:	6026      	str	r6, [r4, #0]
 8006bc6:	60a5      	str	r5, [r4, #8]
 8006bc8:	463e      	mov	r6, r7
 8006bca:	42be      	cmp	r6, r7
 8006bcc:	d900      	bls.n	8006bd0 <__ssputs_r+0x70>
 8006bce:	463e      	mov	r6, r7
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	4632      	mov	r2, r6
 8006bd4:	4641      	mov	r1, r8
 8006bd6:	f000 faab 	bl	8007130 <memmove>
 8006bda:	68a3      	ldr	r3, [r4, #8]
 8006bdc:	1b9b      	subs	r3, r3, r6
 8006bde:	60a3      	str	r3, [r4, #8]
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	4433      	add	r3, r6
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	2000      	movs	r0, #0
 8006be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bec:	462a      	mov	r2, r5
 8006bee:	f000 fad7 	bl	80071a0 <_realloc_r>
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d1e0      	bne.n	8006bba <__ssputs_r+0x5a>
 8006bf8:	6921      	ldr	r1, [r4, #16]
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	f7ff feb8 	bl	8006970 <_free_r>
 8006c00:	230c      	movs	r3, #12
 8006c02:	f8ca 3000 	str.w	r3, [sl]
 8006c06:	89a3      	ldrh	r3, [r4, #12]
 8006c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c0c:	81a3      	strh	r3, [r4, #12]
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c12:	e7e9      	b.n	8006be8 <__ssputs_r+0x88>

08006c14 <_svfiprintf_r>:
 8006c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c18:	4698      	mov	r8, r3
 8006c1a:	898b      	ldrh	r3, [r1, #12]
 8006c1c:	061b      	lsls	r3, r3, #24
 8006c1e:	b09d      	sub	sp, #116	; 0x74
 8006c20:	4607      	mov	r7, r0
 8006c22:	460d      	mov	r5, r1
 8006c24:	4614      	mov	r4, r2
 8006c26:	d50e      	bpl.n	8006c46 <_svfiprintf_r+0x32>
 8006c28:	690b      	ldr	r3, [r1, #16]
 8006c2a:	b963      	cbnz	r3, 8006c46 <_svfiprintf_r+0x32>
 8006c2c:	2140      	movs	r1, #64	; 0x40
 8006c2e:	f7ff ff0b 	bl	8006a48 <_malloc_r>
 8006c32:	6028      	str	r0, [r5, #0]
 8006c34:	6128      	str	r0, [r5, #16]
 8006c36:	b920      	cbnz	r0, 8006c42 <_svfiprintf_r+0x2e>
 8006c38:	230c      	movs	r3, #12
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c40:	e0d0      	b.n	8006de4 <_svfiprintf_r+0x1d0>
 8006c42:	2340      	movs	r3, #64	; 0x40
 8006c44:	616b      	str	r3, [r5, #20]
 8006c46:	2300      	movs	r3, #0
 8006c48:	9309      	str	r3, [sp, #36]	; 0x24
 8006c4a:	2320      	movs	r3, #32
 8006c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c54:	2330      	movs	r3, #48	; 0x30
 8006c56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006dfc <_svfiprintf_r+0x1e8>
 8006c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c5e:	f04f 0901 	mov.w	r9, #1
 8006c62:	4623      	mov	r3, r4
 8006c64:	469a      	mov	sl, r3
 8006c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c6a:	b10a      	cbz	r2, 8006c70 <_svfiprintf_r+0x5c>
 8006c6c:	2a25      	cmp	r2, #37	; 0x25
 8006c6e:	d1f9      	bne.n	8006c64 <_svfiprintf_r+0x50>
 8006c70:	ebba 0b04 	subs.w	fp, sl, r4
 8006c74:	d00b      	beq.n	8006c8e <_svfiprintf_r+0x7a>
 8006c76:	465b      	mov	r3, fp
 8006c78:	4622      	mov	r2, r4
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f7ff ff6f 	bl	8006b60 <__ssputs_r>
 8006c82:	3001      	adds	r0, #1
 8006c84:	f000 80a9 	beq.w	8006dda <_svfiprintf_r+0x1c6>
 8006c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c8a:	445a      	add	r2, fp
 8006c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80a1 	beq.w	8006dda <_svfiprintf_r+0x1c6>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ca2:	f10a 0a01 	add.w	sl, sl, #1
 8006ca6:	9304      	str	r3, [sp, #16]
 8006ca8:	9307      	str	r3, [sp, #28]
 8006caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cae:	931a      	str	r3, [sp, #104]	; 0x68
 8006cb0:	4654      	mov	r4, sl
 8006cb2:	2205      	movs	r2, #5
 8006cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb8:	4850      	ldr	r0, [pc, #320]	; (8006dfc <_svfiprintf_r+0x1e8>)
 8006cba:	f7f9 fa91 	bl	80001e0 <memchr>
 8006cbe:	9a04      	ldr	r2, [sp, #16]
 8006cc0:	b9d8      	cbnz	r0, 8006cfa <_svfiprintf_r+0xe6>
 8006cc2:	06d0      	lsls	r0, r2, #27
 8006cc4:	bf44      	itt	mi
 8006cc6:	2320      	movmi	r3, #32
 8006cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ccc:	0711      	lsls	r1, r2, #28
 8006cce:	bf44      	itt	mi
 8006cd0:	232b      	movmi	r3, #43	; 0x2b
 8006cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cda:	2b2a      	cmp	r3, #42	; 0x2a
 8006cdc:	d015      	beq.n	8006d0a <_svfiprintf_r+0xf6>
 8006cde:	9a07      	ldr	r2, [sp, #28]
 8006ce0:	4654      	mov	r4, sl
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	f04f 0c0a 	mov.w	ip, #10
 8006ce8:	4621      	mov	r1, r4
 8006cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cee:	3b30      	subs	r3, #48	; 0x30
 8006cf0:	2b09      	cmp	r3, #9
 8006cf2:	d94d      	bls.n	8006d90 <_svfiprintf_r+0x17c>
 8006cf4:	b1b0      	cbz	r0, 8006d24 <_svfiprintf_r+0x110>
 8006cf6:	9207      	str	r2, [sp, #28]
 8006cf8:	e014      	b.n	8006d24 <_svfiprintf_r+0x110>
 8006cfa:	eba0 0308 	sub.w	r3, r0, r8
 8006cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8006d02:	4313      	orrs	r3, r2
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	46a2      	mov	sl, r4
 8006d08:	e7d2      	b.n	8006cb0 <_svfiprintf_r+0x9c>
 8006d0a:	9b03      	ldr	r3, [sp, #12]
 8006d0c:	1d19      	adds	r1, r3, #4
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	9103      	str	r1, [sp, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bfbb      	ittet	lt
 8006d16:	425b      	neglt	r3, r3
 8006d18:	f042 0202 	orrlt.w	r2, r2, #2
 8006d1c:	9307      	strge	r3, [sp, #28]
 8006d1e:	9307      	strlt	r3, [sp, #28]
 8006d20:	bfb8      	it	lt
 8006d22:	9204      	strlt	r2, [sp, #16]
 8006d24:	7823      	ldrb	r3, [r4, #0]
 8006d26:	2b2e      	cmp	r3, #46	; 0x2e
 8006d28:	d10c      	bne.n	8006d44 <_svfiprintf_r+0x130>
 8006d2a:	7863      	ldrb	r3, [r4, #1]
 8006d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d2e:	d134      	bne.n	8006d9a <_svfiprintf_r+0x186>
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	1d1a      	adds	r2, r3, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	9203      	str	r2, [sp, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	bfb8      	it	lt
 8006d3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d40:	3402      	adds	r4, #2
 8006d42:	9305      	str	r3, [sp, #20]
 8006d44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e0c <_svfiprintf_r+0x1f8>
 8006d48:	7821      	ldrb	r1, [r4, #0]
 8006d4a:	2203      	movs	r2, #3
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	f7f9 fa47 	bl	80001e0 <memchr>
 8006d52:	b138      	cbz	r0, 8006d64 <_svfiprintf_r+0x150>
 8006d54:	9b04      	ldr	r3, [sp, #16]
 8006d56:	eba0 000a 	sub.w	r0, r0, sl
 8006d5a:	2240      	movs	r2, #64	; 0x40
 8006d5c:	4082      	lsls	r2, r0
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	3401      	adds	r4, #1
 8006d62:	9304      	str	r3, [sp, #16]
 8006d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d68:	4825      	ldr	r0, [pc, #148]	; (8006e00 <_svfiprintf_r+0x1ec>)
 8006d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d6e:	2206      	movs	r2, #6
 8006d70:	f7f9 fa36 	bl	80001e0 <memchr>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d038      	beq.n	8006dea <_svfiprintf_r+0x1d6>
 8006d78:	4b22      	ldr	r3, [pc, #136]	; (8006e04 <_svfiprintf_r+0x1f0>)
 8006d7a:	bb1b      	cbnz	r3, 8006dc4 <_svfiprintf_r+0x1b0>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	3307      	adds	r3, #7
 8006d80:	f023 0307 	bic.w	r3, r3, #7
 8006d84:	3308      	adds	r3, #8
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8a:	4433      	add	r3, r6
 8006d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8e:	e768      	b.n	8006c62 <_svfiprintf_r+0x4e>
 8006d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d94:	460c      	mov	r4, r1
 8006d96:	2001      	movs	r0, #1
 8006d98:	e7a6      	b.n	8006ce8 <_svfiprintf_r+0xd4>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	3401      	adds	r4, #1
 8006d9e:	9305      	str	r3, [sp, #20]
 8006da0:	4619      	mov	r1, r3
 8006da2:	f04f 0c0a 	mov.w	ip, #10
 8006da6:	4620      	mov	r0, r4
 8006da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dac:	3a30      	subs	r2, #48	; 0x30
 8006dae:	2a09      	cmp	r2, #9
 8006db0:	d903      	bls.n	8006dba <_svfiprintf_r+0x1a6>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0c6      	beq.n	8006d44 <_svfiprintf_r+0x130>
 8006db6:	9105      	str	r1, [sp, #20]
 8006db8:	e7c4      	b.n	8006d44 <_svfiprintf_r+0x130>
 8006dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e7f0      	b.n	8006da6 <_svfiprintf_r+0x192>
 8006dc4:	ab03      	add	r3, sp, #12
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <_svfiprintf_r+0x1f4>)
 8006dcc:	a904      	add	r1, sp, #16
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f3af 8000 	nop.w
 8006dd4:	1c42      	adds	r2, r0, #1
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	d1d6      	bne.n	8006d88 <_svfiprintf_r+0x174>
 8006dda:	89ab      	ldrh	r3, [r5, #12]
 8006ddc:	065b      	lsls	r3, r3, #25
 8006dde:	f53f af2d 	bmi.w	8006c3c <_svfiprintf_r+0x28>
 8006de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006de4:	b01d      	add	sp, #116	; 0x74
 8006de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dea:	ab03      	add	r3, sp, #12
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	462a      	mov	r2, r5
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <_svfiprintf_r+0x1f4>)
 8006df2:	a904      	add	r1, sp, #16
 8006df4:	4638      	mov	r0, r7
 8006df6:	f000 f879 	bl	8006eec <_printf_i>
 8006dfa:	e7eb      	b.n	8006dd4 <_svfiprintf_r+0x1c0>
 8006dfc:	0801a274 	.word	0x0801a274
 8006e00:	0801a27e 	.word	0x0801a27e
 8006e04:	00000000 	.word	0x00000000
 8006e08:	08006b61 	.word	0x08006b61
 8006e0c:	0801a27a 	.word	0x0801a27a

08006e10 <_printf_common>:
 8006e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	4616      	mov	r6, r2
 8006e16:	4699      	mov	r9, r3
 8006e18:	688a      	ldr	r2, [r1, #8]
 8006e1a:	690b      	ldr	r3, [r1, #16]
 8006e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e20:	4293      	cmp	r3, r2
 8006e22:	bfb8      	it	lt
 8006e24:	4613      	movlt	r3, r2
 8006e26:	6033      	str	r3, [r6, #0]
 8006e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	b10a      	cbz	r2, 8006e36 <_printf_common+0x26>
 8006e32:	3301      	adds	r3, #1
 8006e34:	6033      	str	r3, [r6, #0]
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	0699      	lsls	r1, r3, #26
 8006e3a:	bf42      	ittt	mi
 8006e3c:	6833      	ldrmi	r3, [r6, #0]
 8006e3e:	3302      	addmi	r3, #2
 8006e40:	6033      	strmi	r3, [r6, #0]
 8006e42:	6825      	ldr	r5, [r4, #0]
 8006e44:	f015 0506 	ands.w	r5, r5, #6
 8006e48:	d106      	bne.n	8006e58 <_printf_common+0x48>
 8006e4a:	f104 0a19 	add.w	sl, r4, #25
 8006e4e:	68e3      	ldr	r3, [r4, #12]
 8006e50:	6832      	ldr	r2, [r6, #0]
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	dc26      	bgt.n	8006ea6 <_printf_common+0x96>
 8006e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e5c:	1e13      	subs	r3, r2, #0
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	bf18      	it	ne
 8006e62:	2301      	movne	r3, #1
 8006e64:	0692      	lsls	r2, r2, #26
 8006e66:	d42b      	bmi.n	8006ec0 <_printf_common+0xb0>
 8006e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	4638      	mov	r0, r7
 8006e70:	47c0      	blx	r8
 8006e72:	3001      	adds	r0, #1
 8006e74:	d01e      	beq.n	8006eb4 <_printf_common+0xa4>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	6922      	ldr	r2, [r4, #16]
 8006e7a:	f003 0306 	and.w	r3, r3, #6
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	bf02      	ittt	eq
 8006e82:	68e5      	ldreq	r5, [r4, #12]
 8006e84:	6833      	ldreq	r3, [r6, #0]
 8006e86:	1aed      	subeq	r5, r5, r3
 8006e88:	68a3      	ldr	r3, [r4, #8]
 8006e8a:	bf0c      	ite	eq
 8006e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e90:	2500      	movne	r5, #0
 8006e92:	4293      	cmp	r3, r2
 8006e94:	bfc4      	itt	gt
 8006e96:	1a9b      	subgt	r3, r3, r2
 8006e98:	18ed      	addgt	r5, r5, r3
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	341a      	adds	r4, #26
 8006e9e:	42b5      	cmp	r5, r6
 8006ea0:	d11a      	bne.n	8006ed8 <_printf_common+0xc8>
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	e008      	b.n	8006eb8 <_printf_common+0xa8>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4652      	mov	r2, sl
 8006eaa:	4649      	mov	r1, r9
 8006eac:	4638      	mov	r0, r7
 8006eae:	47c0      	blx	r8
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d103      	bne.n	8006ebc <_printf_common+0xac>
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ebc:	3501      	adds	r5, #1
 8006ebe:	e7c6      	b.n	8006e4e <_printf_common+0x3e>
 8006ec0:	18e1      	adds	r1, r4, r3
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	2030      	movs	r0, #48	; 0x30
 8006ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eca:	4422      	add	r2, r4
 8006ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	e7c7      	b.n	8006e68 <_printf_common+0x58>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	4622      	mov	r2, r4
 8006edc:	4649      	mov	r1, r9
 8006ede:	4638      	mov	r0, r7
 8006ee0:	47c0      	blx	r8
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d0e6      	beq.n	8006eb4 <_printf_common+0xa4>
 8006ee6:	3601      	adds	r6, #1
 8006ee8:	e7d9      	b.n	8006e9e <_printf_common+0x8e>
	...

08006eec <_printf_i>:
 8006eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef0:	7e0f      	ldrb	r7, [r1, #24]
 8006ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ef4:	2f78      	cmp	r7, #120	; 0x78
 8006ef6:	4691      	mov	r9, r2
 8006ef8:	4680      	mov	r8, r0
 8006efa:	460c      	mov	r4, r1
 8006efc:	469a      	mov	sl, r3
 8006efe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f02:	d807      	bhi.n	8006f14 <_printf_i+0x28>
 8006f04:	2f62      	cmp	r7, #98	; 0x62
 8006f06:	d80a      	bhi.n	8006f1e <_printf_i+0x32>
 8006f08:	2f00      	cmp	r7, #0
 8006f0a:	f000 80d4 	beq.w	80070b6 <_printf_i+0x1ca>
 8006f0e:	2f58      	cmp	r7, #88	; 0x58
 8006f10:	f000 80c0 	beq.w	8007094 <_printf_i+0x1a8>
 8006f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f1c:	e03a      	b.n	8006f94 <_printf_i+0xa8>
 8006f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f22:	2b15      	cmp	r3, #21
 8006f24:	d8f6      	bhi.n	8006f14 <_printf_i+0x28>
 8006f26:	a101      	add	r1, pc, #4	; (adr r1, 8006f2c <_printf_i+0x40>)
 8006f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f2c:	08006f85 	.word	0x08006f85
 8006f30:	08006f99 	.word	0x08006f99
 8006f34:	08006f15 	.word	0x08006f15
 8006f38:	08006f15 	.word	0x08006f15
 8006f3c:	08006f15 	.word	0x08006f15
 8006f40:	08006f15 	.word	0x08006f15
 8006f44:	08006f99 	.word	0x08006f99
 8006f48:	08006f15 	.word	0x08006f15
 8006f4c:	08006f15 	.word	0x08006f15
 8006f50:	08006f15 	.word	0x08006f15
 8006f54:	08006f15 	.word	0x08006f15
 8006f58:	0800709d 	.word	0x0800709d
 8006f5c:	08006fc5 	.word	0x08006fc5
 8006f60:	08007057 	.word	0x08007057
 8006f64:	08006f15 	.word	0x08006f15
 8006f68:	08006f15 	.word	0x08006f15
 8006f6c:	080070bf 	.word	0x080070bf
 8006f70:	08006f15 	.word	0x08006f15
 8006f74:	08006fc5 	.word	0x08006fc5
 8006f78:	08006f15 	.word	0x08006f15
 8006f7c:	08006f15 	.word	0x08006f15
 8006f80:	0800705f 	.word	0x0800705f
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	1d1a      	adds	r2, r3, #4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	602a      	str	r2, [r5, #0]
 8006f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f94:	2301      	movs	r3, #1
 8006f96:	e09f      	b.n	80070d8 <_printf_i+0x1ec>
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	682b      	ldr	r3, [r5, #0]
 8006f9c:	0607      	lsls	r7, r0, #24
 8006f9e:	f103 0104 	add.w	r1, r3, #4
 8006fa2:	6029      	str	r1, [r5, #0]
 8006fa4:	d501      	bpl.n	8006faa <_printf_i+0xbe>
 8006fa6:	681e      	ldr	r6, [r3, #0]
 8006fa8:	e003      	b.n	8006fb2 <_printf_i+0xc6>
 8006faa:	0646      	lsls	r6, r0, #25
 8006fac:	d5fb      	bpl.n	8006fa6 <_printf_i+0xba>
 8006fae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006fb2:	2e00      	cmp	r6, #0
 8006fb4:	da03      	bge.n	8006fbe <_printf_i+0xd2>
 8006fb6:	232d      	movs	r3, #45	; 0x2d
 8006fb8:	4276      	negs	r6, r6
 8006fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fbe:	485a      	ldr	r0, [pc, #360]	; (8007128 <_printf_i+0x23c>)
 8006fc0:	230a      	movs	r3, #10
 8006fc2:	e012      	b.n	8006fea <_printf_i+0xfe>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	6820      	ldr	r0, [r4, #0]
 8006fc8:	1d19      	adds	r1, r3, #4
 8006fca:	6029      	str	r1, [r5, #0]
 8006fcc:	0605      	lsls	r5, r0, #24
 8006fce:	d501      	bpl.n	8006fd4 <_printf_i+0xe8>
 8006fd0:	681e      	ldr	r6, [r3, #0]
 8006fd2:	e002      	b.n	8006fda <_printf_i+0xee>
 8006fd4:	0641      	lsls	r1, r0, #25
 8006fd6:	d5fb      	bpl.n	8006fd0 <_printf_i+0xe4>
 8006fd8:	881e      	ldrh	r6, [r3, #0]
 8006fda:	4853      	ldr	r0, [pc, #332]	; (8007128 <_printf_i+0x23c>)
 8006fdc:	2f6f      	cmp	r7, #111	; 0x6f
 8006fde:	bf0c      	ite	eq
 8006fe0:	2308      	moveq	r3, #8
 8006fe2:	230a      	movne	r3, #10
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fea:	6865      	ldr	r5, [r4, #4]
 8006fec:	60a5      	str	r5, [r4, #8]
 8006fee:	2d00      	cmp	r5, #0
 8006ff0:	bfa2      	ittt	ge
 8006ff2:	6821      	ldrge	r1, [r4, #0]
 8006ff4:	f021 0104 	bicge.w	r1, r1, #4
 8006ff8:	6021      	strge	r1, [r4, #0]
 8006ffa:	b90e      	cbnz	r6, 8007000 <_printf_i+0x114>
 8006ffc:	2d00      	cmp	r5, #0
 8006ffe:	d04b      	beq.n	8007098 <_printf_i+0x1ac>
 8007000:	4615      	mov	r5, r2
 8007002:	fbb6 f1f3 	udiv	r1, r6, r3
 8007006:	fb03 6711 	mls	r7, r3, r1, r6
 800700a:	5dc7      	ldrb	r7, [r0, r7]
 800700c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007010:	4637      	mov	r7, r6
 8007012:	42bb      	cmp	r3, r7
 8007014:	460e      	mov	r6, r1
 8007016:	d9f4      	bls.n	8007002 <_printf_i+0x116>
 8007018:	2b08      	cmp	r3, #8
 800701a:	d10b      	bne.n	8007034 <_printf_i+0x148>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	07de      	lsls	r6, r3, #31
 8007020:	d508      	bpl.n	8007034 <_printf_i+0x148>
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	6861      	ldr	r1, [r4, #4]
 8007026:	4299      	cmp	r1, r3
 8007028:	bfde      	ittt	le
 800702a:	2330      	movle	r3, #48	; 0x30
 800702c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007030:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007034:	1b52      	subs	r2, r2, r5
 8007036:	6122      	str	r2, [r4, #16]
 8007038:	f8cd a000 	str.w	sl, [sp]
 800703c:	464b      	mov	r3, r9
 800703e:	aa03      	add	r2, sp, #12
 8007040:	4621      	mov	r1, r4
 8007042:	4640      	mov	r0, r8
 8007044:	f7ff fee4 	bl	8006e10 <_printf_common>
 8007048:	3001      	adds	r0, #1
 800704a:	d14a      	bne.n	80070e2 <_printf_i+0x1f6>
 800704c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007050:	b004      	add	sp, #16
 8007052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f043 0320 	orr.w	r3, r3, #32
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	4833      	ldr	r0, [pc, #204]	; (800712c <_printf_i+0x240>)
 8007060:	2778      	movs	r7, #120	; 0x78
 8007062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	6829      	ldr	r1, [r5, #0]
 800706a:	061f      	lsls	r7, r3, #24
 800706c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007070:	d402      	bmi.n	8007078 <_printf_i+0x18c>
 8007072:	065f      	lsls	r7, r3, #25
 8007074:	bf48      	it	mi
 8007076:	b2b6      	uxthmi	r6, r6
 8007078:	07df      	lsls	r7, r3, #31
 800707a:	bf48      	it	mi
 800707c:	f043 0320 	orrmi.w	r3, r3, #32
 8007080:	6029      	str	r1, [r5, #0]
 8007082:	bf48      	it	mi
 8007084:	6023      	strmi	r3, [r4, #0]
 8007086:	b91e      	cbnz	r6, 8007090 <_printf_i+0x1a4>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	f023 0320 	bic.w	r3, r3, #32
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	2310      	movs	r3, #16
 8007092:	e7a7      	b.n	8006fe4 <_printf_i+0xf8>
 8007094:	4824      	ldr	r0, [pc, #144]	; (8007128 <_printf_i+0x23c>)
 8007096:	e7e4      	b.n	8007062 <_printf_i+0x176>
 8007098:	4615      	mov	r5, r2
 800709a:	e7bd      	b.n	8007018 <_printf_i+0x12c>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	6826      	ldr	r6, [r4, #0]
 80070a0:	6961      	ldr	r1, [r4, #20]
 80070a2:	1d18      	adds	r0, r3, #4
 80070a4:	6028      	str	r0, [r5, #0]
 80070a6:	0635      	lsls	r5, r6, #24
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	d501      	bpl.n	80070b0 <_printf_i+0x1c4>
 80070ac:	6019      	str	r1, [r3, #0]
 80070ae:	e002      	b.n	80070b6 <_printf_i+0x1ca>
 80070b0:	0670      	lsls	r0, r6, #25
 80070b2:	d5fb      	bpl.n	80070ac <_printf_i+0x1c0>
 80070b4:	8019      	strh	r1, [r3, #0]
 80070b6:	2300      	movs	r3, #0
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	4615      	mov	r5, r2
 80070bc:	e7bc      	b.n	8007038 <_printf_i+0x14c>
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	1d1a      	adds	r2, r3, #4
 80070c2:	602a      	str	r2, [r5, #0]
 80070c4:	681d      	ldr	r5, [r3, #0]
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	2100      	movs	r1, #0
 80070ca:	4628      	mov	r0, r5
 80070cc:	f7f9 f888 	bl	80001e0 <memchr>
 80070d0:	b108      	cbz	r0, 80070d6 <_printf_i+0x1ea>
 80070d2:	1b40      	subs	r0, r0, r5
 80070d4:	6060      	str	r0, [r4, #4]
 80070d6:	6863      	ldr	r3, [r4, #4]
 80070d8:	6123      	str	r3, [r4, #16]
 80070da:	2300      	movs	r3, #0
 80070dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e0:	e7aa      	b.n	8007038 <_printf_i+0x14c>
 80070e2:	6923      	ldr	r3, [r4, #16]
 80070e4:	462a      	mov	r2, r5
 80070e6:	4649      	mov	r1, r9
 80070e8:	4640      	mov	r0, r8
 80070ea:	47d0      	blx	sl
 80070ec:	3001      	adds	r0, #1
 80070ee:	d0ad      	beq.n	800704c <_printf_i+0x160>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	079b      	lsls	r3, r3, #30
 80070f4:	d413      	bmi.n	800711e <_printf_i+0x232>
 80070f6:	68e0      	ldr	r0, [r4, #12]
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	4298      	cmp	r0, r3
 80070fc:	bfb8      	it	lt
 80070fe:	4618      	movlt	r0, r3
 8007100:	e7a6      	b.n	8007050 <_printf_i+0x164>
 8007102:	2301      	movs	r3, #1
 8007104:	4632      	mov	r2, r6
 8007106:	4649      	mov	r1, r9
 8007108:	4640      	mov	r0, r8
 800710a:	47d0      	blx	sl
 800710c:	3001      	adds	r0, #1
 800710e:	d09d      	beq.n	800704c <_printf_i+0x160>
 8007110:	3501      	adds	r5, #1
 8007112:	68e3      	ldr	r3, [r4, #12]
 8007114:	9903      	ldr	r1, [sp, #12]
 8007116:	1a5b      	subs	r3, r3, r1
 8007118:	42ab      	cmp	r3, r5
 800711a:	dcf2      	bgt.n	8007102 <_printf_i+0x216>
 800711c:	e7eb      	b.n	80070f6 <_printf_i+0x20a>
 800711e:	2500      	movs	r5, #0
 8007120:	f104 0619 	add.w	r6, r4, #25
 8007124:	e7f5      	b.n	8007112 <_printf_i+0x226>
 8007126:	bf00      	nop
 8007128:	0801a285 	.word	0x0801a285
 800712c:	0801a296 	.word	0x0801a296

08007130 <memmove>:
 8007130:	4288      	cmp	r0, r1
 8007132:	b510      	push	{r4, lr}
 8007134:	eb01 0402 	add.w	r4, r1, r2
 8007138:	d902      	bls.n	8007140 <memmove+0x10>
 800713a:	4284      	cmp	r4, r0
 800713c:	4623      	mov	r3, r4
 800713e:	d807      	bhi.n	8007150 <memmove+0x20>
 8007140:	1e43      	subs	r3, r0, #1
 8007142:	42a1      	cmp	r1, r4
 8007144:	d008      	beq.n	8007158 <memmove+0x28>
 8007146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800714a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800714e:	e7f8      	b.n	8007142 <memmove+0x12>
 8007150:	4402      	add	r2, r0
 8007152:	4601      	mov	r1, r0
 8007154:	428a      	cmp	r2, r1
 8007156:	d100      	bne.n	800715a <memmove+0x2a>
 8007158:	bd10      	pop	{r4, pc}
 800715a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800715e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007162:	e7f7      	b.n	8007154 <memmove+0x24>

08007164 <_sbrk_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d06      	ldr	r5, [pc, #24]	; (8007180 <_sbrk_r+0x1c>)
 8007168:	2300      	movs	r3, #0
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	f7fa f922 	bl	80013b8 <_sbrk>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_sbrk_r+0x1a>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	b103      	cbz	r3, 800717e <_sbrk_r+0x1a>
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	2000c2d4 	.word	0x2000c2d4

08007184 <memcpy>:
 8007184:	440a      	add	r2, r1
 8007186:	4291      	cmp	r1, r2
 8007188:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800718c:	d100      	bne.n	8007190 <memcpy+0xc>
 800718e:	4770      	bx	lr
 8007190:	b510      	push	{r4, lr}
 8007192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800719a:	4291      	cmp	r1, r2
 800719c:	d1f9      	bne.n	8007192 <memcpy+0xe>
 800719e:	bd10      	pop	{r4, pc}

080071a0 <_realloc_r>:
 80071a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a4:	4680      	mov	r8, r0
 80071a6:	4614      	mov	r4, r2
 80071a8:	460e      	mov	r6, r1
 80071aa:	b921      	cbnz	r1, 80071b6 <_realloc_r+0x16>
 80071ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b0:	4611      	mov	r1, r2
 80071b2:	f7ff bc49 	b.w	8006a48 <_malloc_r>
 80071b6:	b92a      	cbnz	r2, 80071c4 <_realloc_r+0x24>
 80071b8:	f7ff fbda 	bl	8006970 <_free_r>
 80071bc:	4625      	mov	r5, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071c4:	f000 f81b 	bl	80071fe <_malloc_usable_size_r>
 80071c8:	4284      	cmp	r4, r0
 80071ca:	4607      	mov	r7, r0
 80071cc:	d802      	bhi.n	80071d4 <_realloc_r+0x34>
 80071ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071d2:	d812      	bhi.n	80071fa <_realloc_r+0x5a>
 80071d4:	4621      	mov	r1, r4
 80071d6:	4640      	mov	r0, r8
 80071d8:	f7ff fc36 	bl	8006a48 <_malloc_r>
 80071dc:	4605      	mov	r5, r0
 80071de:	2800      	cmp	r0, #0
 80071e0:	d0ed      	beq.n	80071be <_realloc_r+0x1e>
 80071e2:	42bc      	cmp	r4, r7
 80071e4:	4622      	mov	r2, r4
 80071e6:	4631      	mov	r1, r6
 80071e8:	bf28      	it	cs
 80071ea:	463a      	movcs	r2, r7
 80071ec:	f7ff ffca 	bl	8007184 <memcpy>
 80071f0:	4631      	mov	r1, r6
 80071f2:	4640      	mov	r0, r8
 80071f4:	f7ff fbbc 	bl	8006970 <_free_r>
 80071f8:	e7e1      	b.n	80071be <_realloc_r+0x1e>
 80071fa:	4635      	mov	r5, r6
 80071fc:	e7df      	b.n	80071be <_realloc_r+0x1e>

080071fe <_malloc_usable_size_r>:
 80071fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007202:	1f18      	subs	r0, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	bfbc      	itt	lt
 8007208:	580b      	ldrlt	r3, [r1, r0]
 800720a:	18c0      	addlt	r0, r0, r3
 800720c:	4770      	bx	lr
	...

08007210 <_init>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	bf00      	nop
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr

0800721c <_fini>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr
