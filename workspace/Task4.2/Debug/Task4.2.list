
Task4.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013834  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018f64  08018f64  00030060  2**0
                  CONTENTS
  4 .ARM          00000008  08018f64  08018f64  00028f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018f6c  08018f6c  00030060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018f6c  08018f6c  00028f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018f70  08018f70  00028f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08018f74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc8  20000060  08018fd4  00030060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  08018fd4  00030d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001913b  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003052  00000000  00000000  00049283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  0004c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b1  00000000  00000000  0004d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275bc  00000000  00000000  0004da71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110a0  00000000  00000000  0007502d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbf5f  00000000  00000000  000860cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a30  00000000  00000000  0018202c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00185a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000399c  00000000  00000000  00185ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00189450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005718 	.word	0x08005718

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08005718 	.word	0x08005718

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	arm_rfft_fast_init_f32(&fft_instance, FFT_LENGTH);
 80004ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ce:	4830      	ldr	r0, [pc, #192]	; (8000590 <main+0xcc>)
 80004d0:	f003 ffe2 	bl	8004498 <arm_rfft_fast_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fbf0 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f86a 	bl	80005b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004dc:	f000 f8b9 	bl	8000652 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f9ec 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f9ba 	bl	800085c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e8:	f000 f8de 	bl	80006a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004ec:	f000 f952 	bl	8000794 <MX_ADC2_Init>
 while (1)
 {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_Delay(100);
 80004f0:	2064      	movs	r0, #100	; 0x64
 80004f2:	f000 fc5d 	bl	8000db0 <HAL_Delay>
	 for(int i = 0; i < FFT_LENGTH; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	e020      	b.n	800053e <main+0x7a>
	  {
	 	input_fft[i] = arm_sin_f32(2 * PI * frequency * i / SAMPLING_RATE);
 80004fc:	4b25      	ldr	r3, [pc, #148]	; (8000594 <main+0xd0>)
 80004fe:	edd3 7a00 	vldr	s15, [r3]
 8000502:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000598 <main+0xd4>
 8000506:	ee27 7a87 	vmul.f32	s14, s15, s14
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	ee07 3a90 	vmov	s15, r3
 8000510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000518:	eddf 6a20 	vldr	s13, [pc, #128]	; 800059c <main+0xd8>
 800051c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000520:	eeb0 0a47 	vmov.f32	s0, s14
 8000524:	f004 fd9e 	bl	8005064 <arm_sin_f32>
 8000528:	eef0 7a40 	vmov.f32	s15, s0
 800052c:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <main+0xdc>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	edc3 7a00 	vstr	s15, [r3]
	 for(int i = 0; i < FFT_LENGTH; i++)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3301      	adds	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2bff      	cmp	r3, #255	; 0xff
 8000542:	dddb      	ble.n	80004fc <main+0x38>
	  }
	  arm_rfft_fast_f32(&fft_instance, input_fft, output_fft, 0);
 8000544:	2300      	movs	r3, #0
 8000546:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <main+0xe0>)
 8000548:	4915      	ldr	r1, [pc, #84]	; (80005a0 <main+0xdc>)
 800054a:	4811      	ldr	r0, [pc, #68]	; (8000590 <main+0xcc>)
 800054c:	f004 f888 	bl	8004660 <arm_rfft_fast_f32>
	  arm_cmplx_mag_f32(output_fft, output_fft_mag, FFT_LENGTH/2);
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	4915      	ldr	r1, [pc, #84]	; (80005a8 <main+0xe4>)
 8000554:	4813      	ldr	r0, [pc, #76]	; (80005a4 <main+0xe0>)
 8000556:	f004 fc61 	bl	8004e1c <arm_cmplx_mag_f32>
	  for(int i = 0; i < FFT_LENGTH / 2; i++ )
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	e012      	b.n	8000586 <main+0xc2>
	  {
	 	 peak_freq = ((i * SAMPLING_RATE) / FFT_LENGTH);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000566:	fb02 f303 	mul.w	r3, r2, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	da00      	bge.n	8000570 <main+0xac>
 800056e:	33ff      	adds	r3, #255	; 0xff
 8000570:	121b      	asrs	r3, r3, #8
 8000572:	ee07 3a90 	vmov	s15, r3
 8000576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <main+0xe8>)
 800057c:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0; i < FFT_LENGTH / 2; i++ )
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	3301      	adds	r3, #1
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b7f      	cmp	r3, #127	; 0x7f
 800058a:	dde9      	ble.n	8000560 <main+0x9c>
	 HAL_Delay(100);
 800058c:	e7b0      	b.n	80004f0 <main+0x2c>
 800058e:	bf00      	nop
 8000590:	20000bcc 	.word	0x20000bcc
 8000594:	20000000 	.word	0x20000000
 8000598:	40c90fdb 	.word	0x40c90fdb
 800059c:	467a0000 	.word	0x467a0000
 80005a0:	200001cc 	.word	0x200001cc
 80005a4:	200005cc 	.word	0x200005cc
 80005a8:	200009cc 	.word	0x200009cc
 80005ac:	20000be4 	.word	0x20000be4

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 f877 	bl	80056b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f001 fe69 	bl	80022ac <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 f9e4 	bl	80009ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005fe:	230a      	movs	r3, #10
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fea0 	bl	8002358 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800061e:	f000 f9c5 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fa68 	bl	8002b10 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000646:	f000 f9b1 	bl	80009ac <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3758      	adds	r7, #88	; 0x58
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b0a2      	sub	sp, #136	; 0x88
 8000656:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2288      	movs	r2, #136	; 0x88
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 f827 	bl	80056b2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000668:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800066a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800066e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800067c:	2307      	movs	r3, #7
 800067e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800068c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fc61 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800069c:	f000 f986 	bl	80009ac <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3788      	adds	r7, #136	; 0x88
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <MX_ADC1_Init+0xe0>)
 80006cc:	4a2f      	ldr	r2, [pc, #188]	; (800078c <MX_ADC1_Init+0xe4>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_ADC1_Init+0xe0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d6:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <MX_ADC1_Init+0xe0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006dc:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_ADC1_Init+0xe0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <MX_ADC1_Init+0xe0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <MX_ADC1_Init+0xe0>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_ADC1_Init+0xe0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <MX_ADC1_Init+0xe0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_ADC1_Init+0xe0>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_ADC1_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_ADC1_Init+0xe0>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_ADC1_Init+0xe0>)
 800071e:	2200      	movs	r2, #0
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_ADC1_Init+0xe0>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <MX_ADC1_Init+0xe0>)
 800072c:	f000 fcf0 	bl	8001110 <HAL_ADC_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000736:	f000 f939 	bl	80009ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4810      	ldr	r0, [pc, #64]	; (8000788 <MX_ADC1_Init+0xe0>)
 8000746:	f001 fa4b 	bl	8001be0 <HAL_ADCEx_MultiModeConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000750:	f000 f92c 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_ADC1_Init+0xe8>)
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000758:	2306      	movs	r3, #6
 800075a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000760:	237f      	movs	r3, #127	; 0x7f
 8000762:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000764:	2304      	movs	r3, #4
 8000766:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_ADC1_Init+0xe0>)
 8000772:	f000 fe1d 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800077c:	f000 f916 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000007c 	.word	0x2000007c
 800078c:	50040000 	.word	0x50040000
 8000790:	04300002 	.word	0x04300002

08000794 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007ac:	4a29      	ldr	r2, [pc, #164]	; (8000854 <MX_ADC2_Init+0xc0>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_ADC2_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_ADC2_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800080a:	4811      	ldr	r0, [pc, #68]	; (8000850 <MX_ADC2_Init+0xbc>)
 800080c:	f000 fc80 	bl	8001110 <HAL_ADC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000816:	f000 f8c9 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_ADC2_Init+0xc4>)
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081e:	2306      	movs	r3, #6
 8000820:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000826:	237f      	movs	r3, #127	; 0x7f
 8000828:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082a:	2304      	movs	r3, #4
 800082c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_ADC2_Init+0xbc>)
 8000838:	f000 fdba 	bl	80013b0 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000842:	f000 f8b3 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000e0 	.word	0x200000e0
 8000854:	50040100 	.word	0x50040100
 8000858:	08600004 	.word	0x08600004

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <MX_USART2_UART_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 80008a0:	f003 f816 	bl	80038d0 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f87f 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000144 	.word	0x20000144
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <MX_GPIO_Init+0xe8>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a33      	ldr	r2, [pc, #204]	; (80009a4 <MX_GPIO_Init+0xe8>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <MX_GPIO_Init+0xe8>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <MX_GPIO_Init+0xe8>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a2d      	ldr	r2, [pc, #180]	; (80009a4 <MX_GPIO_Init+0xe8>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <MX_GPIO_Init+0xe8>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <MX_GPIO_Init+0xe8>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a27      	ldr	r2, [pc, #156]	; (80009a4 <MX_GPIO_Init+0xe8>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <MX_GPIO_Init+0xe8>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <MX_GPIO_Init+0xe8>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <MX_GPIO_Init+0xe8>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_GPIO_Init+0xe8>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2120      	movs	r1, #32
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f001 fc91 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000944:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4814      	ldr	r0, [pc, #80]	; (80009a8 <MX_GPIO_Init+0xec>)
 8000956:	f001 fad9 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800095a:	2320      	movs	r3, #32
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f001 faca 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800098a:	2301      	movs	r3, #1
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000998:	f001 fab8 	bl	8001f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48000800 	.word	0x48000800

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6593      	str	r3, [r2, #88]	; 0x58
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <HAL_ADC_MspInit+0x11c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d145      	bne.n	8000aae <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000a22:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <HAL_ADC_MspInit+0x120>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a3d      	ldr	r2, [pc, #244]	; (8000b20 <HAL_ADC_MspInit+0x120>)
 8000a2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000a2c:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <HAL_ADC_MspInit+0x120>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10b      	bne.n	8000a4c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000a34:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	4a3a      	ldr	r2, [pc, #232]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a40:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4c:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	4a34      	ldr	r2, [pc, #208]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a58:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a64:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a80:	230b      	movs	r3, #11
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4826      	ldr	r0, [pc, #152]	; (8000b28 <HAL_ADC_MspInit+0x128>)
 8000a90:	f001 fa3c 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a98:	230b      	movs	r3, #11
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4821      	ldr	r0, [pc, #132]	; (8000b2c <HAL_ADC_MspInit+0x12c>)
 8000aa8:	f001 fa30 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000aac:	e031      	b.n	8000b12 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <HAL_ADC_MspInit+0x130>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d12c      	bne.n	8000b12 <HAL_ADC_MspInit+0x112>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_ADC_MspInit+0x120>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <HAL_ADC_MspInit+0x120>)
 8000ac0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_ADC_MspInit+0x120>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10b      	bne.n	8000ae2 <HAL_ADC_MspInit+0xe2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000ad0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_ADC_MspInit+0x124>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000afa:	2303      	movs	r3, #3
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000afe:	230b      	movs	r3, #11
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <HAL_ADC_MspInit+0x128>)
 8000b0e:	f001 f9fd 	bl	8001f0c <HAL_GPIO_Init>
}
 8000b12:	bf00      	nop
 8000b14:	3730      	adds	r7, #48	; 0x30
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	50040000 	.word	0x50040000
 8000b20:	20000be8 	.word	0x20000be8
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	50040100 	.word	0x50040100

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0ac      	sub	sp, #176	; 0xb0
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2288      	movs	r2, #136	; 0x88
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fdac 	bl	80056b2 <memset>
  if(huart->Instance==USART2)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <HAL_UART_MspInit+0xb0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d13b      	bne.n	8000bdc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 f9f1 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b7c:	f7ff ff16 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd8:	f001 f998 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	37b0      	adds	r7, #176	; 0xb0
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40021000 	.word	0x40021000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f89a 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c68:	f7ff ffea 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c92:	f004 fd1d 	bl	80056d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c96:	f7ff fc15 	bl	80004c4 <main>

08000c9a <LoopForever>:

LoopForever:
    b LoopForever
 8000c9a:	e7fe      	b.n	8000c9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ca8:	08018f74 	.word	0x08018f74
  ldr r2, =_sbss
 8000cac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cb0:	20000d28 	.word	0x20000d28

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_Init+0x3c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <HAL_Init+0x3c>)
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ccc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f001 f8e8 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 f80f 	bl	8000cf8 <HAL_InitTick>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	e001      	b.n	8000cea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce6:	f7ff fe67 	bl	80009b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40022000 	.word	0x40022000

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_InitTick+0x6c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d023      	beq.n	8000d54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_InitTick+0x70>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_InitTick+0x6c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 f8e5 	bl	8001ef2 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10f      	bne.n	8000d4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d809      	bhi.n	8000d48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f001 f8bd 	bl	8001eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_InitTick+0x74>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e007      	b.n	8000d58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e004      	b.n	8000d58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e001      	b.n	8000d58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	20000004 	.word	0x20000004
 8000d6c:	20000008 	.word	0x20000008

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	20000bec 	.word	0x20000bec

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000bec 	.word	0x20000bec

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000000c 	.word	0x2000000c

08000df8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	609a      	str	r2, [r3, #8]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	609a      	str	r2, [r3, #8]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3360      	adds	r3, #96	; 0x60
 8000e72:	461a      	mov	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <LL_ADC_SetOffset+0x44>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	03fff000 	.word	0x03fff000

08000ea8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3360      	adds	r3, #96	; 0x60
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3360      	adds	r3, #96	; 0x60
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b087      	sub	sp, #28
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3330      	adds	r3, #48	; 0x30
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	4413      	add	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	211f      	movs	r1, #31
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	0e9b      	lsrs	r3, r3, #26
 8000f42:	f003 011f 	and.w	r1, r3, #31
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	f003 031f 	and.w	r3, r3, #31
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	431a      	orrs	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b087      	sub	sp, #28
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3314      	adds	r3, #20
 8000f72:	461a      	mov	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	0e5b      	lsrs	r3, r3, #25
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	4413      	add	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	0d1b      	lsrs	r3, r3, #20
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	2107      	movs	r1, #7
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	401a      	ands	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	0d1b      	lsrs	r3, r3, #20
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0318 	and.w	r3, r3, #24
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fdc:	40d9      	lsrs	r1, r3
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	0007ffff 	.word	0x0007ffff

08001000 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6093      	str	r3, [r2, #8]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001038:	d101      	bne.n	800103e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800105c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001060:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001088:	d101      	bne.n	800108e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <LL_ADC_IsEnabled+0x18>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <LL_ADC_IsEnabled+0x1a>
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d101      	bne.n	80010da <LL_ADC_REG_IsConversionOngoing+0x18>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d101      	bne.n	8001100 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e130      	b.n	800138c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001134:	2b00      	cmp	r3, #0
 8001136:	d109      	bne.n	800114c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff fc61 	bl	8000a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff67 	bl	8001024 <LL_ADC_IsDeepPowerDownEnabled>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d004      	beq.n	8001166 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff4d 	bl	8001000 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff82 	bl	8001074 <LL_ADC_IsInternalRegulatorEnabled>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d115      	bne.n	80011a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff66 	bl	800104c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001180:	4b84      	ldr	r3, [pc, #528]	; (8001394 <HAL_ADC_Init+0x284>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	099b      	lsrs	r3, r3, #6
 8001186:	4a84      	ldr	r2, [pc, #528]	; (8001398 <HAL_ADC_Init+0x288>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	099b      	lsrs	r3, r3, #6
 800118e:	3301      	adds	r3, #1
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001194:	e002      	b.n	800119c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3b01      	subs	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f9      	bne.n	8001196 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff64 	bl	8001074 <LL_ADC_IsInternalRegulatorEnabled>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10d      	bne.n	80011ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b6:	f043 0210 	orr.w	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff75 	bl	80010c2 <LL_ADC_REG_IsConversionOngoing>
 80011d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 80c9 	bne.w	800137a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 80c5 	bne.w	800137a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011f8:	f043 0202 	orr.w	r2, r3, #2
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff49 	bl	800109c <LL_ADC_IsEnabled>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d115      	bne.n	800123c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001210:	4862      	ldr	r0, [pc, #392]	; (800139c <HAL_ADC_Init+0x28c>)
 8001212:	f7ff ff43 	bl	800109c <LL_ADC_IsEnabled>
 8001216:	4604      	mov	r4, r0
 8001218:	4861      	ldr	r0, [pc, #388]	; (80013a0 <HAL_ADC_Init+0x290>)
 800121a:	f7ff ff3f 	bl	800109c <LL_ADC_IsEnabled>
 800121e:	4603      	mov	r3, r0
 8001220:	431c      	orrs	r4, r3
 8001222:	4860      	ldr	r0, [pc, #384]	; (80013a4 <HAL_ADC_Init+0x294>)
 8001224:	f7ff ff3a 	bl	800109c <LL_ADC_IsEnabled>
 8001228:	4603      	mov	r3, r0
 800122a:	4323      	orrs	r3, r4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d105      	bne.n	800123c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4619      	mov	r1, r3
 8001236:	485c      	ldr	r0, [pc, #368]	; (80013a8 <HAL_ADC_Init+0x298>)
 8001238:	f7ff fdde 	bl	8000df8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7e5b      	ldrb	r3, [r3, #25]
 8001240:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001246:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800124c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001252:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d106      	bne.n	8001278 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	3b01      	subs	r3, #1
 8001270:	045b      	lsls	r3, r3, #17
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	2b00      	cmp	r3, #0
 800127e:	d009      	beq.n	8001294 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_ADC_Init+0x29c>)
 800129c:	4013      	ands	r3, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	69b9      	ldr	r1, [r7, #24]
 80012a4:	430b      	orrs	r3, r1
 80012a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff1b 	bl	80010e8 <LL_ADC_INJ_IsConversionOngoing>
 80012b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13d      	bne.n	8001336 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d13a      	bne.n	8001336 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012c4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012cc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012dc:	f023 0302 	bic.w	r3, r3, #2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	430b      	orrs	r3, r1
 80012e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d118      	bne.n	8001326 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012fe:	f023 0304 	bic.w	r3, r3, #4
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800130a:	4311      	orrs	r1, r2
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001310:	4311      	orrs	r1, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001316:	430a      	orrs	r2, r1
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	e007      	b.n	8001336 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d10c      	bne.n	8001358 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f023 010f 	bic.w	r1, r3, #15
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	1e5a      	subs	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
 8001356:	e007      	b.n	8001368 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 020f 	bic.w	r2, r2, #15
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136c:	f023 0303 	bic.w	r3, r3, #3
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	655a      	str	r2, [r3, #84]	; 0x54
 8001378:	e007      	b.n	800138a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f043 0210 	orr.w	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800138a:	7ffb      	ldrb	r3, [r7, #31]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3724      	adds	r7, #36	; 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	20000004 	.word	0x20000004
 8001398:	053e2d63 	.word	0x053e2d63
 800139c:	50040000 	.word	0x50040000
 80013a0:	50040100 	.word	0x50040100
 80013a4:	50040200 	.word	0x50040200
 80013a8:	50040300 	.word	0x50040300
 80013ac:	fff0c007 	.word	0xfff0c007

080013b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0b6      	sub	sp, #216	; 0xd8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_ConfigChannel+0x22>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e3c9      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x7b6>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fe6f 	bl	80010c2 <LL_ADC_REG_IsConversionOngoing>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 83aa 	bne.w	8001b40 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b05      	cmp	r3, #5
 80013fa:	d824      	bhi.n	8001446 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	3b02      	subs	r3, #2
 8001402:	2b03      	cmp	r3, #3
 8001404:	d81b      	bhi.n	800143e <HAL_ADC_ConfigChannel+0x8e>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <HAL_ADC_ConfigChannel+0x5c>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001425 	.word	0x08001425
 8001414:	0800142d 	.word	0x0800142d
 8001418:	08001435 	.word	0x08001435
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800141c:	230c      	movs	r3, #12
 800141e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001422:	e010      	b.n	8001446 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001424:	2312      	movs	r3, #18
 8001426:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800142a:	e00c      	b.n	8001446 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800142c:	2318      	movs	r3, #24
 800142e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001432:	e008      	b.n	8001446 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800143c:	e003      	b.n	8001446 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800143e:	2306      	movs	r3, #6
 8001440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001444:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001454:	f7ff fd59 	bl	8000f0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fe30 	bl	80010c2 <LL_ADC_REG_IsConversionOngoing>
 8001462:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe3c 	bl	80010e8 <LL_ADC_INJ_IsConversionOngoing>
 8001470:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001474:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001478:	2b00      	cmp	r3, #0
 800147a:	f040 81a4 	bne.w	80017c6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800147e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 819f 	bne.w	80017c6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6819      	ldr	r1, [r3, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	461a      	mov	r2, r3
 8001496:	f7ff fd64 	bl	8000f62 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d00a      	beq.n	80014d2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6919      	ldr	r1, [r3, #16]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014cc:	f7ff fcc8 	bl	8000e60 <LL_ADC_SetOffset>
 80014d0:	e179      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fce5 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10a      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x14e>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fcda 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	0e9b      	lsrs	r3, r3, #26
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	e01e      	b.n	800153c <HAL_ADC_ConfigChannel+0x18c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fccf 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001514:	fa93 f3a3 	rbit	r3, r3
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800151c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800152c:	2320      	movs	r3, #32
 800152e:	e004      	b.n	800153a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1a4>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0e9b      	lsrs	r3, r3, #26
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	e018      	b.n	8001586 <HAL_ADC_ConfigChannel+0x1d6>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001560:	fa93 f3a3 	rbit	r3, r3
 8001564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800156c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001578:	2320      	movs	r3, #32
 800157a:	e004      	b.n	8001586 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800157c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001586:	429a      	cmp	r2, r3
 8001588:	d106      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fc9e 	bl	8000ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2101      	movs	r1, #1
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fc82 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10a      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x214>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fc77 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	0e9b      	lsrs	r3, r3, #26
 80015be:	f003 021f 	and.w	r2, r3, #31
 80015c2:	e01e      	b.n	8001602 <HAL_ADC_ConfigChannel+0x252>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2101      	movs	r1, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fc6c 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80015e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80015ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80015f2:	2320      	movs	r3, #32
 80015f4:	e004      	b.n	8001600 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80015f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <HAL_ADC_ConfigChannel+0x26a>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0e9b      	lsrs	r3, r3, #26
 8001614:	f003 031f 	and.w	r3, r3, #31
 8001618:	e018      	b.n	800164c <HAL_ADC_ConfigChannel+0x29c>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800162e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001636:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800163e:	2320      	movs	r3, #32
 8001640:	e004      	b.n	800164c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001642:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800164c:	429a      	cmp	r2, r3
 800164e:	d106      	bne.n	800165e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2200      	movs	r2, #0
 8001656:	2101      	movs	r1, #1
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fc3b 	bl	8000ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2102      	movs	r1, #2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc1f 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <HAL_ADC_ConfigChannel+0x2da>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2102      	movs	r1, #2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fc14 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	0e9b      	lsrs	r3, r3, #26
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	e01e      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x318>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2102      	movs	r1, #2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc09 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80016a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80016b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80016b8:	2320      	movs	r3, #32
 80016ba:	e004      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80016bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x330>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0e9b      	lsrs	r3, r3, #26
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	e014      	b.n	800170a <HAL_ADC_ConfigChannel+0x35a>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80016ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80016f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80016fc:	2320      	movs	r3, #32
 80016fe:	e004      	b.n	800170a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800170a:	429a      	cmp	r2, r3
 800170c:	d106      	bne.n	800171c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	2102      	movs	r1, #2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fbdc 	bl	8000ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2103      	movs	r1, #3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fbc0 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10a      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x398>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2103      	movs	r1, #3
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fbb5 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	0e9b      	lsrs	r3, r3, #26
 8001742:	f003 021f 	and.w	r2, r3, #31
 8001746:	e017      	b.n	8001778 <HAL_ADC_ConfigChannel+0x3c8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2103      	movs	r1, #3
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fbaa 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001762:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800176a:	2320      	movs	r3, #32
 800176c:	e003      	b.n	8001776 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800176e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x3e0>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0e9b      	lsrs	r3, r3, #26
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	e011      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x404>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800179e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017a0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80017a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80017a8:	2320      	movs	r3, #32
 80017aa:	e003      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80017ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d106      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	2103      	movs	r1, #3
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fb87 	bl	8000ed4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fc66 	bl	800109c <LL_ADC_IsEnabled>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 8140 	bne.w	8001a58 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	461a      	mov	r2, r3
 80017e6:	f7ff fbe7 	bl	8000fb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4a8f      	ldr	r2, [pc, #572]	; (8001a2c <HAL_ADC_ConfigChannel+0x67c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	f040 8131 	bne.w	8001a58 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10b      	bne.n	800181e <HAL_ADC_ConfigChannel+0x46e>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0e9b      	lsrs	r3, r3, #26
 800180c:	3301      	adds	r3, #1
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	2b09      	cmp	r3, #9
 8001814:	bf94      	ite	ls
 8001816:	2301      	movls	r3, #1
 8001818:	2300      	movhi	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	e019      	b.n	8001852 <HAL_ADC_ConfigChannel+0x4a2>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800182c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001836:	2320      	movs	r3, #32
 8001838:	e003      	b.n	8001842 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800183a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	2b09      	cmp	r3, #9
 800184a:	bf94      	ite	ls
 800184c:	2301      	movls	r3, #1
 800184e:	2300      	movhi	r3, #0
 8001850:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001852:	2b00      	cmp	r3, #0
 8001854:	d079      	beq.n	800194a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x4c2>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0e9b      	lsrs	r3, r3, #26
 8001868:	3301      	adds	r3, #1
 800186a:	069b      	lsls	r3, r3, #26
 800186c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001870:	e015      	b.n	800189e <HAL_ADC_ConfigChannel+0x4ee>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001882:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800188a:	2320      	movs	r3, #32
 800188c:	e003      	b.n	8001896 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800188e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	3301      	adds	r3, #1
 8001898:	069b      	lsls	r3, r3, #26
 800189a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_ADC_ConfigChannel+0x50e>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0e9b      	lsrs	r3, r3, #26
 80018b0:	3301      	adds	r3, #1
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	e017      	b.n	80018ee <HAL_ADC_ConfigChannel+0x53e>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80018cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80018d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e003      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80018da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	ea42 0103 	orr.w	r1, r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x564>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	3301      	adds	r3, #1
 8001906:	f003 021f 	and.w	r2, r3, #31
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	051b      	lsls	r3, r3, #20
 8001912:	e018      	b.n	8001946 <HAL_ADC_ConfigChannel+0x596>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	e003      	b.n	8001938 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	f003 021f 	and.w	r2, r3, #31
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001946:	430b      	orrs	r3, r1
 8001948:	e081      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x5b6>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0e9b      	lsrs	r3, r3, #26
 800195c:	3301      	adds	r3, #1
 800195e:	069b      	lsls	r3, r3, #26
 8001960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001964:	e015      	b.n	8001992 <HAL_ADC_ConfigChannel+0x5e2>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800197e:	2320      	movs	r3, #32
 8001980:	e003      	b.n	800198a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	3301      	adds	r3, #1
 800198c:	069b      	lsls	r3, r3, #26
 800198e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x602>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	0e9b      	lsrs	r3, r3, #26
 80019a4:	3301      	adds	r3, #1
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	e017      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x632>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	61bb      	str	r3, [r7, #24]
  return result;
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80019ca:	2320      	movs	r3, #32
 80019cc:	e003      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2101      	movs	r1, #1
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	ea42 0103 	orr.w	r1, r2, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10d      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x65e>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0e9b      	lsrs	r3, r3, #26
 80019f8:	3301      	adds	r3, #1
 80019fa:	f003 021f 	and.w	r2, r3, #31
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	3b1e      	subs	r3, #30
 8001a06:	051b      	lsls	r3, r3, #20
 8001a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	e01e      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x69c>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	60fb      	str	r3, [r7, #12]
  return result;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d104      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001a26:	2320      	movs	r3, #32
 8001a28:	e006      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x688>
 8001a2a:	bf00      	nop
 8001a2c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f003 021f 	and.w	r2, r3, #31
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	3b1e      	subs	r3, #30
 8001a46:	051b      	lsls	r3, r3, #20
 8001a48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a4c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff fa85 	bl	8000f62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d07a      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a64:	4843      	ldr	r0, [pc, #268]	; (8001b74 <HAL_ADC_ConfigChannel+0x7c4>)
 8001a66:	f7ff f9ed 	bl	8000e44 <LL_ADC_GetCommonPathInternalCh>
 8001a6a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a41      	ldr	r2, [pc, #260]	; (8001b78 <HAL_ADC_ConfigChannel+0x7c8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d12c      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d126      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a3c      	ldr	r2, [pc, #240]	; (8001b7c <HAL_ADC_ConfigChannel+0x7cc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_ADC_ConfigChannel+0x6e8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a3b      	ldr	r2, [pc, #236]	; (8001b80 <HAL_ADC_ConfigChannel+0x7d0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d15d      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4834      	ldr	r0, [pc, #208]	; (8001b74 <HAL_ADC_ConfigChannel+0x7c4>)
 8001aa4:	f7ff f9bb 	bl	8000e1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_ADC_ConfigChannel+0x7d4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	4a36      	ldr	r2, [pc, #216]	; (8001b88 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ac2:	e002      	b.n	8001aca <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f9      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ad0:	e040      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <HAL_ADC_ConfigChannel+0x7dc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d118      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001adc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d112      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <HAL_ADC_ConfigChannel+0x7cc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x74c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <HAL_ADC_ConfigChannel+0x7d0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d12d      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001afc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b04:	4619      	mov	r1, r3
 8001b06:	481b      	ldr	r0, [pc, #108]	; (8001b74 <HAL_ADC_ConfigChannel+0x7c4>)
 8001b08:	f7ff f989 	bl	8000e1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b0c:	e024      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_ADC_ConfigChannel+0x7e0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d120      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d11a      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_ADC_ConfigChannel+0x7cc>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d115      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b36:	4619      	mov	r1, r3
 8001b38:	480e      	ldr	r0, [pc, #56]	; (8001b74 <HAL_ADC_ConfigChannel+0x7c4>)
 8001b3a:	f7ff f970 	bl	8000e1e <LL_ADC_SetCommonPathInternalCh>
 8001b3e:	e00c      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	f043 0220 	orr.w	r2, r3, #32
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001b52:	e002      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b62:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	37d8      	adds	r7, #216	; 0xd8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	80080000 	.word	0x80080000
 8001b74:	50040300 	.word	0x50040300
 8001b78:	c7520000 	.word	0xc7520000
 8001b7c:	50040000 	.word	0x50040000
 8001b80:	50040200 	.word	0x50040200
 8001b84:	20000004 	.word	0x20000004
 8001b88:	053e2d63 	.word	0x053e2d63
 8001b8c:	cb840000 	.word	0xcb840000
 8001b90:	80000001 	.word	0x80000001

08001b94 <LL_ADC_IsEnabled>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <LL_ADC_IsEnabled+0x18>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <LL_ADC_IsEnabled+0x1a>
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_ADC_REG_IsConversionOngoing>:
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b09f      	sub	sp, #124	; 0x7c
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e093      	b.n	8001d26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001c06:	2300      	movs	r3, #0
 8001c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a47      	ldr	r2, [pc, #284]	; (8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d102      	bne.n	8001c1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c18:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	e001      	b.n	8001c22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10b      	bne.n	8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e072      	b.n	8001d26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ffb9 	bl	8001bba <LL_ADC_REG_IsConversionOngoing>
 8001c48:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ffb3 	bl	8001bba <LL_ADC_REG_IsConversionOngoing>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d154      	bne.n	8001d04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d151      	bne.n	8001d04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001c62:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d02c      	beq.n	8001cc6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6859      	ldr	r1, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c7e:	035b      	lsls	r3, r3, #13
 8001c80:	430b      	orrs	r3, r1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c88:	4829      	ldr	r0, [pc, #164]	; (8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c8a:	f7ff ff83 	bl	8001b94 <LL_ADC_IsEnabled>
 8001c8e:	4604      	mov	r4, r0
 8001c90:	4828      	ldr	r0, [pc, #160]	; (8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c92:	f7ff ff7f 	bl	8001b94 <LL_ADC_IsEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	431c      	orrs	r4, r3
 8001c9a:	4828      	ldr	r0, [pc, #160]	; (8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001c9c:	f7ff ff7a 	bl	8001b94 <LL_ADC_IsEnabled>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4323      	orrs	r3, r4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d137      	bne.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cb0:	f023 030f 	bic.w	r3, r3, #15
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	6811      	ldr	r1, [r2, #0]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	6892      	ldr	r2, [r2, #8]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001cc4:	e028      	b.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cd2:	4817      	ldr	r0, [pc, #92]	; (8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001cd4:	f7ff ff5e 	bl	8001b94 <LL_ADC_IsEnabled>
 8001cd8:	4604      	mov	r4, r0
 8001cda:	4816      	ldr	r0, [pc, #88]	; (8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001cdc:	f7ff ff5a 	bl	8001b94 <LL_ADC_IsEnabled>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	431c      	orrs	r4, r3
 8001ce4:	4815      	ldr	r0, [pc, #84]	; (8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ce6:	f7ff ff55 	bl	8001b94 <LL_ADC_IsEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4323      	orrs	r3, r4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d112      	bne.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cfa:	f023 030f 	bic.w	r3, r3, #15
 8001cfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d02:	e009      	b.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	f043 0220 	orr.w	r2, r3, #32
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d16:	e000      	b.n	8001d1a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	377c      	adds	r7, #124	; 0x7c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd90      	pop	{r4, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	50040000 	.word	0x50040000
 8001d34:	50040100 	.word	0x50040100
 8001d38:	50040300 	.word	0x50040300
 8001d3c:	50040200 	.word	0x50040200

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff47 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff5c 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ffb0 	bl	8001e60 <SysTick_Config>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e17f      	b.n	800221c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8171 	beq.w	8002216 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d005      	beq.n	8001f4c <HAL_GPIO_Init+0x40>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d130      	bne.n	8001fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f82:	2201      	movs	r2, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 0201 	and.w	r2, r3, #1
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d118      	bne.n	8001fec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	f003 0201 	and.w	r2, r3, #1
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d017      	beq.n	8002028 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d123      	bne.n	800207c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	6939      	ldr	r1, [r7, #16]
 8002078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0203 	and.w	r2, r3, #3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80ac 	beq.w	8002216 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_GPIO_Init+0x330>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	4a5e      	ldr	r2, [pc, #376]	; (800223c <HAL_GPIO_Init+0x330>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_GPIO_Init+0x330>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d6:	4a5a      	ldr	r2, [pc, #360]	; (8002240 <HAL_GPIO_Init+0x334>)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002100:	d025      	beq.n	800214e <HAL_GPIO_Init+0x242>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4f      	ldr	r2, [pc, #316]	; (8002244 <HAL_GPIO_Init+0x338>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_GPIO_Init+0x23e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <HAL_GPIO_Init+0x33c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x23a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4d      	ldr	r2, [pc, #308]	; (800224c <HAL_GPIO_Init+0x340>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x236>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4c      	ldr	r2, [pc, #304]	; (8002250 <HAL_GPIO_Init+0x344>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x232>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4b      	ldr	r2, [pc, #300]	; (8002254 <HAL_GPIO_Init+0x348>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x22e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4a      	ldr	r2, [pc, #296]	; (8002258 <HAL_GPIO_Init+0x34c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x22a>
 8002132:	2306      	movs	r3, #6
 8002134:	e00c      	b.n	8002150 <HAL_GPIO_Init+0x244>
 8002136:	2307      	movs	r3, #7
 8002138:	e00a      	b.n	8002150 <HAL_GPIO_Init+0x244>
 800213a:	2305      	movs	r3, #5
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x244>
 800213e:	2304      	movs	r3, #4
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x244>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x244>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x244>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x244>
 800214e:	2300      	movs	r3, #0
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002160:	4937      	ldr	r1, [pc, #220]	; (8002240 <HAL_GPIO_Init+0x334>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_GPIO_Init+0x350>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002192:	4a32      	ldr	r2, [pc, #200]	; (800225c <HAL_GPIO_Init+0x350>)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_GPIO_Init+0x350>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_GPIO_Init+0x350>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021c2:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_GPIO_Init+0x350>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_GPIO_Init+0x350>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_GPIO_Init+0x350>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <HAL_GPIO_Init+0x350>)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f ae78 	bne.w	8001f1c <HAL_GPIO_Init+0x10>
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40010000 	.word	0x40010000
 8002244:	48000400 	.word	0x48000400
 8002248:	48000800 	.word	0x48000800
 800224c:	48000c00 	.word	0x48000c00
 8002250:	48001000 	.word	0x48001000
 8002254:	48001400 	.word	0x48001400
 8002258:	48001800 	.word	0x48001800
 800225c:	40010400 	.word	0x40010400

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800227c:	e002      	b.n	8002284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007000 	.word	0x40007000

080022ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ba:	d130      	bne.n	800231e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c8:	d038      	beq.n	800233c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2232      	movs	r2, #50	; 0x32
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9b      	lsrs	r3, r3, #18
 80022ec:	3301      	adds	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f0:	e002      	b.n	80022f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002304:	d102      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f2      	bne.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002318:	d110      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e00f      	b.n	800233e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232a:	d007      	beq.n	800233c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002334:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40007000 	.word	0x40007000
 8002350:	20000004 	.word	0x20000004
 8002354:	431bde83 	.word	0x431bde83

08002358 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e3ca      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4b97      	ldr	r3, [pc, #604]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002374:	4b94      	ldr	r3, [pc, #592]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80e4 	beq.w	8002554 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_RCC_OscConfig+0x4a>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	f040 808b 	bne.w	80024b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b01      	cmp	r3, #1
 800239e:	f040 8087 	bne.w	80024b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a2:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e3a2      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	4b82      	ldr	r3, [pc, #520]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_RCC_OscConfig+0x7c>
 80023ca:	4b7f      	ldr	r3, [pc, #508]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d2:	e005      	b.n	80023e0 <HAL_RCC_OscConfig+0x88>
 80023d4:	4b7c      	ldr	r3, [pc, #496]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d223      	bcs.n	800242c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fd55 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e383      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f8:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a72      	ldr	r2, [pc, #456]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b70      	ldr	r3, [pc, #448]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	496d      	ldr	r1, [pc, #436]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002416:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	4968      	ldr	r1, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
 800242a:	e025      	b.n	8002478 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242c:	4b66      	ldr	r3, [pc, #408]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a65      	ldr	r2, [pc, #404]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4960      	ldr	r1, [pc, #384]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244a:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	495b      	ldr	r1, [pc, #364]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fd15 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e343      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002478:	f000 fc4a 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	4950      	ldr	r1, [pc, #320]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	4a4e      	ldr	r2, [pc, #312]	; (80025d0 <HAL_RCC_OscConfig+0x278>)
 8002496:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002498:	4b4e      	ldr	r3, [pc, #312]	; (80025d4 <HAL_RCC_OscConfig+0x27c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc2b 	bl	8000cf8 <HAL_InitTick>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d052      	beq.n	8002552 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	e327      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d032      	beq.n	800251e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024b8:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a42      	ldr	r2, [pc, #264]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fc68 	bl	8000d98 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024cc:	f7fe fc64 	bl	8000d98 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e310      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024de:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ea:	4b37      	ldr	r3, [pc, #220]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a36      	ldr	r2, [pc, #216]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4931      	ldr	r1, [pc, #196]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002508:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	492c      	ldr	r1, [pc, #176]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
 800251c:	e01a      	b.n	8002554 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252a:	f7fe fc35 	bl	8000d98 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002532:	f7fe fc31 	bl	8000d98 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e2dd      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x1da>
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002552:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d074      	beq.n	800264a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b08      	cmp	r3, #8
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x21a>
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d10e      	bne.n	800258a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d10b      	bne.n	800258a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d064      	beq.n	8002648 <HAL_RCC_OscConfig+0x2f0>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d160      	bne.n	8002648 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e2ba      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x24a>
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e026      	b.n	80025f0 <HAL_RCC_OscConfig+0x298>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025aa:	d115      	bne.n	80025d8 <HAL_RCC_OscConfig+0x280>
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a02      	ldr	r2, [pc, #8]	; (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x298>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08005730 	.word	0x08005730
 80025d0:	20000004 	.word	0x20000004
 80025d4:	20000008 	.word	0x20000008
 80025d8:	4ba0      	ldr	r3, [pc, #640]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a9f      	ldr	r2, [pc, #636]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b9d      	ldr	r3, [pc, #628]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a9c      	ldr	r2, [pc, #624]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80025ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fbce 	bl	8000d98 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fbca 	bl	8000d98 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e276      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	4b92      	ldr	r3, [pc, #584]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x2a8>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fbba 	bl	8000d98 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fbb6 	bl	8000d98 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e262      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x504>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x2d0>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d060      	beq.n	8002718 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x310>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d119      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d116      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	4b7c      	ldr	r3, [pc, #496]	; (800285c <HAL_RCC_OscConfig+0x504>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x328>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e23f      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	4973      	ldr	r1, [pc, #460]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002694:	e040      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d023      	beq.n	80026e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269e:	4b6f      	ldr	r3, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6e      	ldr	r2, [pc, #440]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe fb75 	bl	8000d98 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7fe fb71 	bl	8000d98 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e21d      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c4:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	495f      	ldr	r1, [pc, #380]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
 80026e4:	e018      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	4b5d      	ldr	r3, [pc, #372]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5c      	ldr	r2, [pc, #368]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80026ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fb51 	bl	8000d98 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe fb4d 	bl	8000d98 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e1f9      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270c:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d03c      	beq.n	800279e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01c      	beq.n	8002766 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272c:	4b4b      	ldr	r3, [pc, #300]	; (800285c <HAL_RCC_OscConfig+0x504>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002732:	4a4a      	ldr	r2, [pc, #296]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fb2c 	bl	8000d98 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7fe fb28 	bl	8000d98 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1d4      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <HAL_RCC_OscConfig+0x3ec>
 8002764:	e01b      	b.n	800279e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276c:	4a3b      	ldr	r2, [pc, #236]	; (800285c <HAL_RCC_OscConfig+0x504>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7fe fb0f 	bl	8000d98 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277e:	f7fe fb0b 	bl	8000d98 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1b7      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002790:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ef      	bne.n	800277e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80a6 	beq.w	80028f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027b0:	4b2a      	ldr	r3, [pc, #168]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	; 0x58
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_OscConfig+0x504>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d4:	2301      	movs	r3, #1
 80027d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_RCC_OscConfig+0x508>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d118      	bne.n	8002816 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_RCC_OscConfig+0x508>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_RCC_OscConfig+0x508>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f0:	f7fe fad2 	bl	8000d98 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fe face 	bl	8000d98 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e17a      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0x508>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <HAL_RCC_OscConfig+0x4d8>
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	4a0d      	ldr	r2, [pc, #52]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800282e:	e029      	b.n	8002884 <HAL_RCC_OscConfig+0x52c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d115      	bne.n	8002864 <HAL_RCC_OscConfig+0x50c>
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_RCC_OscConfig+0x504>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <HAL_RCC_OscConfig+0x504>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	4a03      	ldr	r2, [pc, #12]	; (800285c <HAL_RCC_OscConfig+0x504>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002858:	e014      	b.n	8002884 <HAL_RCC_OscConfig+0x52c>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	40007000 	.word	0x40007000
 8002864:	4b9c      	ldr	r3, [pc, #624]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	4a9b      	ldr	r2, [pc, #620]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002874:	4b98      	ldr	r3, [pc, #608]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	4a97      	ldr	r2, [pc, #604]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d016      	beq.n	80028ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe fa84 	bl	8000d98 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7fe fa80 	bl	8000d98 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e12a      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	4b8b      	ldr	r3, [pc, #556]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ed      	beq.n	8002894 <HAL_RCC_OscConfig+0x53c>
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe fa6d 	bl	8000d98 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe fa69 	bl	8000d98 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e113      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	4b7f      	ldr	r3, [pc, #508]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ed      	bne.n	80028c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	7ffb      	ldrb	r3, [r7, #31]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b7a      	ldr	r3, [pc, #488]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	4a79      	ldr	r2, [pc, #484]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80fe 	beq.w	8002afe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	2b02      	cmp	r3, #2
 8002908:	f040 80d0 	bne.w	8002aac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800290c:	4b72      	ldr	r3, [pc, #456]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	429a      	cmp	r2, r3
 800291e:	d130      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	3b01      	subs	r3, #1
 800292c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d127      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d11f      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800294c:	2a07      	cmp	r2, #7
 800294e:	bf14      	ite	ne
 8002950:	2201      	movne	r2, #1
 8002952:	2200      	moveq	r2, #0
 8002954:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002956:	4293      	cmp	r3, r2
 8002958:	d113      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	3b01      	subs	r3, #1
 8002968:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d109      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	3b01      	subs	r3, #1
 800297c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d06e      	beq.n	8002a60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b0c      	cmp	r3, #12
 8002986:	d069      	beq.n	8002a5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002988:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002994:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0ad      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029a4:	4b4c      	ldr	r3, [pc, #304]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a4b      	ldr	r2, [pc, #300]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80029aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029b0:	f7fe f9f2 	bl	8000d98 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe f9ee 	bl	8000d98 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e09a      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d6:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4b40      	ldr	r3, [pc, #256]	; (8002adc <HAL_RCC_OscConfig+0x784>)
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029e6:	3a01      	subs	r2, #1
 80029e8:	0112      	lsls	r2, r2, #4
 80029ea:	4311      	orrs	r1, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029f0:	0212      	lsls	r2, r2, #8
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029f8:	0852      	lsrs	r2, r2, #1
 80029fa:	3a01      	subs	r2, #1
 80029fc:	0552      	lsls	r2, r2, #21
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a04:	0852      	lsrs	r2, r2, #1
 8002a06:	3a01      	subs	r2, #1
 8002a08:	0652      	lsls	r2, r2, #25
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a10:	0912      	lsrs	r2, r2, #4
 8002a12:	0452      	lsls	r2, r2, #17
 8002a14:	430a      	orrs	r2, r1
 8002a16:	4930      	ldr	r1, [pc, #192]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a34:	f7fe f9b0 	bl	8000d98 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe f9ac 	bl	8000d98 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e058      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a5a:	e050      	b.n	8002afe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e04f      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d148      	bne.n	8002afe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a84:	f7fe f988 	bl	8000d98 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe f984 	bl	8000d98 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e030      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x734>
 8002aaa:	e028      	b.n	8002afe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d023      	beq.n	8002afa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe f96b 	bl	8000d98 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac4:	e00c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe f967 	bl	8000d98 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d905      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e013      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_OscConfig+0x7b0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ec      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_OscConfig+0x7b0>)
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	4905      	ldr	r1, [pc, #20]	; (8002b08 <HAL_RCC_OscConfig+0x7b0>)
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_OscConfig+0x7b4>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	60cb      	str	r3, [r1, #12]
 8002af8:	e001      	b.n	8002afe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	feeefffc 	.word	0xfeeefffc

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0e7      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b75      	ldr	r3, [pc, #468]	; (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d910      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	4970      	ldr	r1, [pc, #448]	; (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b6e      	ldr	r3, [pc, #440]	; (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0cf      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d010      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d908      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4960      	ldr	r1, [pc, #384]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04c      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d121      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0a6      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bae:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d115      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e09a      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc6:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e08e      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e086      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4943      	ldr	r1, [pc, #268]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf8:	f7fe f8ce 	bl	8000d98 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe f8ca 	bl	8000d98 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e06e      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d208      	bcs.n	8002c56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	492b      	ldr	r1, [pc, #172]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d210      	bcs.n	8002c86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 0207 	bic.w	r2, r3, #7
 8002c6c:	4923      	ldr	r1, [pc, #140]	; (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e036      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4918      	ldr	r1, [pc, #96]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4910      	ldr	r1, [pc, #64]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cc4:	f000 f824 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	490b      	ldr	r1, [pc, #44]	; (8002d04 <HAL_RCC_ClockConfig+0x1f4>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1fc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe f805 	bl	8000cf8 <HAL_InitTick>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	08005730 	.word	0x08005730
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	20000008 	.word	0x20000008

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d28:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x34>
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d121      	bne.n	8002d82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d11e      	bne.n	8002d82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d44:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e005      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d6c:	4a2b      	ldr	r2, [pc, #172]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d102      	bne.n	8002d8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	e004      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d134      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d003      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0xac>
 8002db4:	e005      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x110>)
 8002db8:	617b      	str	r3, [r7, #20]
      break;
 8002dba:	e005      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dbe:	617b      	str	r3, [r7, #20]
      break;
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	617b      	str	r3, [r7, #20]
      break;
 8002dc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	fb03 f202 	mul.w	r2, r3, r2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	0e5b      	lsrs	r3, r3, #25
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e08:	69bb      	ldr	r3, [r7, #24]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08005748 	.word	0x08005748
 8002e20:	00f42400 	.word	0x00f42400
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e44:	f7ff fff0 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4904      	ldr	r1, [pc, #16]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	08005740 	.word	0x08005740

08002e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e70:	f7ff ffda 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0adb      	lsrs	r3, r3, #11
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	4904      	ldr	r1, [pc, #16]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08005740 	.word	0x08005740

08002e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002eb0:	f7ff f9ee 	bl	8002290 <HAL_PWREx_GetVoltageRange>
 8002eb4:	6178      	str	r0, [r7, #20]
 8002eb6:	e014      	b.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4a24      	ldr	r2, [pc, #144]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ed0:	f7ff f9de 	bl	8002290 <HAL_PWREx_GetVoltageRange>
 8002ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee8:	d10b      	bne.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d919      	bls.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ef4:	d902      	bls.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e013      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e010      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b80      	cmp	r3, #128	; 0x80
 8002f06:	d902      	bls.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f08:	2303      	movs	r3, #3
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e00a      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b80      	cmp	r3, #128	; 0x80
 8002f12:	d102      	bne.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f14:	2302      	movs	r3, #2
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	e004      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b70      	cmp	r3, #112	; 0x70
 8002f1e:	d101      	bne.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f20:	2301      	movs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 0207 	bic.w	r2, r3, #7
 8002f2c:	4909      	ldr	r1, [pc, #36]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40022000 	.word	0x40022000

08002f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f60:	2300      	movs	r3, #0
 8002f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f64:	2300      	movs	r3, #0
 8002f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d041      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f7c:	d02a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f82:	d824      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f88:	d008      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f8e:	d81e      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f98:	d010      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f9a:	e018      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f9c:	4b86      	ldr	r3, [pc, #536]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a85      	ldr	r2, [pc, #532]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fabb 	bl	800352c <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fba:	e00c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3320      	adds	r3, #32
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fba6 	bl	8003714 <RCCEx_PLLSAI2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fcc:	e003      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fdc:	4b76      	ldr	r3, [pc, #472]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fea:	4973      	ldr	r1, [pc, #460]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d041      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003008:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800300c:	d02a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800300e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003012:	d824      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003018:	d008      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800301a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800301e:	d81e      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003028:	d010      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800302a:	e018      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800302c:	4b62      	ldr	r3, [pc, #392]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a61      	ldr	r2, [pc, #388]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003038:	e015      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fa73 	bl	800352c <RCCEx_PLLSAI1_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800304a:	e00c      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3320      	adds	r3, #32
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fb5e 	bl	8003714 <RCCEx_PLLSAI2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800305c:	e003      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	74fb      	strb	r3, [r7, #19]
      break;
 8003062:	e000      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800306c:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307a:	494f      	ldr	r1, [pc, #316]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003082:	e001      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a0 	beq.w	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800309a:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	4a40      	ldr	r2, [pc, #256]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
 80030bc:	4b3e      	ldr	r3, [pc, #248]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c8:	2301      	movs	r3, #1
 80030ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a3a      	ldr	r2, [pc, #232]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d8:	f7fd fe5e 	bl	8000d98 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030de:	e009      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e0:	f7fd fe5a 	bl	8000d98 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d902      	bls.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	74fb      	strb	r3, [r7, #19]
        break;
 80030f2:	e005      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ef      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d15c      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003106:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003110:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01f      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	d019      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003150:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fd fe19 	bl	8000d98 <HAL_GetTick>
 8003166:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003168:	e00b      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fd fe15 	bl	8000d98 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	; 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d902      	bls.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	74fb      	strb	r3, [r7, #19]
            break;
 8003180:	e006      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ec      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10c      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a6:	4904      	ldr	r1, [pc, #16]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031ae:	e009      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
 80031b4:	e006      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c4:	7c7b      	ldrb	r3, [r7, #17]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4b9e      	ldr	r3, [pc, #632]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	4a9d      	ldr	r2, [pc, #628]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e2:	4b98      	ldr	r3, [pc, #608]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f023 0203 	bic.w	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	4994      	ldr	r1, [pc, #592]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003204:	4b8f      	ldr	r3, [pc, #572]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f023 020c 	bic.w	r2, r3, #12
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	498c      	ldr	r1, [pc, #560]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003226:	4b87      	ldr	r3, [pc, #540]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	4983      	ldr	r1, [pc, #524]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003248:	4b7e      	ldr	r3, [pc, #504]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	497b      	ldr	r1, [pc, #492]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800326a:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003278:	4972      	ldr	r1, [pc, #456]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800328c:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	496a      	ldr	r1, [pc, #424]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ae:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	4961      	ldr	r1, [pc, #388]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032d0:	4b5c      	ldr	r3, [pc, #368]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032de:	4959      	ldr	r1, [pc, #356]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f2:	4b54      	ldr	r3, [pc, #336]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	4950      	ldr	r1, [pc, #320]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003314:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	4948      	ldr	r1, [pc, #288]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003336:	4b43      	ldr	r3, [pc, #268]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	493f      	ldr	r1, [pc, #252]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d028      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003366:	4937      	ldr	r1, [pc, #220]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003376:	d106      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003378:	4b32      	ldr	r3, [pc, #200]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a31      	ldr	r2, [pc, #196]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003382:	60d3      	str	r3, [r2, #12]
 8003384:	e011      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800338e:	d10c      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	2101      	movs	r1, #1
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f8c8 	bl	800352c <RCCEx_PLLSAI1_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d028      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033b6:	4b23      	ldr	r3, [pc, #140]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	491f      	ldr	r1, [pc, #124]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033e0:	60d3      	str	r3, [r2, #12]
 80033e2:	e011      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2101      	movs	r1, #1
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f899 	bl	800352c <RCCEx_PLLSAI1_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d02b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	4908      	ldr	r1, [pc, #32]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003432:	d109      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a02      	ldr	r2, [pc, #8]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343e:	60d3      	str	r3, [r2, #12]
 8003440:	e014      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003450:	d10c      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2101      	movs	r1, #1
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f867 	bl	800352c <RCCEx_PLLSAI1_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003486:	4928      	ldr	r1, [pc, #160]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003496:	d10d      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f844 	bl	800352c <RCCEx_PLLSAI1_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d014      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	74bb      	strb	r3, [r7, #18]
 80034b2:	e011      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3320      	adds	r3, #32
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f925 	bl	8003714 <RCCEx_PLLSAI2_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034e4:	4b10      	ldr	r3, [pc, #64]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f2:	490d      	ldr	r1, [pc, #52]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003516:	4904      	ldr	r1, [pc, #16]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800351e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000

0800352c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800353a:	4b75      	ldr	r3, [pc, #468]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d018      	beq.n	8003578 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003546:	4b72      	ldr	r3, [pc, #456]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0203 	and.w	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d10d      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
       ||
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800355e:	4b6c      	ldr	r3, [pc, #432]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
       ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d047      	beq.n	8003602 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	e044      	b.n	8003602 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d018      	beq.n	80035b2 <RCCEx_PLLSAI1_Config+0x86>
 8003580:	2b03      	cmp	r3, #3
 8003582:	d825      	bhi.n	80035d0 <RCCEx_PLLSAI1_Config+0xa4>
 8003584:	2b01      	cmp	r3, #1
 8003586:	d002      	beq.n	800358e <RCCEx_PLLSAI1_Config+0x62>
 8003588:	2b02      	cmp	r3, #2
 800358a:	d009      	beq.n	80035a0 <RCCEx_PLLSAI1_Config+0x74>
 800358c:	e020      	b.n	80035d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800358e:	4b60      	ldr	r3, [pc, #384]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11d      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359e:	e01a      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035a0:	4b5b      	ldr	r3, [pc, #364]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d116      	bne.n	80035da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b0:	e013      	b.n	80035da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035b2:	4b57      	ldr	r3, [pc, #348]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035be:	4b54      	ldr	r3, [pc, #336]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035ce:	e006      	b.n	80035de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e004      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035d6:	bf00      	nop
 80035d8:	e002      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035da:	bf00      	nop
 80035dc:	e000      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035de:	bf00      	nop
    }

    if(status == HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10d      	bne.n	8003602 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035e6:	4b4a      	ldr	r3, [pc, #296]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6819      	ldr	r1, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	430b      	orrs	r3, r1
 80035fc:	4944      	ldr	r1, [pc, #272]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d17d      	bne.n	8003704 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003608:	4b41      	ldr	r3, [pc, #260]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a40      	ldr	r2, [pc, #256]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003614:	f7fd fbc0 	bl	8000d98 <HAL_GetTick>
 8003618:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800361a:	e009      	b.n	8003630 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800361c:	f7fd fbbc 	bl	8000d98 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d902      	bls.n	8003630 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	73fb      	strb	r3, [r7, #15]
        break;
 800362e:	e005      	b.n	800363c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003630:	4b37      	ldr	r3, [pc, #220]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ef      	bne.n	800361c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d160      	bne.n	8003704 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d111      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003648:	4b31      	ldr	r3, [pc, #196]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6892      	ldr	r2, [r2, #8]
 8003658:	0211      	lsls	r1, r2, #8
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68d2      	ldr	r2, [r2, #12]
 800365e:	0912      	lsrs	r2, r2, #4
 8003660:	0452      	lsls	r2, r2, #17
 8003662:	430a      	orrs	r2, r1
 8003664:	492a      	ldr	r1, [pc, #168]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	610b      	str	r3, [r1, #16]
 800366a:	e027      	b.n	80036bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d112      	bne.n	8003698 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800367a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6892      	ldr	r2, [r2, #8]
 8003682:	0211      	lsls	r1, r2, #8
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6912      	ldr	r2, [r2, #16]
 8003688:	0852      	lsrs	r2, r2, #1
 800368a:	3a01      	subs	r2, #1
 800368c:	0552      	lsls	r2, r2, #21
 800368e:	430a      	orrs	r2, r1
 8003690:	491f      	ldr	r1, [pc, #124]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	610b      	str	r3, [r1, #16]
 8003696:	e011      	b.n	80036bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6892      	ldr	r2, [r2, #8]
 80036a8:	0211      	lsls	r1, r2, #8
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6952      	ldr	r2, [r2, #20]
 80036ae:	0852      	lsrs	r2, r2, #1
 80036b0:	3a01      	subs	r2, #1
 80036b2:	0652      	lsls	r2, r2, #25
 80036b4:	430a      	orrs	r2, r1
 80036b6:	4916      	ldr	r1, [pc, #88]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a13      	ldr	r2, [pc, #76]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fd fb66 	bl	8000d98 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036ce:	e009      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036d0:	f7fd fb62 	bl	8000d98 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d902      	bls.n	80036e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	73fb      	strb	r3, [r7, #15]
          break;
 80036e2:	e005      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ef      	beq.n	80036d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	4904      	ldr	r1, [pc, #16]	; (8003710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000

08003714 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003722:	4b6a      	ldr	r3, [pc, #424]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800372e:	4b67      	ldr	r3, [pc, #412]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0203 	and.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d10d      	bne.n	800375a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
       ||
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003746:	4b61      	ldr	r3, [pc, #388]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
       ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d047      	beq.n	80037ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
 800375e:	e044      	b.n	80037ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d018      	beq.n	800379a <RCCEx_PLLSAI2_Config+0x86>
 8003768:	2b03      	cmp	r3, #3
 800376a:	d825      	bhi.n	80037b8 <RCCEx_PLLSAI2_Config+0xa4>
 800376c:	2b01      	cmp	r3, #1
 800376e:	d002      	beq.n	8003776 <RCCEx_PLLSAI2_Config+0x62>
 8003770:	2b02      	cmp	r3, #2
 8003772:	d009      	beq.n	8003788 <RCCEx_PLLSAI2_Config+0x74>
 8003774:	e020      	b.n	80037b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003776:	4b55      	ldr	r3, [pc, #340]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11d      	bne.n	80037be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003786:	e01a      	b.n	80037be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003788:	4b50      	ldr	r3, [pc, #320]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d116      	bne.n	80037c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003798:	e013      	b.n	80037c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800379a:	4b4c      	ldr	r3, [pc, #304]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10f      	bne.n	80037c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037a6:	4b49      	ldr	r3, [pc, #292]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037b6:	e006      	b.n	80037c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      break;
 80037bc:	e004      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037be:	bf00      	nop
 80037c0:	e002      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10d      	bne.n	80037ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037ce:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	430b      	orrs	r3, r1
 80037e4:	4939      	ldr	r1, [pc, #228]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d167      	bne.n	80038c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a35      	ldr	r2, [pc, #212]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fc:	f7fd facc 	bl	8000d98 <HAL_GetTick>
 8003800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003802:	e009      	b.n	8003818 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003804:	f7fd fac8 	bl	8000d98 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d902      	bls.n	8003818 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	73fb      	strb	r3, [r7, #15]
        break;
 8003816:	e005      	b.n	8003824 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003818:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ef      	bne.n	8003804 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d14a      	bne.n	80038c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d111      	bne.n	8003854 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003830:	4b26      	ldr	r3, [pc, #152]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6892      	ldr	r2, [r2, #8]
 8003840:	0211      	lsls	r1, r2, #8
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68d2      	ldr	r2, [r2, #12]
 8003846:	0912      	lsrs	r2, r2, #4
 8003848:	0452      	lsls	r2, r2, #17
 800384a:	430a      	orrs	r2, r1
 800384c:	491f      	ldr	r1, [pc, #124]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	614b      	str	r3, [r1, #20]
 8003852:	e011      	b.n	8003878 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800385c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6892      	ldr	r2, [r2, #8]
 8003864:	0211      	lsls	r1, r2, #8
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6912      	ldr	r2, [r2, #16]
 800386a:	0852      	lsrs	r2, r2, #1
 800386c:	3a01      	subs	r2, #1
 800386e:	0652      	lsls	r2, r2, #25
 8003870:	430a      	orrs	r2, r1
 8003872:	4916      	ldr	r1, [pc, #88]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800387e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003882:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fd fa88 	bl	8000d98 <HAL_GetTick>
 8003888:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800388a:	e009      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800388c:	f7fd fa84 	bl	8000d98 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d902      	bls.n	80038a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	73fb      	strb	r3, [r7, #15]
          break;
 800389e:	e005      	b.n	80038ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0ef      	beq.n	800388c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	4904      	ldr	r1, [pc, #16]	; (80038cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000

080038d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e040      	b.n	8003964 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd f91e 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fae0 	bl	8003edc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f825 	bl	800396c <UART_SetConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e01b      	b.n	8003964 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800393a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800394a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb5f 	bl	8004020 <UART_CheckIdleState>
 8003962:	4603      	mov	r3, r0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003970:	b08a      	sub	sp, #40	; 0x28
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	431a      	orrs	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4313      	orrs	r3, r2
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4ba4      	ldr	r3, [pc, #656]	; (8003c2c <UART_SetConfig+0x2c0>)
 800399c:	4013      	ands	r3, r2
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a99      	ldr	r2, [pc, #612]	; (8003c30 <UART_SetConfig+0x2c4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	4313      	orrs	r3, r2
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a90      	ldr	r2, [pc, #576]	; (8003c34 <UART_SetConfig+0x2c8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d126      	bne.n	8003a44 <UART_SetConfig+0xd8>
 80039f6:	4b90      	ldr	r3, [pc, #576]	; (8003c38 <UART_SetConfig+0x2cc>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d81b      	bhi.n	8003a3c <UART_SetConfig+0xd0>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <UART_SetConfig+0xa0>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003a2d 	.word	0x08003a2d
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003a35 	.word	0x08003a35
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e116      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003a24:	2302      	movs	r3, #2
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e112      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e10e      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003a34:	2308      	movs	r3, #8
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e10a      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a42:	e106      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a7c      	ldr	r2, [pc, #496]	; (8003c3c <UART_SetConfig+0x2d0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d138      	bne.n	8003ac0 <UART_SetConfig+0x154>
 8003a4e:	4b7a      	ldr	r3, [pc, #488]	; (8003c38 <UART_SetConfig+0x2cc>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b0c      	cmp	r3, #12
 8003a5a:	d82d      	bhi.n	8003ab8 <UART_SetConfig+0x14c>
 8003a5c:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <UART_SetConfig+0xf8>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a99 	.word	0x08003a99
 8003a68:	08003ab9 	.word	0x08003ab9
 8003a6c:	08003ab9 	.word	0x08003ab9
 8003a70:	08003ab9 	.word	0x08003ab9
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003ab9 	.word	0x08003ab9
 8003a7c:	08003ab9 	.word	0x08003ab9
 8003a80:	08003ab9 	.word	0x08003ab9
 8003a84:	08003aa1 	.word	0x08003aa1
 8003a88:	08003ab9 	.word	0x08003ab9
 8003a8c:	08003ab9 	.word	0x08003ab9
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ab1 	.word	0x08003ab1
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e0d8      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e0d4      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e0d0      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e0cc      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003abe:	e0c8      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a5e      	ldr	r2, [pc, #376]	; (8003c40 <UART_SetConfig+0x2d4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d125      	bne.n	8003b16 <UART_SetConfig+0x1aa>
 8003aca:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <UART_SetConfig+0x2cc>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	d016      	beq.n	8003b06 <UART_SetConfig+0x19a>
 8003ad8:	2b30      	cmp	r3, #48	; 0x30
 8003ada:	d818      	bhi.n	8003b0e <UART_SetConfig+0x1a2>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d00a      	beq.n	8003af6 <UART_SetConfig+0x18a>
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d814      	bhi.n	8003b0e <UART_SetConfig+0x1a2>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <UART_SetConfig+0x182>
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d008      	beq.n	8003afe <UART_SetConfig+0x192>
 8003aec:	e00f      	b.n	8003b0e <UART_SetConfig+0x1a2>
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af4:	e0ad      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003af6:	2302      	movs	r3, #2
 8003af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afc:	e0a9      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003afe:	2304      	movs	r3, #4
 8003b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b04:	e0a5      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003b06:	2308      	movs	r3, #8
 8003b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0c:	e0a1      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003b0e:	2310      	movs	r3, #16
 8003b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b14:	e09d      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a4a      	ldr	r2, [pc, #296]	; (8003c44 <UART_SetConfig+0x2d8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d125      	bne.n	8003b6c <UART_SetConfig+0x200>
 8003b20:	4b45      	ldr	r3, [pc, #276]	; (8003c38 <UART_SetConfig+0x2cc>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b2c:	d016      	beq.n	8003b5c <UART_SetConfig+0x1f0>
 8003b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b30:	d818      	bhi.n	8003b64 <UART_SetConfig+0x1f8>
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d00a      	beq.n	8003b4c <UART_SetConfig+0x1e0>
 8003b36:	2b80      	cmp	r3, #128	; 0x80
 8003b38:	d814      	bhi.n	8003b64 <UART_SetConfig+0x1f8>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <UART_SetConfig+0x1d8>
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d008      	beq.n	8003b54 <UART_SetConfig+0x1e8>
 8003b42:	e00f      	b.n	8003b64 <UART_SetConfig+0x1f8>
 8003b44:	2300      	movs	r3, #0
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e082      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e07e      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003b54:	2304      	movs	r3, #4
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e07a      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e076      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003b64:	2310      	movs	r3, #16
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6a:	e072      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a35      	ldr	r2, [pc, #212]	; (8003c48 <UART_SetConfig+0x2dc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d12a      	bne.n	8003bcc <UART_SetConfig+0x260>
 8003b76:	4b30      	ldr	r3, [pc, #192]	; (8003c38 <UART_SetConfig+0x2cc>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b84:	d01a      	beq.n	8003bbc <UART_SetConfig+0x250>
 8003b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b8a:	d81b      	bhi.n	8003bc4 <UART_SetConfig+0x258>
 8003b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b90:	d00c      	beq.n	8003bac <UART_SetConfig+0x240>
 8003b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b96:	d815      	bhi.n	8003bc4 <UART_SetConfig+0x258>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <UART_SetConfig+0x238>
 8003b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba0:	d008      	beq.n	8003bb4 <UART_SetConfig+0x248>
 8003ba2:	e00f      	b.n	8003bc4 <UART_SetConfig+0x258>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e052      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003bac:	2302      	movs	r3, #2
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb2:	e04e      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bba:	e04a      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc2:	e046      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bca:	e042      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <UART_SetConfig+0x2c4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d13a      	bne.n	8003c4c <UART_SetConfig+0x2e0>
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <UART_SetConfig+0x2cc>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be4:	d01a      	beq.n	8003c1c <UART_SetConfig+0x2b0>
 8003be6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bea:	d81b      	bhi.n	8003c24 <UART_SetConfig+0x2b8>
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf0:	d00c      	beq.n	8003c0c <UART_SetConfig+0x2a0>
 8003bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf6:	d815      	bhi.n	8003c24 <UART_SetConfig+0x2b8>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <UART_SetConfig+0x298>
 8003bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c00:	d008      	beq.n	8003c14 <UART_SetConfig+0x2a8>
 8003c02:	e00f      	b.n	8003c24 <UART_SetConfig+0x2b8>
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e022      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e01e      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003c14:	2304      	movs	r3, #4
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1a:	e01a      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e016      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2a:	e012      	b.n	8003c52 <UART_SetConfig+0x2e6>
 8003c2c:	efff69f3 	.word	0xefff69f3
 8003c30:	40008000 	.word	0x40008000
 8003c34:	40013800 	.word	0x40013800
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40004400 	.word	0x40004400
 8003c40:	40004800 	.word	0x40004800
 8003c44:	40004c00 	.word	0x40004c00
 8003c48:	40005000 	.word	0x40005000
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a9f      	ldr	r2, [pc, #636]	; (8003ed4 <UART_SetConfig+0x568>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d17a      	bne.n	8003d52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d824      	bhi.n	8003cae <UART_SetConfig+0x342>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <UART_SetConfig+0x300>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003caf 	.word	0x08003caf
 8003c74:	08003c99 	.word	0x08003c99
 8003c78:	08003caf 	.word	0x08003caf
 8003c7c:	08003c9f 	.word	0x08003c9f
 8003c80:	08003caf 	.word	0x08003caf
 8003c84:	08003caf 	.word	0x08003caf
 8003c88:	08003caf 	.word	0x08003caf
 8003c8c:	08003ca7 	.word	0x08003ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c90:	f7ff f8d6 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003c94:	61f8      	str	r0, [r7, #28]
        break;
 8003c96:	e010      	b.n	8003cba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c98:	4b8f      	ldr	r3, [pc, #572]	; (8003ed8 <UART_SetConfig+0x56c>)
 8003c9a:	61fb      	str	r3, [r7, #28]
        break;
 8003c9c:	e00d      	b.n	8003cba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9e:	f7ff f837 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8003ca2:	61f8      	str	r0, [r7, #28]
        break;
 8003ca4:	e009      	b.n	8003cba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003caa:	61fb      	str	r3, [r7, #28]
        break;
 8003cac:	e005      	b.n	8003cba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80fb 	beq.w	8003eb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d305      	bcc.n	8003cde <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d903      	bls.n	8003ce6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ce4:	e0e8      	b.n	8003eb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	461c      	mov	r4, r3
 8003cec:	4615      	mov	r5, r2
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	022b      	lsls	r3, r5, #8
 8003cf8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cfc:	0222      	lsls	r2, r4, #8
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	6849      	ldr	r1, [r1, #4]
 8003d02:	0849      	lsrs	r1, r1, #1
 8003d04:	2000      	movs	r0, #0
 8003d06:	4688      	mov	r8, r1
 8003d08:	4681      	mov	r9, r0
 8003d0a:	eb12 0a08 	adds.w	sl, r2, r8
 8003d0e:	eb43 0b09 	adc.w	fp, r3, r9
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d20:	4650      	mov	r0, sl
 8003d22:	4659      	mov	r1, fp
 8003d24:	f7fc fa50 	bl	80001c8 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d36:	d308      	bcc.n	8003d4a <UART_SetConfig+0x3de>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3e:	d204      	bcs.n	8003d4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	e0b6      	b.n	8003eb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d50:	e0b2      	b.n	8003eb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d5a:	d15e      	bne.n	8003e1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d828      	bhi.n	8003db6 <UART_SetConfig+0x44a>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0x400>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003da1 	.word	0x08003da1
 8003d78:	08003db7 	.word	0x08003db7
 8003d7c:	08003da7 	.word	0x08003da7
 8003d80:	08003db7 	.word	0x08003db7
 8003d84:	08003db7 	.word	0x08003db7
 8003d88:	08003db7 	.word	0x08003db7
 8003d8c:	08003daf 	.word	0x08003daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7ff f856 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003d94:	61f8      	str	r0, [r7, #28]
        break;
 8003d96:	e014      	b.n	8003dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d98:	f7ff f868 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 8003d9c:	61f8      	str	r0, [r7, #28]
        break;
 8003d9e:	e010      	b.n	8003dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da0:	4b4d      	ldr	r3, [pc, #308]	; (8003ed8 <UART_SetConfig+0x56c>)
 8003da2:	61fb      	str	r3, [r7, #28]
        break;
 8003da4:	e00d      	b.n	8003dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da6:	f7fe ffb3 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8003daa:	61f8      	str	r0, [r7, #28]
        break;
 8003dac:	e009      	b.n	8003dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	61fb      	str	r3, [r7, #28]
        break;
 8003db4:	e005      	b.n	8003dc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d077      	beq.n	8003eb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	005a      	lsls	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	441a      	add	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b0f      	cmp	r3, #15
 8003de2:	d916      	bls.n	8003e12 <UART_SetConfig+0x4a6>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dea:	d212      	bcs.n	8003e12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f023 030f 	bic.w	r3, r3, #15
 8003df4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	8afb      	ldrh	r3, [r7, #22]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	8afa      	ldrh	r2, [r7, #22]
 8003e0e:	60da      	str	r2, [r3, #12]
 8003e10:	e052      	b.n	8003eb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e18:	e04e      	b.n	8003eb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d827      	bhi.n	8003e72 <UART_SetConfig+0x506>
 8003e22:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <UART_SetConfig+0x4bc>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003e4d 	.word	0x08003e4d
 8003e2c:	08003e55 	.word	0x08003e55
 8003e30:	08003e5d 	.word	0x08003e5d
 8003e34:	08003e73 	.word	0x08003e73
 8003e38:	08003e63 	.word	0x08003e63
 8003e3c:	08003e73 	.word	0x08003e73
 8003e40:	08003e73 	.word	0x08003e73
 8003e44:	08003e73 	.word	0x08003e73
 8003e48:	08003e6b 	.word	0x08003e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f7fe fff8 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003e50:	61f8      	str	r0, [r7, #28]
        break;
 8003e52:	e014      	b.n	8003e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e54:	f7ff f80a 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 8003e58:	61f8      	str	r0, [r7, #28]
        break;
 8003e5a:	e010      	b.n	8003e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <UART_SetConfig+0x56c>)
 8003e5e:	61fb      	str	r3, [r7, #28]
        break;
 8003e60:	e00d      	b.n	8003e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e62:	f7fe ff55 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8003e66:	61f8      	str	r0, [r7, #28]
        break;
 8003e68:	e009      	b.n	8003e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e6e:	61fb      	str	r3, [r7, #28]
        break;
 8003e70:	e005      	b.n	8003e7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d019      	beq.n	8003eb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	085a      	lsrs	r2, r3, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	441a      	add	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b0f      	cmp	r3, #15
 8003e9c:	d909      	bls.n	8003eb2 <UART_SetConfig+0x546>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d205      	bcs.n	8003eb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	e002      	b.n	8003eb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ec4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3728      	adds	r7, #40	; 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40008000 	.word	0x40008000
 8003ed8:	00f42400 	.word	0x00f42400

08003edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01a      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fda:	d10a      	bne.n	8003ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b098      	sub	sp, #96	; 0x60
 8004024:	af02      	add	r7, sp, #8
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004030:	f7fc feb2 	bl	8000d98 <HAL_GetTick>
 8004034:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d12e      	bne.n	80040a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404c:	2200      	movs	r2, #0
 800404e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f88c 	bl	8004170 <UART_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d021      	beq.n	80040a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800406c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004072:	653b      	str	r3, [r7, #80]	; 0x50
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407c:	647b      	str	r3, [r7, #68]	; 0x44
 800407e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e6      	bne.n	800405e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e062      	b.n	8004168 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d149      	bne.n	8004144 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f856 	bl	8004170 <UART_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d03c      	beq.n	8004144 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	623b      	str	r3, [r7, #32]
   return(result);
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	60fb      	str	r3, [r7, #12]
   return(result);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800411c:	61fa      	str	r2, [r7, #28]
 800411e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	69b9      	ldr	r1, [r7, #24]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	617b      	str	r3, [r7, #20]
   return(result);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e011      	b.n	8004168 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3758      	adds	r7, #88	; 0x58
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004180:	e049      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004188:	d045      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fc fe05 	bl	8000d98 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e048      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d031      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d110      	bne.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2208      	movs	r2, #8
 80041c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f838 	bl	800423e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2208      	movs	r2, #8
 80041d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e029      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f0:	d111      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f81e 	bl	800423e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e00f      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	429a      	cmp	r2, r3
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	429a      	cmp	r2, r3
 8004232:	d0a6      	beq.n	8004182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800423e:	b480      	push	{r7}
 8004240:	b095      	sub	sp, #84	; 0x54
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004264:	643b      	str	r3, [r7, #64]	; 0x40
 8004266:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800426a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e6      	bne.n	8004246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	61fb      	str	r3, [r7, #28]
   return(result);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004298:	62fa      	str	r2, [r7, #44]	; 0x2c
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800429e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d118      	bne.n	80042e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f023 0310 	bic.w	r3, r3, #16
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6979      	ldr	r1, [r7, #20]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	613b      	str	r3, [r7, #16]
   return(result);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e6      	bne.n	80042b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042fa:	bf00      	nop
 80042fc:	3754      	adds	r7, #84	; 0x54
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <arm_rfft_32_fast_init_f32>:
 8004308:	b178      	cbz	r0, 800432a <arm_rfft_32_fast_init_f32+0x22>
 800430a:	b430      	push	{r4, r5}
 800430c:	4908      	ldr	r1, [pc, #32]	; (8004330 <arm_rfft_32_fast_init_f32+0x28>)
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <arm_rfft_32_fast_init_f32+0x2c>)
 8004310:	2310      	movs	r3, #16
 8004312:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004316:	8003      	strh	r3, [r0, #0]
 8004318:	2520      	movs	r5, #32
 800431a:	2414      	movs	r4, #20
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <arm_rfft_32_fast_init_f32+0x30>)
 800431e:	8205      	strh	r5, [r0, #16]
 8004320:	8184      	strh	r4, [r0, #12]
 8004322:	6143      	str	r3, [r0, #20]
 8004324:	bc30      	pop	{r4, r5}
 8004326:	2000      	movs	r0, #0
 8004328:	4770      	bx	lr
 800432a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800432e:	4770      	bx	lr
 8004330:	08006728 	.word	0x08006728
 8004334:	0800b864 	.word	0x0800b864
 8004338:	080145e4 	.word	0x080145e4

0800433c <arm_rfft_64_fast_init_f32>:
 800433c:	b178      	cbz	r0, 800435e <arm_rfft_64_fast_init_f32+0x22>
 800433e:	b430      	push	{r4, r5}
 8004340:	4908      	ldr	r1, [pc, #32]	; (8004364 <arm_rfft_64_fast_init_f32+0x28>)
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <arm_rfft_64_fast_init_f32+0x2c>)
 8004344:	2320      	movs	r3, #32
 8004346:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800434a:	8003      	strh	r3, [r0, #0]
 800434c:	2540      	movs	r5, #64	; 0x40
 800434e:	2430      	movs	r4, #48	; 0x30
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <arm_rfft_64_fast_init_f32+0x30>)
 8004352:	8205      	strh	r5, [r0, #16]
 8004354:	8184      	strh	r4, [r0, #12]
 8004356:	6143      	str	r3, [r0, #20]
 8004358:	bc30      	pop	{r4, r5}
 800435a:	2000      	movs	r0, #0
 800435c:	4770      	bx	lr
 800435e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004362:	4770      	bx	lr
 8004364:	08008880 	.word	0x08008880
 8004368:	080100e4 	.word	0x080100e4
 800436c:	08018e64 	.word	0x08018e64

08004370 <arm_rfft_256_fast_init_f32>:
 8004370:	b180      	cbz	r0, 8004394 <arm_rfft_256_fast_init_f32+0x24>
 8004372:	b430      	push	{r4, r5}
 8004374:	4909      	ldr	r1, [pc, #36]	; (800439c <arm_rfft_256_fast_init_f32+0x2c>)
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <arm_rfft_256_fast_init_f32+0x30>)
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800437e:	8003      	strh	r3, [r0, #0]
 8004380:	f44f 7580 	mov.w	r5, #256	; 0x100
 8004384:	24d0      	movs	r4, #208	; 0xd0
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <arm_rfft_256_fast_init_f32+0x34>)
 8004388:	8205      	strh	r5, [r0, #16]
 800438a:	8184      	strh	r4, [r0, #12]
 800438c:	6143      	str	r3, [r0, #20]
 800438e:	bc30      	pop	{r4, r5}
 8004390:	2000      	movs	r0, #0
 8004392:	4770      	bx	lr
 8004394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	08006588 	.word	0x08006588
 80043a0:	0800b464 	.word	0x0800b464
 80043a4:	080141e4 	.word	0x080141e4

080043a8 <arm_rfft_512_fast_init_f32>:
 80043a8:	b190      	cbz	r0, 80043d0 <arm_rfft_512_fast_init_f32+0x28>
 80043aa:	b430      	push	{r4, r5}
 80043ac:	490a      	ldr	r1, [pc, #40]	; (80043d8 <arm_rfft_512_fast_init_f32+0x30>)
 80043ae:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <arm_rfft_512_fast_init_f32+0x34>)
 80043b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043b4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80043b8:	8003      	strh	r3, [r0, #0]
 80043ba:	f44f 7500 	mov.w	r5, #512	; 0x200
 80043be:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <arm_rfft_512_fast_init_f32+0x38>)
 80043c4:	8205      	strh	r5, [r0, #16]
 80043c6:	8184      	strh	r4, [r0, #12]
 80043c8:	6143      	str	r3, [r0, #20]
 80043ca:	bc30      	pop	{r4, r5}
 80043cc:	2000      	movs	r0, #0
 80043ce:	4770      	bx	lr
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	08008510 	.word	0x08008510
 80043dc:	0800f8e4 	.word	0x0800f8e4
 80043e0:	08018664 	.word	0x08018664

080043e4 <arm_rfft_1024_fast_init_f32>:
 80043e4:	b190      	cbz	r0, 800440c <arm_rfft_1024_fast_init_f32+0x28>
 80043e6:	b430      	push	{r4, r5}
 80043e8:	490a      	ldr	r1, [pc, #40]	; (8004414 <arm_rfft_1024_fast_init_f32+0x30>)
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <arm_rfft_1024_fast_init_f32+0x34>)
 80043ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043f0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80043f4:	8003      	strh	r3, [r0, #0]
 80043f6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80043fa:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80043fe:	4b07      	ldr	r3, [pc, #28]	; (800441c <arm_rfft_1024_fast_init_f32+0x38>)
 8004400:	8205      	strh	r5, [r0, #16]
 8004402:	8184      	strh	r4, [r0, #12]
 8004404:	6143      	str	r3, [r0, #20]
 8004406:	bc30      	pop	{r4, r5}
 8004408:	2000      	movs	r0, #0
 800440a:	4770      	bx	lr
 800440c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	080088e0 	.word	0x080088e0
 8004418:	080101e4 	.word	0x080101e4
 800441c:	080111e4 	.word	0x080111e4

08004420 <arm_rfft_2048_fast_init_f32>:
 8004420:	b190      	cbz	r0, 8004448 <arm_rfft_2048_fast_init_f32+0x28>
 8004422:	b430      	push	{r4, r5}
 8004424:	490a      	ldr	r1, [pc, #40]	; (8004450 <arm_rfft_2048_fast_init_f32+0x30>)
 8004426:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <arm_rfft_2048_fast_init_f32+0x34>)
 8004428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800442c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004430:	8003      	strh	r3, [r0, #0]
 8004432:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004436:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <arm_rfft_2048_fast_init_f32+0x38>)
 800443c:	8205      	strh	r5, [r0, #16]
 800443e:	8184      	strh	r4, [r0, #12]
 8004440:	6143      	str	r3, [r0, #20]
 8004442:	bc30      	pop	{r4, r5}
 8004444:	2000      	movs	r0, #0
 8004446:	4770      	bx	lr
 8004448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	08005778 	.word	0x08005778
 8004454:	08009464 	.word	0x08009464
 8004458:	080121e4 	.word	0x080121e4

0800445c <arm_rfft_4096_fast_init_f32>:
 800445c:	b190      	cbz	r0, 8004484 <arm_rfft_4096_fast_init_f32+0x28>
 800445e:	b430      	push	{r4, r5}
 8004460:	490a      	ldr	r1, [pc, #40]	; (800448c <arm_rfft_4096_fast_init_f32+0x30>)
 8004462:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <arm_rfft_4096_fast_init_f32+0x34>)
 8004464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004468:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800446c:	8003      	strh	r3, [r0, #0]
 800446e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8004472:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <arm_rfft_4096_fast_init_f32+0x38>)
 8004478:	8205      	strh	r5, [r0, #16]
 800447a:	8184      	strh	r4, [r0, #12]
 800447c:	6143      	str	r3, [r0, #20]
 800447e:	bc30      	pop	{r4, r5}
 8004480:	2000      	movs	r0, #0
 8004482:	4770      	bx	lr
 8004484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	08006750 	.word	0x08006750
 8004490:	0800b8e4 	.word	0x0800b8e4
 8004494:	08014664 	.word	0x08014664

08004498 <arm_rfft_fast_init_f32>:
 8004498:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800449c:	d01f      	beq.n	80044de <arm_rfft_fast_init_f32+0x46>
 800449e:	d90b      	bls.n	80044b8 <arm_rfft_fast_init_f32+0x20>
 80044a0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80044a4:	d019      	beq.n	80044da <arm_rfft_fast_init_f32+0x42>
 80044a6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80044aa:	d012      	beq.n	80044d2 <arm_rfft_fast_init_f32+0x3a>
 80044ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80044b0:	d00d      	beq.n	80044ce <arm_rfft_fast_init_f32+0x36>
 80044b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044b6:	4770      	bx	lr
 80044b8:	2940      	cmp	r1, #64	; 0x40
 80044ba:	d00c      	beq.n	80044d6 <arm_rfft_fast_init_f32+0x3e>
 80044bc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80044c0:	d003      	beq.n	80044ca <arm_rfft_fast_init_f32+0x32>
 80044c2:	2920      	cmp	r1, #32
 80044c4:	d1f5      	bne.n	80044b2 <arm_rfft_fast_init_f32+0x1a>
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <arm_rfft_fast_init_f32+0x4c>)
 80044c8:	4718      	bx	r3
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <arm_rfft_fast_init_f32+0x50>)
 80044cc:	4718      	bx	r3
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <arm_rfft_fast_init_f32+0x54>)
 80044d0:	4718      	bx	r3
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <arm_rfft_fast_init_f32+0x58>)
 80044d4:	4718      	bx	r3
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <arm_rfft_fast_init_f32+0x5c>)
 80044d8:	e7f6      	b.n	80044c8 <arm_rfft_fast_init_f32+0x30>
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <arm_rfft_fast_init_f32+0x60>)
 80044dc:	e7f4      	b.n	80044c8 <arm_rfft_fast_init_f32+0x30>
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <arm_rfft_fast_init_f32+0x64>)
 80044e0:	e7f2      	b.n	80044c8 <arm_rfft_fast_init_f32+0x30>
 80044e2:	bf00      	nop
 80044e4:	08004309 	.word	0x08004309
 80044e8:	08004371 	.word	0x08004371
 80044ec:	080043e5 	.word	0x080043e5
 80044f0:	0800445d 	.word	0x0800445d
 80044f4:	0800433d 	.word	0x0800433d
 80044f8:	08004421 	.word	0x08004421
 80044fc:	080043a9 	.word	0x080043a9

08004500 <stage_rfft_f32>:
 8004500:	b410      	push	{r4}
 8004502:	edd1 7a00 	vldr	s15, [r1]
 8004506:	ed91 7a01 	vldr	s14, [r1, #4]
 800450a:	8804      	ldrh	r4, [r0, #0]
 800450c:	6940      	ldr	r0, [r0, #20]
 800450e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004512:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004516:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800451a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800451e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004522:	3c01      	subs	r4, #1
 8004524:	ee26 7a84 	vmul.f32	s14, s13, s8
 8004528:	ee67 7a84 	vmul.f32	s15, s15, s8
 800452c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8004530:	ed82 7a00 	vstr	s14, [r2]
 8004534:	edc2 7a01 	vstr	s15, [r2, #4]
 8004538:	3010      	adds	r0, #16
 800453a:	3210      	adds	r2, #16
 800453c:	3b08      	subs	r3, #8
 800453e:	3110      	adds	r1, #16
 8004540:	ed11 5a02 	vldr	s10, [r1, #-8]
 8004544:	ed93 7a02 	vldr	s14, [r3, #8]
 8004548:	ed50 6a02 	vldr	s13, [r0, #-8]
 800454c:	edd3 4a03 	vldr	s9, [r3, #12]
 8004550:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004554:	ed10 6a01 	vldr	s12, [r0, #-4]
 8004558:	ee77 5a45 	vsub.f32	s11, s14, s10
 800455c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004560:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8004564:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8004568:	ee66 5a25 	vmul.f32	s11, s12, s11
 800456c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004570:	ee37 7a23 	vadd.f32	s14, s14, s7
 8004574:	ee66 6a85 	vmul.f32	s13, s13, s10
 8004578:	ee26 6a05 	vmul.f32	s12, s12, s10
 800457c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004580:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004584:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004588:	ee27 7a04 	vmul.f32	s14, s14, s8
 800458c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004590:	3c01      	subs	r4, #1
 8004592:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004596:	ed42 7a01 	vstr	s15, [r2, #-4]
 800459a:	f1a3 0308 	sub.w	r3, r3, #8
 800459e:	f101 0108 	add.w	r1, r1, #8
 80045a2:	f100 0008 	add.w	r0, r0, #8
 80045a6:	f102 0208 	add.w	r2, r2, #8
 80045aa:	d1c9      	bne.n	8004540 <stage_rfft_f32+0x40>
 80045ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop

080045b4 <merge_rfft_f32>:
 80045b4:	b410      	push	{r4}
 80045b6:	edd1 7a00 	vldr	s15, [r1]
 80045ba:	edd1 6a01 	vldr	s13, [r1, #4]
 80045be:	8804      	ldrh	r4, [r0, #0]
 80045c0:	6940      	ldr	r0, [r0, #20]
 80045c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80045c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80045ca:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80045ce:	ee27 7a04 	vmul.f32	s14, s14, s8
 80045d2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80045d6:	3c01      	subs	r4, #1
 80045d8:	ed82 7a00 	vstr	s14, [r2]
 80045dc:	edc2 7a01 	vstr	s15, [r2, #4]
 80045e0:	b3dc      	cbz	r4, 800465a <merge_rfft_f32+0xa6>
 80045e2:	00e3      	lsls	r3, r4, #3
 80045e4:	3b08      	subs	r3, #8
 80045e6:	440b      	add	r3, r1
 80045e8:	3010      	adds	r0, #16
 80045ea:	3210      	adds	r2, #16
 80045ec:	3110      	adds	r1, #16
 80045ee:	ed11 5a02 	vldr	s10, [r1, #-8]
 80045f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80045f6:	ed50 6a02 	vldr	s13, [r0, #-8]
 80045fa:	edd3 4a03 	vldr	s9, [r3, #12]
 80045fe:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004602:	ed10 6a01 	vldr	s12, [r0, #-4]
 8004606:	ee75 5a47 	vsub.f32	s11, s10, s14
 800460a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800460e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8004612:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8004616:	ee66 5a25 	vmul.f32	s11, s12, s11
 800461a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800461e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8004622:	ee66 6a85 	vmul.f32	s13, s13, s10
 8004626:	ee26 6a05 	vmul.f32	s12, s12, s10
 800462a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800462e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8004632:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004636:	ee27 7a04 	vmul.f32	s14, s14, s8
 800463a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800463e:	3c01      	subs	r4, #1
 8004640:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004644:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004648:	f1a3 0308 	sub.w	r3, r3, #8
 800464c:	f101 0108 	add.w	r1, r1, #8
 8004650:	f100 0008 	add.w	r0, r0, #8
 8004654:	f102 0208 	add.w	r2, r2, #8
 8004658:	d1c9      	bne.n	80045ee <merge_rfft_f32+0x3a>
 800465a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800465e:	4770      	bx	lr

08004660 <arm_rfft_fast_f32>:
 8004660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004664:	8a05      	ldrh	r5, [r0, #16]
 8004666:	086d      	lsrs	r5, r5, #1
 8004668:	8005      	strh	r5, [r0, #0]
 800466a:	4604      	mov	r4, r0
 800466c:	4616      	mov	r6, r2
 800466e:	461d      	mov	r5, r3
 8004670:	b14b      	cbz	r3, 8004686 <arm_rfft_fast_f32+0x26>
 8004672:	f7ff ff9f 	bl	80045b4 <merge_rfft_f32>
 8004676:	462a      	mov	r2, r5
 8004678:	4631      	mov	r1, r6
 800467a:	4620      	mov	r0, r4
 800467c:	2301      	movs	r3, #1
 800467e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004682:	f000 bb33 	b.w	8004cec <arm_cfft_f32>
 8004686:	460f      	mov	r7, r1
 8004688:	461a      	mov	r2, r3
 800468a:	2301      	movs	r3, #1
 800468c:	f000 fb2e 	bl	8004cec <arm_cfft_f32>
 8004690:	4632      	mov	r2, r6
 8004692:	4639      	mov	r1, r7
 8004694:	4620      	mov	r0, r4
 8004696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800469a:	f7ff bf31 	b.w	8004500 <stage_rfft_f32>
 800469e:	bf00      	nop

080046a0 <arm_cfft_radix8by2_f32>:
 80046a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a4:	ed2d 8b08 	vpush	{d8-d11}
 80046a8:	4607      	mov	r7, r0
 80046aa:	4608      	mov	r0, r1
 80046ac:	f8b7 c000 	ldrh.w	ip, [r7]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80046b6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80046ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80046be:	f000 80b0 	beq.w	8004822 <arm_cfft_radix8by2_f32+0x182>
 80046c2:	008c      	lsls	r4, r1, #2
 80046c4:	3410      	adds	r4, #16
 80046c6:	f100 0310 	add.w	r3, r0, #16
 80046ca:	1906      	adds	r6, r0, r4
 80046cc:	3210      	adds	r2, #16
 80046ce:	4444      	add	r4, r8
 80046d0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80046d4:	f108 0510 	add.w	r5, r8, #16
 80046d8:	ed15 2a04 	vldr	s4, [r5, #-16]
 80046dc:	ed55 2a03 	vldr	s5, [r5, #-12]
 80046e0:	ed54 4a04 	vldr	s9, [r4, #-16]
 80046e4:	ed14 4a03 	vldr	s8, [r4, #-12]
 80046e8:	ed14 6a02 	vldr	s12, [r4, #-8]
 80046ec:	ed54 5a01 	vldr	s11, [r4, #-4]
 80046f0:	ed53 3a04 	vldr	s7, [r3, #-16]
 80046f4:	ed15 0a02 	vldr	s0, [r5, #-8]
 80046f8:	ed55 0a01 	vldr	s1, [r5, #-4]
 80046fc:	ed56 6a04 	vldr	s13, [r6, #-16]
 8004700:	ed16 3a03 	vldr	s6, [r6, #-12]
 8004704:	ed13 7a03 	vldr	s14, [r3, #-12]
 8004708:	ed13 5a02 	vldr	s10, [r3, #-8]
 800470c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004710:	ed16 1a02 	vldr	s2, [r6, #-8]
 8004714:	ed56 1a01 	vldr	s3, [r6, #-4]
 8004718:	ee73 ba82 	vadd.f32	s23, s7, s4
 800471c:	ee37 ba22 	vadd.f32	s22, s14, s5
 8004720:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8004724:	ee33 9a04 	vadd.f32	s18, s6, s8
 8004728:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800472c:	ee75 aa00 	vadd.f32	s21, s10, s0
 8004730:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8004734:	ee71 8a06 	vadd.f32	s17, s2, s12
 8004738:	ed43 ba04 	vstr	s23, [r3, #-16]
 800473c:	ed03 ba03 	vstr	s22, [r3, #-12]
 8004740:	ed43 aa02 	vstr	s21, [r3, #-8]
 8004744:	ed03 aa01 	vstr	s20, [r3, #-4]
 8004748:	ed06 8a01 	vstr	s16, [r6, #-4]
 800474c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004750:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004754:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004758:	ee37 7a62 	vsub.f32	s14, s14, s5
 800475c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8004760:	ee34 4a43 	vsub.f32	s8, s8, s6
 8004764:	ed52 6a03 	vldr	s13, [r2, #-12]
 8004768:	ed12 3a04 	vldr	s6, [r2, #-16]
 800476c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8004770:	ee27 8a26 	vmul.f32	s16, s14, s13
 8004774:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8004778:	ee23 2a83 	vmul.f32	s4, s7, s6
 800477c:	ee64 4a83 	vmul.f32	s9, s9, s6
 8004780:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8004784:	ee27 7a03 	vmul.f32	s14, s14, s6
 8004788:	ee64 6a26 	vmul.f32	s13, s8, s13
 800478c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8004790:	ee37 7a63 	vsub.f32	s14, s14, s7
 8004794:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004798:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800479c:	ee32 3a08 	vadd.f32	s6, s4, s16
 80047a0:	ed05 7a03 	vstr	s14, [r5, #-12]
 80047a4:	ed05 3a04 	vstr	s6, [r5, #-16]
 80047a8:	ed04 4a04 	vstr	s8, [r4, #-16]
 80047ac:	ed44 6a03 	vstr	s13, [r4, #-12]
 80047b0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80047b4:	ee76 6a41 	vsub.f32	s13, s12, s2
 80047b8:	ee35 5a40 	vsub.f32	s10, s10, s0
 80047bc:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80047c0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80047c4:	ed52 5a02 	vldr	s11, [r2, #-8]
 80047c8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80047cc:	ee66 4a87 	vmul.f32	s9, s13, s14
 80047d0:	ee25 4a25 	vmul.f32	s8, s10, s11
 80047d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80047d8:	ee25 5a07 	vmul.f32	s10, s10, s14
 80047dc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80047e0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80047e4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80047e8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80047ec:	ee74 5a23 	vadd.f32	s11, s8, s7
 80047f0:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80047f4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80047f8:	3310      	adds	r3, #16
 80047fa:	4563      	cmp	r3, ip
 80047fc:	ed45 5a02 	vstr	s11, [r5, #-8]
 8004800:	f106 0610 	add.w	r6, r6, #16
 8004804:	ed45 7a01 	vstr	s15, [r5, #-4]
 8004808:	f102 0210 	add.w	r2, r2, #16
 800480c:	ed04 6a02 	vstr	s12, [r4, #-8]
 8004810:	ed04 7a01 	vstr	s14, [r4, #-4]
 8004814:	f105 0510 	add.w	r5, r5, #16
 8004818:	f104 0410 	add.w	r4, r4, #16
 800481c:	f47f af5c 	bne.w	80046d8 <arm_cfft_radix8by2_f32+0x38>
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	b28c      	uxth	r4, r1
 8004824:	4621      	mov	r1, r4
 8004826:	2302      	movs	r3, #2
 8004828:	f000 fc62 	bl	80050f0 <arm_radix8_butterfly_f32>
 800482c:	ecbd 8b08 	vpop	{d8-d11}
 8004830:	4621      	mov	r1, r4
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4640      	mov	r0, r8
 8004836:	2302      	movs	r3, #2
 8004838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800483c:	f000 bc58 	b.w	80050f0 <arm_radix8_butterfly_f32>

08004840 <arm_cfft_radix8by4_f32>:
 8004840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004844:	ed2d 8b0a 	vpush	{d8-d12}
 8004848:	b08d      	sub	sp, #52	; 0x34
 800484a:	460d      	mov	r5, r1
 800484c:	910b      	str	r1, [sp, #44]	; 0x2c
 800484e:	8801      	ldrh	r1, [r0, #0]
 8004850:	6842      	ldr	r2, [r0, #4]
 8004852:	900a      	str	r0, [sp, #40]	; 0x28
 8004854:	0849      	lsrs	r1, r1, #1
 8004856:	008b      	lsls	r3, r1, #2
 8004858:	18ee      	adds	r6, r5, r3
 800485a:	18f0      	adds	r0, r6, r3
 800485c:	edd0 5a00 	vldr	s11, [r0]
 8004860:	edd5 7a00 	vldr	s15, [r5]
 8004864:	ed96 7a00 	vldr	s14, [r6]
 8004868:	edd0 3a01 	vldr	s7, [r0, #4]
 800486c:	ed96 4a01 	vldr	s8, [r6, #4]
 8004870:	ed95 5a01 	vldr	s10, [r5, #4]
 8004874:	9008      	str	r0, [sp, #32]
 8004876:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800487a:	18c7      	adds	r7, r0, r3
 800487c:	edd7 4a00 	vldr	s9, [r7]
 8004880:	ed97 3a01 	vldr	s6, [r7, #4]
 8004884:	9701      	str	r7, [sp, #4]
 8004886:	ee77 6a06 	vadd.f32	s13, s14, s12
 800488a:	462c      	mov	r4, r5
 800488c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004890:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004894:	ee16 ca90 	vmov	ip, s13
 8004898:	f844 cb08 	str.w	ip, [r4], #8
 800489c:	ee75 6a23 	vadd.f32	s13, s10, s7
 80048a0:	edd6 5a01 	vldr	s11, [r6, #4]
 80048a4:	edd7 2a01 	vldr	s5, [r7, #4]
 80048a8:	9404      	str	r4, [sp, #16]
 80048aa:	ee35 5a63 	vsub.f32	s10, s10, s7
 80048ae:	ee74 3a27 	vadd.f32	s7, s8, s15
 80048b2:	ee36 6a47 	vsub.f32	s12, s12, s14
 80048b6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80048ba:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80048be:	0849      	lsrs	r1, r1, #1
 80048c0:	f102 0e08 	add.w	lr, r2, #8
 80048c4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80048c8:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80048cc:	9109      	str	r1, [sp, #36]	; 0x24
 80048ce:	ee35 4a47 	vsub.f32	s8, s10, s14
 80048d2:	f1a1 0902 	sub.w	r9, r1, #2
 80048d6:	f8cd e00c 	str.w	lr, [sp, #12]
 80048da:	4631      	mov	r1, r6
 80048dc:	ee13 ea90 	vmov	lr, s7
 80048e0:	ee36 6a64 	vsub.f32	s12, s12, s9
 80048e4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80048e8:	4604      	mov	r4, r0
 80048ea:	edc5 5a01 	vstr	s11, [r5, #4]
 80048ee:	ee37 7a05 	vadd.f32	s14, s14, s10
 80048f2:	f841 eb08 	str.w	lr, [r1], #8
 80048f6:	ee34 5a24 	vadd.f32	s10, s8, s9
 80048fa:	ee16 ea10 	vmov	lr, s12
 80048fe:	ed86 5a01 	vstr	s10, [r6, #4]
 8004902:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004906:	f844 eb08 	str.w	lr, [r4], #8
 800490a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800490e:	edc0 6a01 	vstr	s13, [r0, #4]
 8004912:	9405      	str	r4, [sp, #20]
 8004914:	4604      	mov	r4, r0
 8004916:	ee17 0a90 	vmov	r0, s15
 800491a:	9106      	str	r1, [sp, #24]
 800491c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004920:	f102 0110 	add.w	r1, r2, #16
 8004924:	46bc      	mov	ip, r7
 8004926:	9100      	str	r1, [sp, #0]
 8004928:	f847 0b08 	str.w	r0, [r7], #8
 800492c:	f102 0118 	add.w	r1, r2, #24
 8004930:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8004934:	9102      	str	r1, [sp, #8]
 8004936:	ed8c 7a01 	vstr	s14, [ip, #4]
 800493a:	9007      	str	r0, [sp, #28]
 800493c:	f000 8134 	beq.w	8004ba8 <arm_cfft_radix8by4_f32+0x368>
 8004940:	f102 0920 	add.w	r9, r2, #32
 8004944:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8004948:	9a01      	ldr	r2, [sp, #4]
 800494a:	f8dd a000 	ldr.w	sl, [sp]
 800494e:	3b0c      	subs	r3, #12
 8004950:	4683      	mov	fp, r0
 8004952:	4463      	add	r3, ip
 8004954:	f105 0e10 	add.w	lr, r5, #16
 8004958:	f1a4 010c 	sub.w	r1, r4, #12
 800495c:	f104 0510 	add.w	r5, r4, #16
 8004960:	f1a6 0c0c 	sub.w	ip, r6, #12
 8004964:	f1a2 040c 	sub.w	r4, r2, #12
 8004968:	f106 0010 	add.w	r0, r6, #16
 800496c:	3210      	adds	r2, #16
 800496e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8004972:	ed55 5a02 	vldr	s11, [r5, #-8]
 8004976:	ed50 7a02 	vldr	s15, [r0, #-8]
 800497a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800497e:	ed55 6a01 	vldr	s13, [r5, #-4]
 8004982:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8004986:	ed12 1a01 	vldr	s2, [r2, #-4]
 800498a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800498e:	ee35 4a25 	vadd.f32	s8, s10, s11
 8004992:	ee30 6a26 	vadd.f32	s12, s0, s13
 8004996:	ee37 7a84 	vadd.f32	s14, s15, s8
 800499a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800499e:	ee37 7a21 	vadd.f32	s14, s14, s3
 80049a2:	ee75 5a65 	vsub.f32	s11, s10, s11
 80049a6:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80049aa:	ed10 7a01 	vldr	s14, [r0, #-4]
 80049ae:	ed52 6a01 	vldr	s13, [r2, #-4]
 80049b2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80049b6:	ee78 aa25 	vadd.f32	s21, s16, s11
 80049ba:	ee37 7a26 	vadd.f32	s14, s14, s13
 80049be:	ee70 3a67 	vsub.f32	s7, s0, s15
 80049c2:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80049c6:	ed94 7a02 	vldr	s14, [r4, #8]
 80049ca:	ed9c 2a02 	vldr	s4, [ip, #8]
 80049ce:	ed91 ba02 	vldr	s22, [r1, #8]
 80049d2:	edd3 9a02 	vldr	s19, [r3, #8]
 80049d6:	edd4 2a01 	vldr	s5, [r4, #4]
 80049da:	ed9c 9a01 	vldr	s18, [ip, #4]
 80049de:	ed93 5a01 	vldr	s10, [r3, #4]
 80049e2:	edd1 0a01 	vldr	s1, [r1, #4]
 80049e6:	ee72 6a07 	vadd.f32	s13, s4, s14
 80049ea:	ee32 2a47 	vsub.f32	s4, s4, s14
 80049ee:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80049f2:	ee79 4a22 	vadd.f32	s9, s18, s5
 80049f6:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80049fa:	ee79 2a62 	vsub.f32	s5, s18, s5
 80049fe:	ed8c 7a02 	vstr	s14, [ip, #8]
 8004a02:	ed91 7a01 	vldr	s14, [r1, #4]
 8004a06:	edd3 8a01 	vldr	s17, [r3, #4]
 8004a0a:	ee34 7a87 	vadd.f32	s14, s9, s14
 8004a0e:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8004a12:	ee37 7a28 	vadd.f32	s14, s14, s17
 8004a16:	ee32 9a60 	vsub.f32	s18, s4, s1
 8004a1a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8004a1e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8004a22:	ed1a aa02 	vldr	s20, [sl, #-8]
 8004a26:	ee73 8a22 	vadd.f32	s17, s6, s5
 8004a2a:	ee39 9a05 	vadd.f32	s18, s18, s10
 8004a2e:	ee7a aac1 	vsub.f32	s21, s21, s2
 8004a32:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8004a36:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8004a3a:	ee69 ba07 	vmul.f32	s23, s18, s14
 8004a3e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8004a42:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8004a46:	ee63 ca87 	vmul.f32	s25, s7, s14
 8004a4a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8004a4e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8004a52:	ee68 8a87 	vmul.f32	s17, s17, s14
 8004a56:	ee73 3aea 	vsub.f32	s7, s7, s21
 8004a5a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004a5e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8004a62:	ee3b aaca 	vsub.f32	s20, s23, s20
 8004a66:	ee34 4a67 	vsub.f32	s8, s8, s15
 8004a6a:	ee76 6acb 	vsub.f32	s13, s13, s22
 8004a6e:	ee36 6a48 	vsub.f32	s12, s12, s16
 8004a72:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8004a76:	ed00 7a02 	vstr	s14, [r0, #-8]
 8004a7a:	ed40 3a01 	vstr	s7, [r0, #-4]
 8004a7e:	edc1 8a01 	vstr	s17, [r1, #4]
 8004a82:	ed81 aa02 	vstr	s20, [r1, #8]
 8004a86:	ed59 3a04 	vldr	s7, [r9, #-16]
 8004a8a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8004a8e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8004a92:	ed59 6a03 	vldr	s13, [r9, #-12]
 8004a96:	ee34 4a61 	vsub.f32	s8, s8, s3
 8004a9a:	ee36 6a41 	vsub.f32	s12, s12, s2
 8004a9e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8004aa2:	ee66 9a26 	vmul.f32	s19, s12, s13
 8004aa6:	ee24 9a23 	vmul.f32	s18, s8, s7
 8004aaa:	ee26 6a23 	vmul.f32	s12, s12, s7
 8004aae:	ee24 4a26 	vmul.f32	s8, s8, s13
 8004ab2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004ab6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8004aba:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8004abe:	ee36 6a44 	vsub.f32	s12, s12, s8
 8004ac2:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004ac6:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8004aca:	ee79 3a29 	vadd.f32	s7, s18, s19
 8004ace:	ee75 6a60 	vsub.f32	s13, s10, s1
 8004ad2:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8004ad6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004ada:	ed45 3a02 	vstr	s7, [r5, #-8]
 8004ade:	ed05 6a01 	vstr	s12, [r5, #-4]
 8004ae2:	ed84 7a01 	vstr	s14, [r4, #4]
 8004ae6:	ed84 4a02 	vstr	s8, [r4, #8]
 8004aea:	ee35 6a81 	vadd.f32	s12, s11, s2
 8004aee:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8004af2:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8004af6:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8004afa:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004afe:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8004b02:	ee67 2a26 	vmul.f32	s5, s14, s13
 8004b06:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8004b0a:	ee26 5a25 	vmul.f32	s10, s12, s11
 8004b0e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004b12:	ee26 6a26 	vmul.f32	s12, s12, s13
 8004b16:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004b1a:	ee63 6a26 	vmul.f32	s13, s6, s13
 8004b1e:	ee23 3a25 	vmul.f32	s6, s6, s11
 8004b22:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004b26:	ee75 5a24 	vadd.f32	s11, s10, s9
 8004b2a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8004b2e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004b32:	f1bb 0b01 	subs.w	fp, fp, #1
 8004b36:	ed42 5a02 	vstr	s11, [r2, #-8]
 8004b3a:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004b3e:	f10e 0e08 	add.w	lr, lr, #8
 8004b42:	ed83 3a02 	vstr	s6, [r3, #8]
 8004b46:	ed83 7a01 	vstr	s14, [r3, #4]
 8004b4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8004b4e:	f10a 0a08 	add.w	sl, sl, #8
 8004b52:	f100 0008 	add.w	r0, r0, #8
 8004b56:	f1a1 0108 	sub.w	r1, r1, #8
 8004b5a:	f109 0910 	add.w	r9, r9, #16
 8004b5e:	f105 0508 	add.w	r5, r5, #8
 8004b62:	f1a4 0408 	sub.w	r4, r4, #8
 8004b66:	f108 0818 	add.w	r8, r8, #24
 8004b6a:	f102 0208 	add.w	r2, r2, #8
 8004b6e:	f1a3 0308 	sub.w	r3, r3, #8
 8004b72:	f47f aefc 	bne.w	800496e <arm_cfft_radix8by4_f32+0x12e>
 8004b76:	9907      	ldr	r1, [sp, #28]
 8004b78:	9800      	ldr	r0, [sp, #0]
 8004b7a:	00cb      	lsls	r3, r1, #3
 8004b7c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004b80:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004b84:	9100      	str	r1, [sp, #0]
 8004b86:	9904      	ldr	r1, [sp, #16]
 8004b88:	4419      	add	r1, r3
 8004b8a:	9104      	str	r1, [sp, #16]
 8004b8c:	9903      	ldr	r1, [sp, #12]
 8004b8e:	4419      	add	r1, r3
 8004b90:	9103      	str	r1, [sp, #12]
 8004b92:	9906      	ldr	r1, [sp, #24]
 8004b94:	4419      	add	r1, r3
 8004b96:	9106      	str	r1, [sp, #24]
 8004b98:	9905      	ldr	r1, [sp, #20]
 8004b9a:	441f      	add	r7, r3
 8004b9c:	4419      	add	r1, r3
 8004b9e:	9b02      	ldr	r3, [sp, #8]
 8004ba0:	9105      	str	r1, [sp, #20]
 8004ba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ba6:	9302      	str	r3, [sp, #8]
 8004ba8:	9904      	ldr	r1, [sp, #16]
 8004baa:	9805      	ldr	r0, [sp, #20]
 8004bac:	ed91 4a00 	vldr	s8, [r1]
 8004bb0:	edd0 6a00 	vldr	s13, [r0]
 8004bb4:	9b06      	ldr	r3, [sp, #24]
 8004bb6:	ed97 3a00 	vldr	s6, [r7]
 8004bba:	edd3 7a00 	vldr	s15, [r3]
 8004bbe:	edd0 4a01 	vldr	s9, [r0, #4]
 8004bc2:	edd1 3a01 	vldr	s7, [r1, #4]
 8004bc6:	ed97 2a01 	vldr	s4, [r7, #4]
 8004bca:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bce:	9a03      	ldr	r2, [sp, #12]
 8004bd0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8004bd4:	ee34 6a26 	vadd.f32	s12, s8, s13
 8004bd8:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8004bdc:	ee37 5a86 	vadd.f32	s10, s15, s12
 8004be0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004be4:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004be8:	ee74 6a66 	vsub.f32	s13, s8, s13
 8004bec:	ed81 5a00 	vstr	s10, [r1]
 8004bf0:	ed93 5a01 	vldr	s10, [r3, #4]
 8004bf4:	edd7 4a01 	vldr	s9, [r7, #4]
 8004bf8:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004bfc:	ee37 4a26 	vadd.f32	s8, s14, s13
 8004c00:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004c04:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8004c08:	ed81 5a01 	vstr	s10, [r1, #4]
 8004c0c:	edd2 1a00 	vldr	s3, [r2]
 8004c10:	edd2 2a01 	vldr	s5, [r2, #4]
 8004c14:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004c18:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004c1c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004c20:	ee64 4a21 	vmul.f32	s9, s8, s3
 8004c24:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004c28:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004c2c:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004c30:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004c34:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004c38:	edc3 2a00 	vstr	s5, [r3]
 8004c3c:	ed83 5a01 	vstr	s10, [r3, #4]
 8004c40:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8004c44:	9b00      	ldr	r3, [sp, #0]
 8004c46:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004c4a:	ed93 4a01 	vldr	s8, [r3, #4]
 8004c4e:	ed93 5a00 	vldr	s10, [r3]
 8004c52:	9b02      	ldr	r3, [sp, #8]
 8004c54:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004c58:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004c5c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004c60:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004c64:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004c68:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004c6c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8004c70:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004c74:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004c78:	ed80 6a01 	vstr	s12, [r0, #4]
 8004c7c:	edc0 5a00 	vstr	s11, [r0]
 8004c80:	edd3 5a01 	vldr	s11, [r3, #4]
 8004c84:	edd3 6a00 	vldr	s13, [r3]
 8004c88:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004c8c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8004c90:	ee27 6a26 	vmul.f32	s12, s14, s13
 8004c94:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004c98:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004c9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004ca0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004ca4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004ca8:	ed87 7a01 	vstr	s14, [r7, #4]
 8004cac:	edc7 7a00 	vstr	s15, [r7]
 8004cb0:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	686a      	ldr	r2, [r5, #4]
 8004cb8:	2304      	movs	r3, #4
 8004cba:	f000 fa19 	bl	80050f0 <arm_radix8_butterfly_f32>
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	686a      	ldr	r2, [r5, #4]
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f000 fa13 	bl	80050f0 <arm_radix8_butterfly_f32>
 8004cca:	9808      	ldr	r0, [sp, #32]
 8004ccc:	686a      	ldr	r2, [r5, #4]
 8004cce:	4621      	mov	r1, r4
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	f000 fa0d 	bl	80050f0 <arm_radix8_butterfly_f32>
 8004cd6:	686a      	ldr	r2, [r5, #4]
 8004cd8:	9801      	ldr	r0, [sp, #4]
 8004cda:	4621      	mov	r1, r4
 8004cdc:	2304      	movs	r3, #4
 8004cde:	b00d      	add	sp, #52	; 0x34
 8004ce0:	ecbd 8b0a 	vpop	{d8-d12}
 8004ce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	f000 ba02 	b.w	80050f0 <arm_radix8_butterfly_f32>

08004cec <arm_cfft_f32>:
 8004cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf0:	2a01      	cmp	r2, #1
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	4617      	mov	r7, r2
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4698      	mov	r8, r3
 8004cfa:	8805      	ldrh	r5, [r0, #0]
 8004cfc:	d056      	beq.n	8004dac <arm_cfft_f32+0xc0>
 8004cfe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004d02:	d063      	beq.n	8004dcc <arm_cfft_f32+0xe0>
 8004d04:	d916      	bls.n	8004d34 <arm_cfft_f32+0x48>
 8004d06:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004d0a:	d01a      	beq.n	8004d42 <arm_cfft_f32+0x56>
 8004d0c:	d947      	bls.n	8004d9e <arm_cfft_f32+0xb2>
 8004d0e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004d12:	d05b      	beq.n	8004dcc <arm_cfft_f32+0xe0>
 8004d14:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004d18:	d105      	bne.n	8004d26 <arm_cfft_f32+0x3a>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	6872      	ldr	r2, [r6, #4]
 8004d1e:	4629      	mov	r1, r5
 8004d20:	4620      	mov	r0, r4
 8004d22:	f000 f9e5 	bl	80050f0 <arm_radix8_butterfly_f32>
 8004d26:	f1b8 0f00 	cmp.w	r8, #0
 8004d2a:	d111      	bne.n	8004d50 <arm_cfft_f32+0x64>
 8004d2c:	2f01      	cmp	r7, #1
 8004d2e:	d016      	beq.n	8004d5e <arm_cfft_f32+0x72>
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d34:	2d20      	cmp	r5, #32
 8004d36:	d049      	beq.n	8004dcc <arm_cfft_f32+0xe0>
 8004d38:	d935      	bls.n	8004da6 <arm_cfft_f32+0xba>
 8004d3a:	2d40      	cmp	r5, #64	; 0x40
 8004d3c:	d0ed      	beq.n	8004d1a <arm_cfft_f32+0x2e>
 8004d3e:	2d80      	cmp	r5, #128	; 0x80
 8004d40:	d1f1      	bne.n	8004d26 <arm_cfft_f32+0x3a>
 8004d42:	4621      	mov	r1, r4
 8004d44:	4630      	mov	r0, r6
 8004d46:	f7ff fcab 	bl	80046a0 <arm_cfft_radix8by2_f32>
 8004d4a:	f1b8 0f00 	cmp.w	r8, #0
 8004d4e:	d0ed      	beq.n	8004d2c <arm_cfft_f32+0x40>
 8004d50:	68b2      	ldr	r2, [r6, #8]
 8004d52:	89b1      	ldrh	r1, [r6, #12]
 8004d54:	4620      	mov	r0, r4
 8004d56:	f000 f841 	bl	8004ddc <arm_bitreversal_32>
 8004d5a:	2f01      	cmp	r7, #1
 8004d5c:	d1e8      	bne.n	8004d30 <arm_cfft_f32+0x44>
 8004d5e:	ee07 5a90 	vmov	s15, r5
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	d0de      	beq.n	8004d30 <arm_cfft_f32+0x44>
 8004d72:	f104 0108 	add.w	r1, r4, #8
 8004d76:	2300      	movs	r3, #0
 8004d78:	3301      	adds	r3, #1
 8004d7a:	429d      	cmp	r5, r3
 8004d7c:	f101 0108 	add.w	r1, r1, #8
 8004d80:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004d84:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004d88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004d8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004d90:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004d94:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004d98:	d1ee      	bne.n	8004d78 <arm_cfft_f32+0x8c>
 8004d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d9e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004da2:	d0ba      	beq.n	8004d1a <arm_cfft_f32+0x2e>
 8004da4:	e7bf      	b.n	8004d26 <arm_cfft_f32+0x3a>
 8004da6:	2d10      	cmp	r5, #16
 8004da8:	d0cb      	beq.n	8004d42 <arm_cfft_f32+0x56>
 8004daa:	e7bc      	b.n	8004d26 <arm_cfft_f32+0x3a>
 8004dac:	b19d      	cbz	r5, 8004dd6 <arm_cfft_f32+0xea>
 8004dae:	f101 030c 	add.w	r3, r1, #12
 8004db2:	2200      	movs	r2, #0
 8004db4:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004db8:	3201      	adds	r2, #1
 8004dba:	eef1 7a67 	vneg.f32	s15, s15
 8004dbe:	4295      	cmp	r5, r2
 8004dc0:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004dc4:	f103 0308 	add.w	r3, r3, #8
 8004dc8:	d1f4      	bne.n	8004db4 <arm_cfft_f32+0xc8>
 8004dca:	e798      	b.n	8004cfe <arm_cfft_f32+0x12>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f7ff fd36 	bl	8004840 <arm_cfft_radix8by4_f32>
 8004dd4:	e7a7      	b.n	8004d26 <arm_cfft_f32+0x3a>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0aa      	beq.n	8004d30 <arm_cfft_f32+0x44>
 8004dda:	e7b9      	b.n	8004d50 <arm_cfft_f32+0x64>

08004ddc <arm_bitreversal_32>:
 8004ddc:	b1e9      	cbz	r1, 8004e1a <arm_bitreversal_32+0x3e>
 8004dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de0:	2500      	movs	r5, #0
 8004de2:	f102 0e02 	add.w	lr, r2, #2
 8004de6:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8004dea:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8004dee:	08a4      	lsrs	r4, r4, #2
 8004df0:	089b      	lsrs	r3, r3, #2
 8004df2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8004df6:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8004dfa:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8004dfe:	00a6      	lsls	r6, r4, #2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8004e06:	3304      	adds	r3, #4
 8004e08:	1d34      	adds	r4, r6, #4
 8004e0a:	3502      	adds	r5, #2
 8004e0c:	58c6      	ldr	r6, [r0, r3]
 8004e0e:	5907      	ldr	r7, [r0, r4]
 8004e10:	50c7      	str	r7, [r0, r3]
 8004e12:	428d      	cmp	r5, r1
 8004e14:	5106      	str	r6, [r0, r4]
 8004e16:	d3e6      	bcc.n	8004de6 <arm_bitreversal_32+0xa>
 8004e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1a:	4770      	bx	lr

08004e1c <arm_cmplx_mag_f32>:
 8004e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e20:	ed2d 8b02 	vpush	{d8}
 8004e24:	0897      	lsrs	r7, r2, #2
 8004e26:	b084      	sub	sp, #16
 8004e28:	d077      	beq.n	8004f1a <arm_cmplx_mag_f32+0xfe>
 8004e2a:	f04f 0800 	mov.w	r8, #0
 8004e2e:	f100 0420 	add.w	r4, r0, #32
 8004e32:	f101 0510 	add.w	r5, r1, #16
 8004e36:	463e      	mov	r6, r7
 8004e38:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8004e3c:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8004e40:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004e44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004e4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e54:	f2c0 80c5 	blt.w	8004fe2 <arm_cmplx_mag_f32+0x1c6>
 8004e58:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e60:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004e64:	f100 80cb 	bmi.w	8004ffe <arm_cmplx_mag_f32+0x1e2>
 8004e68:	ed05 8a04 	vstr	s16, [r5, #-16]
 8004e6c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8004e70:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8004e74:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004e78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004e80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e88:	f2c0 80a8 	blt.w	8004fdc <arm_cmplx_mag_f32+0x1c0>
 8004e8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004e98:	f100 80a8 	bmi.w	8004fec <arm_cmplx_mag_f32+0x1d0>
 8004e9c:	ed05 8a03 	vstr	s16, [r5, #-12]
 8004ea0:	ed14 0a04 	vldr	s0, [r4, #-16]
 8004ea4:	ed54 7a03 	vldr	s15, [r4, #-12]
 8004ea8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004eac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004eb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004eb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebc:	f2c0 808b 	blt.w	8004fd6 <arm_cmplx_mag_f32+0x1ba>
 8004ec0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004ecc:	f100 80a9 	bmi.w	8005022 <arm_cmplx_mag_f32+0x206>
 8004ed0:	ed05 8a02 	vstr	s16, [r5, #-8]
 8004ed4:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004ed8:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004edc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004ee0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ee4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004ee8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef0:	db6e      	blt.n	8004fd0 <arm_cmplx_mag_f32+0x1b4>
 8004ef2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efa:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004efe:	f100 8087 	bmi.w	8005010 <arm_cmplx_mag_f32+0x1f4>
 8004f02:	ed05 8a01 	vstr	s16, [r5, #-4]
 8004f06:	3e01      	subs	r6, #1
 8004f08:	f104 0420 	add.w	r4, r4, #32
 8004f0c:	f105 0510 	add.w	r5, r5, #16
 8004f10:	d192      	bne.n	8004e38 <arm_cmplx_mag_f32+0x1c>
 8004f12:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8004f16:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8004f1a:	f012 0203 	ands.w	r2, r2, #3
 8004f1e:	d052      	beq.n	8004fc6 <arm_cmplx_mag_f32+0x1aa>
 8004f20:	ed90 0a00 	vldr	s0, [r0]
 8004f24:	edd0 7a01 	vldr	s15, [r0, #4]
 8004f28:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004f2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f30:	2300      	movs	r3, #0
 8004f32:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004f36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3e:	bfb8      	it	lt
 8004f40:	600b      	strlt	r3, [r1, #0]
 8004f42:	db08      	blt.n	8004f56 <arm_cmplx_mag_f32+0x13a>
 8004f44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004f50:	d479      	bmi.n	8005046 <arm_cmplx_mag_f32+0x22a>
 8004f52:	ed81 8a00 	vstr	s16, [r1]
 8004f56:	3a01      	subs	r2, #1
 8004f58:	d035      	beq.n	8004fc6 <arm_cmplx_mag_f32+0x1aa>
 8004f5a:	ed90 0a02 	vldr	s0, [r0, #8]
 8004f5e:	edd0 7a03 	vldr	s15, [r0, #12]
 8004f62:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004f66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004f70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f78:	bfb8      	it	lt
 8004f7a:	604b      	strlt	r3, [r1, #4]
 8004f7c:	db08      	blt.n	8004f90 <arm_cmplx_mag_f32+0x174>
 8004f7e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f86:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004f8a:	d453      	bmi.n	8005034 <arm_cmplx_mag_f32+0x218>
 8004f8c:	ed81 8a01 	vstr	s16, [r1, #4]
 8004f90:	2a01      	cmp	r2, #1
 8004f92:	d018      	beq.n	8004fc6 <arm_cmplx_mag_f32+0x1aa>
 8004f94:	ed90 0a04 	vldr	s0, [r0, #16]
 8004f98:	edd0 7a05 	vldr	s15, [r0, #20]
 8004f9c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004fa0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004faa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	db19      	blt.n	8004fe8 <arm_cmplx_mag_f32+0x1cc>
 8004fb4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fbc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004fc0:	d44a      	bmi.n	8005058 <arm_cmplx_mag_f32+0x23c>
 8004fc2:	ed81 8a02 	vstr	s16, [r1, #8]
 8004fc6:	b004      	add	sp, #16
 8004fc8:	ecbd 8b02 	vpop	{d8}
 8004fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd0:	f845 8c04 	str.w	r8, [r5, #-4]
 8004fd4:	e797      	b.n	8004f06 <arm_cmplx_mag_f32+0xea>
 8004fd6:	f845 8c08 	str.w	r8, [r5, #-8]
 8004fda:	e77b      	b.n	8004ed4 <arm_cmplx_mag_f32+0xb8>
 8004fdc:	f845 8c0c 	str.w	r8, [r5, #-12]
 8004fe0:	e75e      	b.n	8004ea0 <arm_cmplx_mag_f32+0x84>
 8004fe2:	f845 8c10 	str.w	r8, [r5, #-16]
 8004fe6:	e741      	b.n	8004e6c <arm_cmplx_mag_f32+0x50>
 8004fe8:	608b      	str	r3, [r1, #8]
 8004fea:	e7ec      	b.n	8004fc6 <arm_cmplx_mag_f32+0x1aa>
 8004fec:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004ff0:	9001      	str	r0, [sp, #4]
 8004ff2:	f000 fb3d 	bl	8005670 <sqrtf>
 8004ff6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004ffa:	9801      	ldr	r0, [sp, #4]
 8004ffc:	e74e      	b.n	8004e9c <arm_cmplx_mag_f32+0x80>
 8004ffe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005002:	9001      	str	r0, [sp, #4]
 8005004:	f000 fb34 	bl	8005670 <sqrtf>
 8005008:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800500c:	9801      	ldr	r0, [sp, #4]
 800500e:	e72b      	b.n	8004e68 <arm_cmplx_mag_f32+0x4c>
 8005010:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005014:	9001      	str	r0, [sp, #4]
 8005016:	f000 fb2b 	bl	8005670 <sqrtf>
 800501a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800501e:	9801      	ldr	r0, [sp, #4]
 8005020:	e76f      	b.n	8004f02 <arm_cmplx_mag_f32+0xe6>
 8005022:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005026:	9001      	str	r0, [sp, #4]
 8005028:	f000 fb22 	bl	8005670 <sqrtf>
 800502c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005030:	9801      	ldr	r0, [sp, #4]
 8005032:	e74d      	b.n	8004ed0 <arm_cmplx_mag_f32+0xb4>
 8005034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005038:	9201      	str	r2, [sp, #4]
 800503a:	f000 fb19 	bl	8005670 <sqrtf>
 800503e:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8005042:	9903      	ldr	r1, [sp, #12]
 8005044:	e7a2      	b.n	8004f8c <arm_cmplx_mag_f32+0x170>
 8005046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800504a:	9201      	str	r2, [sp, #4]
 800504c:	f000 fb10 	bl	8005670 <sqrtf>
 8005050:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8005054:	9903      	ldr	r1, [sp, #12]
 8005056:	e77c      	b.n	8004f52 <arm_cmplx_mag_f32+0x136>
 8005058:	9101      	str	r1, [sp, #4]
 800505a:	f000 fb09 	bl	8005670 <sqrtf>
 800505e:	9901      	ldr	r1, [sp, #4]
 8005060:	e7af      	b.n	8004fc2 <arm_cmplx_mag_f32+0x1a6>
 8005062:	bf00      	nop

08005064 <arm_sin_f32>:
 8005064:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80050e4 <arm_sin_f32+0x80>
 8005068:	ee20 0a27 	vmul.f32	s0, s0, s15
 800506c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005074:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005078:	d504      	bpl.n	8005084 <arm_sin_f32+0x20>
 800507a:	ee17 3a90 	vmov	r3, s15
 800507e:	3b01      	subs	r3, #1
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005088:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80050e8 <arm_sin_f32+0x84>
 800508c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005090:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005094:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005098:	ee17 3a90 	vmov	r3, s15
 800509c:	b29b      	uxth	r3, r3
 800509e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a2:	d21a      	bcs.n	80050da <arm_sin_f32+0x76>
 80050a4:	ee07 3a90 	vmov	s15, r3
 80050a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ac:	1c59      	adds	r1, r3, #1
 80050ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80050b2:	4a0e      	ldr	r2, [pc, #56]	; (80050ec <arm_sin_f32+0x88>)
 80050b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80050b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80050bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80050c0:	ed93 7a00 	vldr	s14, [r3]
 80050c4:	edd2 6a00 	vldr	s13, [r2]
 80050c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80050cc:	ee20 0a26 	vmul.f32	s0, s0, s13
 80050d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80050d8:	4770      	bx	lr
 80050da:	ee30 0a47 	vsub.f32	s0, s0, s14
 80050de:	2101      	movs	r1, #1
 80050e0:	2300      	movs	r3, #0
 80050e2:	e7e6      	b.n	80050b2 <arm_sin_f32+0x4e>
 80050e4:	3e22f983 	.word	0x3e22f983
 80050e8:	44000000 	.word	0x44000000
 80050ec:	08008c60 	.word	0x08008c60

080050f0 <arm_radix8_butterfly_f32>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	ed2d 8b10 	vpush	{d8-d15}
 80050f8:	b095      	sub	sp, #84	; 0x54
 80050fa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80050fe:	4603      	mov	r3, r0
 8005100:	3304      	adds	r3, #4
 8005102:	ed9f bab9 	vldr	s22, [pc, #740]	; 80053e8 <arm_radix8_butterfly_f32+0x2f8>
 8005106:	9012      	str	r0, [sp, #72]	; 0x48
 8005108:	468b      	mov	fp, r1
 800510a:	9313      	str	r3, [sp, #76]	; 0x4c
 800510c:	4689      	mov	r9, r1
 800510e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8005112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005114:	960f      	str	r6, [sp, #60]	; 0x3c
 8005116:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800511a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800511e:	eb03 0508 	add.w	r5, r3, r8
 8005122:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8005126:	eb05 040e 	add.w	r4, r5, lr
 800512a:	0137      	lsls	r7, r6, #4
 800512c:	eba6 030a 	sub.w	r3, r6, sl
 8005130:	eb04 000e 	add.w	r0, r4, lr
 8005134:	44b2      	add	sl, r6
 8005136:	1d3a      	adds	r2, r7, #4
 8005138:	9702      	str	r7, [sp, #8]
 800513a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800513e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8005142:	ebae 0c06 	sub.w	ip, lr, r6
 8005146:	9703      	str	r7, [sp, #12]
 8005148:	eb03 0708 	add.w	r7, r3, r8
 800514c:	9701      	str	r7, [sp, #4]
 800514e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8005152:	9706      	str	r7, [sp, #24]
 8005154:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005156:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800515a:	f10e 0104 	add.w	r1, lr, #4
 800515e:	4439      	add	r1, r7
 8005160:	443a      	add	r2, r7
 8005162:	0137      	lsls	r7, r6, #4
 8005164:	00f6      	lsls	r6, r6, #3
 8005166:	9704      	str	r7, [sp, #16]
 8005168:	9605      	str	r6, [sp, #20]
 800516a:	9f01      	ldr	r7, [sp, #4]
 800516c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800516e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8005172:	f04f 0c00 	mov.w	ip, #0
 8005176:	edd4 6a00 	vldr	s13, [r4]
 800517a:	edd7 1a00 	vldr	s3, [r7]
 800517e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8005182:	edd5 5a00 	vldr	s11, [r5]
 8005186:	ed52 9a01 	vldr	s19, [r2, #-4]
 800518a:	ed90 6a00 	vldr	s12, [r0]
 800518e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005192:	ed93 3a00 	vldr	s6, [r3]
 8005196:	ee39 0a86 	vadd.f32	s0, s19, s12
 800519a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800519e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80051a2:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80051a6:	ee35 7a02 	vadd.f32	s14, s10, s4
 80051aa:	ee34 4a80 	vadd.f32	s8, s9, s0
 80051ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80051b2:	ee74 6a07 	vadd.f32	s13, s8, s14
 80051b6:	ee34 4a47 	vsub.f32	s8, s8, s14
 80051ba:	ed46 6a01 	vstr	s13, [r6, #-4]
 80051be:	ed85 4a00 	vstr	s8, [r5]
 80051c2:	edd1 6a00 	vldr	s13, [r1]
 80051c6:	ed94 9a01 	vldr	s18, [r4, #4]
 80051ca:	edd3 2a01 	vldr	s5, [r3, #4]
 80051ce:	edd7 8a01 	vldr	s17, [r7, #4]
 80051d2:	edd6 0a00 	vldr	s1, [r6]
 80051d6:	edd5 3a01 	vldr	s7, [r5, #4]
 80051da:	ed90 8a01 	vldr	s16, [r0, #4]
 80051de:	ed92 7a00 	vldr	s14, [r2]
 80051e2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80051e6:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80051ea:	ee72 aae8 	vsub.f32	s21, s5, s17
 80051ee:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80051f2:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80051f6:	ee77 7a83 	vadd.f32	s15, s15, s6
 80051fa:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80051fe:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8005202:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8005206:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800520a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800520e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8005212:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8005216:	ee37 7a48 	vsub.f32	s14, s14, s16
 800521a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800521e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8005222:	ee76 6a89 	vadd.f32	s13, s13, s18
 8005226:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800522a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800522e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005232:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005236:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800523a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800523e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005242:	ee33 3a60 	vsub.f32	s6, s6, s1
 8005246:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800524a:	ee77 0a01 	vadd.f32	s1, s14, s2
 800524e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8005252:	ee37 7a41 	vsub.f32	s14, s14, s2
 8005256:	ee73 1a84 	vadd.f32	s3, s7, s8
 800525a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800525e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8005262:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005266:	ee32 8a00 	vadd.f32	s16, s4, s0
 800526a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800526e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8005272:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005276:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800527a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800527e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8005282:	ee34 6a67 	vsub.f32	s12, s8, s15
 8005286:	ee75 4a87 	vadd.f32	s9, s11, s14
 800528a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800528e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8005292:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005296:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800529a:	44dc      	add	ip, fp
 800529c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80052a0:	45e1      	cmp	r9, ip
 80052a2:	ed86 8a00 	vstr	s16, [r6]
 80052a6:	ed85 2a01 	vstr	s4, [r5, #4]
 80052aa:	4456      	add	r6, sl
 80052ac:	ed02 0a01 	vstr	s0, [r2, #-4]
 80052b0:	4455      	add	r5, sl
 80052b2:	edc0 6a00 	vstr	s13, [r0]
 80052b6:	ed82 1a00 	vstr	s2, [r2]
 80052ba:	ed80 5a01 	vstr	s10, [r0, #4]
 80052be:	4452      	add	r2, sl
 80052c0:	ed01 3a01 	vstr	s6, [r1, #-4]
 80052c4:	4450      	add	r0, sl
 80052c6:	edc7 2a00 	vstr	s5, [r7]
 80052ca:	edc4 4a00 	vstr	s9, [r4]
 80052ce:	ed83 7a00 	vstr	s14, [r3]
 80052d2:	edc1 5a00 	vstr	s11, [r1]
 80052d6:	edc7 3a01 	vstr	s7, [r7, #4]
 80052da:	4451      	add	r1, sl
 80052dc:	ed84 6a01 	vstr	s12, [r4, #4]
 80052e0:	4457      	add	r7, sl
 80052e2:	edc3 7a01 	vstr	s15, [r3, #4]
 80052e6:	4454      	add	r4, sl
 80052e8:	4453      	add	r3, sl
 80052ea:	f63f af44 	bhi.w	8005176 <arm_radix8_butterfly_f32+0x86>
 80052ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052f0:	2b07      	cmp	r3, #7
 80052f2:	f240 81b7 	bls.w	8005664 <arm_radix8_butterfly_f32+0x574>
 80052f6:	9b06      	ldr	r3, [sp, #24]
 80052f8:	9903      	ldr	r1, [sp, #12]
 80052fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80052fc:	9e05      	ldr	r6, [sp, #20]
 80052fe:	9a04      	ldr	r2, [sp, #16]
 8005300:	f103 0c08 	add.w	ip, r3, #8
 8005304:	9b02      	ldr	r3, [sp, #8]
 8005306:	3108      	adds	r1, #8
 8005308:	f108 0808 	add.w	r8, r8, #8
 800530c:	1841      	adds	r1, r0, r1
 800530e:	3608      	adds	r6, #8
 8005310:	330c      	adds	r3, #12
 8005312:	4604      	mov	r4, r0
 8005314:	4444      	add	r4, r8
 8005316:	18c3      	adds	r3, r0, r3
 8005318:	9109      	str	r1, [sp, #36]	; 0x24
 800531a:	1981      	adds	r1, r0, r6
 800531c:	f10e 0e08 	add.w	lr, lr, #8
 8005320:	3208      	adds	r2, #8
 8005322:	940b      	str	r4, [sp, #44]	; 0x2c
 8005324:	9107      	str	r1, [sp, #28]
 8005326:	4604      	mov	r4, r0
 8005328:	4601      	mov	r1, r0
 800532a:	9304      	str	r3, [sp, #16]
 800532c:	f100 030c 	add.w	r3, r0, #12
 8005330:	4474      	add	r4, lr
 8005332:	f04f 0801 	mov.w	r8, #1
 8005336:	1882      	adds	r2, r0, r2
 8005338:	4461      	add	r1, ip
 800533a:	9305      	str	r3, [sp, #20]
 800533c:	464b      	mov	r3, r9
 800533e:	940a      	str	r4, [sp, #40]	; 0x28
 8005340:	46c1      	mov	r9, r8
 8005342:	9208      	str	r2, [sp, #32]
 8005344:	46d8      	mov	r8, fp
 8005346:	9106      	str	r1, [sp, #24]
 8005348:	f04f 0e00 	mov.w	lr, #0
 800534c:	469b      	mov	fp, r3
 800534e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005350:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005352:	449e      	add	lr, r3
 8005354:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8005358:	441a      	add	r2, r3
 800535a:	920e      	str	r2, [sp, #56]	; 0x38
 800535c:	441a      	add	r2, r3
 800535e:	18d4      	adds	r4, r2, r3
 8005360:	18e5      	adds	r5, r4, r3
 8005362:	18ee      	adds	r6, r5, r3
 8005364:	18f7      	adds	r7, r6, r3
 8005366:	eb07 0c03 	add.w	ip, r7, r3
 800536a:	920d      	str	r2, [sp, #52]	; 0x34
 800536c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8005370:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8005374:	910c      	str	r1, [sp, #48]	; 0x30
 8005376:	4419      	add	r1, r3
 8005378:	9103      	str	r1, [sp, #12]
 800537a:	4419      	add	r1, r3
 800537c:	18ca      	adds	r2, r1, r3
 800537e:	9202      	str	r2, [sp, #8]
 8005380:	441a      	add	r2, r3
 8005382:	18d0      	adds	r0, r2, r3
 8005384:	ed92 ea01 	vldr	s28, [r2, #4]
 8005388:	9a02      	ldr	r2, [sp, #8]
 800538a:	edd4 7a00 	vldr	s15, [r4]
 800538e:	edd2 da01 	vldr	s27, [r2, #4]
 8005392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005394:	ed91 da01 	vldr	s26, [r1, #4]
 8005398:	ed92 ca01 	vldr	s24, [r2, #4]
 800539c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800539e:	9903      	ldr	r1, [sp, #12]
 80053a0:	edcd 7a03 	vstr	s15, [sp, #12]
 80053a4:	edd2 7a00 	vldr	s15, [r2]
 80053a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053aa:	edcd 7a02 	vstr	s15, [sp, #8]
 80053ae:	edd2 7a00 	vldr	s15, [r2]
 80053b2:	edd0 ea01 	vldr	s29, [r0, #4]
 80053b6:	edd1 ca01 	vldr	s25, [r1, #4]
 80053ba:	eddc ba00 	vldr	s23, [ip]
 80053be:	edd7 aa00 	vldr	s21, [r7]
 80053c2:	ed96 aa00 	vldr	s20, [r6]
 80053c6:	edd5 9a00 	vldr	s19, [r5]
 80053ca:	edcd 7a01 	vstr	s15, [sp, #4]
 80053ce:	4403      	add	r3, r0
 80053d0:	ed93 fa01 	vldr	s30, [r3, #4]
 80053d4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80053d8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80053dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80053e4:	46cc      	mov	ip, r9
 80053e6:	e001      	b.n	80053ec <arm_radix8_butterfly_f32+0x2fc>
 80053e8:	3f3504f3 	.word	0x3f3504f3
 80053ec:	ed91 6a00 	vldr	s12, [r1]
 80053f0:	ed93 5a00 	vldr	s10, [r3]
 80053f4:	edd0 fa00 	vldr	s31, [r0]
 80053f8:	edd4 7a00 	vldr	s15, [r4]
 80053fc:	ed95 7a00 	vldr	s14, [r5]
 8005400:	ed56 3a01 	vldr	s7, [r6, #-4]
 8005404:	ed17 3a01 	vldr	s6, [r7, #-4]
 8005408:	ed92 2a00 	vldr	s4, [r2]
 800540c:	ed96 0a00 	vldr	s0, [r6]
 8005410:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005414:	ee32 1a06 	vadd.f32	s2, s4, s12
 8005418:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800541c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005420:	ee78 1a04 	vadd.f32	s3, s16, s8
 8005424:	ee71 6a24 	vadd.f32	s13, s2, s9
 8005428:	ee32 2a46 	vsub.f32	s4, s4, s12
 800542c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005430:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005434:	ed06 6a01 	vstr	s12, [r6, #-4]
 8005438:	edd4 8a01 	vldr	s17, [r4, #4]
 800543c:	ed92 9a01 	vldr	s18, [r2, #4]
 8005440:	edd7 0a00 	vldr	s1, [r7]
 8005444:	edd1 2a01 	vldr	s5, [r1, #4]
 8005448:	ed95 7a01 	vldr	s14, [r5, #4]
 800544c:	ed93 6a01 	vldr	s12, [r3, #4]
 8005450:	edd0 5a01 	vldr	s11, [r0, #4]
 8005454:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005458:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800545c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005460:	ee78 fac7 	vsub.f32	s31, s17, s14
 8005464:	ee38 4a44 	vsub.f32	s8, s16, s8
 8005468:	ee38 7a87 	vadd.f32	s14, s17, s14
 800546c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8005470:	ee79 2a22 	vadd.f32	s5, s18, s5
 8005474:	ee32 9a27 	vadd.f32	s18, s4, s15
 8005478:	ee72 7a67 	vsub.f32	s15, s4, s15
 800547c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8005480:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8005484:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005488:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800548c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8005490:	ee72 fa87 	vadd.f32	s31, s5, s14
 8005494:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005498:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800549c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80054a0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80054a4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80054a8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80054ac:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80054b0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80054b4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80054b8:	ee30 6a46 	vsub.f32	s12, s0, s12
 80054bc:	ee74 0a22 	vadd.f32	s1, s8, s5
 80054c0:	ee36 0a28 	vadd.f32	s0, s12, s17
 80054c4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80054c8:	ee36 6a68 	vsub.f32	s12, s12, s17
 80054cc:	ee32 4a64 	vsub.f32	s8, s4, s9
 80054d0:	ee73 8a09 	vadd.f32	s17, s6, s18
 80054d4:	ee74 4a82 	vadd.f32	s9, s9, s4
 80054d8:	ee33 9a49 	vsub.f32	s18, s6, s18
 80054dc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80054e0:	ee35 3a85 	vadd.f32	s6, s11, s10
 80054e4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80054e8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80054ec:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80054f0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80054f4:	ee30 7a68 	vsub.f32	s14, s0, s17
 80054f8:	ee35 8a03 	vadd.f32	s16, s10, s6
 80054fc:	ee38 0a80 	vadd.f32	s0, s17, s0
 8005500:	ee73 3a82 	vadd.f32	s7, s7, s4
 8005504:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8005508:	ed9d 2a01 	vldr	s4, [sp, #4]
 800550c:	eddd 1a02 	vldr	s3, [sp, #8]
 8005510:	ee35 5a43 	vsub.f32	s10, s10, s6
 8005514:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8005518:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800551c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8005520:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005524:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8005528:	ee76 5a49 	vsub.f32	s11, s12, s18
 800552c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8005530:	ee39 6a06 	vadd.f32	s12, s18, s12
 8005534:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8005538:	ee21 4a84 	vmul.f32	s8, s3, s8
 800553c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8005540:	ee22 7a07 	vmul.f32	s14, s4, s14
 8005544:	ee22 2a08 	vmul.f32	s4, s4, s16
 8005548:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800554c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8005550:	ee31 1a09 	vadd.f32	s2, s2, s18
 8005554:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8005558:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800555c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8005560:	ee37 7a48 	vsub.f32	s14, s14, s16
 8005564:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8005568:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800556c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8005570:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8005574:	ee38 2a89 	vadd.f32	s4, s17, s18
 8005578:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800557c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8005580:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8005584:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8005588:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800558c:	eddd 5a03 	vldr	s11, [sp, #12]
 8005590:	edc6 fa00 	vstr	s31, [r6]
 8005594:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8005598:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800559c:	ee30 0a45 	vsub.f32	s0, s0, s10
 80055a0:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80055a4:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80055a8:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80055ac:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80055b0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80055b4:	ee25 6a86 	vmul.f32	s12, s11, s12
 80055b8:	ee74 4a89 	vadd.f32	s9, s9, s18
 80055bc:	ee34 3a43 	vsub.f32	s6, s8, s6
 80055c0:	ee78 8a85 	vadd.f32	s17, s17, s10
 80055c4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80055c8:	44c4      	add	ip, r8
 80055ca:	45e3      	cmp	fp, ip
 80055cc:	edc3 3a00 	vstr	s7, [r3]
 80055d0:	edc3 6a01 	vstr	s13, [r3, #4]
 80055d4:	4456      	add	r6, sl
 80055d6:	ed07 1a01 	vstr	s2, [r7, #-4]
 80055da:	edc7 0a00 	vstr	s1, [r7]
 80055de:	4453      	add	r3, sl
 80055e0:	ed80 2a00 	vstr	s4, [r0]
 80055e4:	edc0 2a01 	vstr	s5, [r0, #4]
 80055e8:	4457      	add	r7, sl
 80055ea:	edc2 1a00 	vstr	s3, [r2]
 80055ee:	ed82 7a01 	vstr	s14, [r2, #4]
 80055f2:	4450      	add	r0, sl
 80055f4:	ed85 8a00 	vstr	s16, [r5]
 80055f8:	ed85 0a01 	vstr	s0, [r5, #4]
 80055fc:	4452      	add	r2, sl
 80055fe:	edc1 4a00 	vstr	s9, [r1]
 8005602:	4455      	add	r5, sl
 8005604:	ed81 3a01 	vstr	s6, [r1, #4]
 8005608:	edc4 8a00 	vstr	s17, [r4]
 800560c:	ed84 6a01 	vstr	s12, [r4, #4]
 8005610:	4451      	add	r1, sl
 8005612:	4454      	add	r4, sl
 8005614:	f63f aeea 	bhi.w	80053ec <arm_radix8_butterfly_f32+0x2fc>
 8005618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800561a:	3308      	adds	r3, #8
 800561c:	930b      	str	r3, [sp, #44]	; 0x2c
 800561e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005620:	3308      	adds	r3, #8
 8005622:	930a      	str	r3, [sp, #40]	; 0x28
 8005624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005626:	3308      	adds	r3, #8
 8005628:	9309      	str	r3, [sp, #36]	; 0x24
 800562a:	9b08      	ldr	r3, [sp, #32]
 800562c:	3308      	adds	r3, #8
 800562e:	9308      	str	r3, [sp, #32]
 8005630:	9b07      	ldr	r3, [sp, #28]
 8005632:	3308      	adds	r3, #8
 8005634:	9307      	str	r3, [sp, #28]
 8005636:	9b06      	ldr	r3, [sp, #24]
 8005638:	3308      	adds	r3, #8
 800563a:	9306      	str	r3, [sp, #24]
 800563c:	9b05      	ldr	r3, [sp, #20]
 800563e:	3308      	adds	r3, #8
 8005640:	9305      	str	r3, [sp, #20]
 8005642:	9b04      	ldr	r3, [sp, #16]
 8005644:	3308      	adds	r3, #8
 8005646:	9304      	str	r3, [sp, #16]
 8005648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800564a:	f109 0901 	add.w	r9, r9, #1
 800564e:	454b      	cmp	r3, r9
 8005650:	f47f ae7d 	bne.w	800534e <arm_radix8_butterfly_f32+0x25e>
 8005654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	b29b      	uxth	r3, r3
 800565a:	46d9      	mov	r9, fp
 800565c:	9310      	str	r3, [sp, #64]	; 0x40
 800565e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8005662:	e554      	b.n	800510e <arm_radix8_butterfly_f32+0x1e>
 8005664:	b015      	add	sp, #84	; 0x54
 8005666:	ecbd 8b10 	vpop	{d8-d15}
 800566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566e:	bf00      	nop

08005670 <sqrtf>:
 8005670:	b508      	push	{r3, lr}
 8005672:	ed2d 8b02 	vpush	{d8}
 8005676:	eeb0 8a40 	vmov.f32	s16, s0
 800567a:	f000 f817 	bl	80056ac <__ieee754_sqrtf>
 800567e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005686:	d60c      	bvs.n	80056a2 <sqrtf+0x32>
 8005688:	eddf 8a07 	vldr	s17, [pc, #28]	; 80056a8 <sqrtf+0x38>
 800568c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	d505      	bpl.n	80056a2 <sqrtf+0x32>
 8005696:	f000 f815 	bl	80056c4 <__errno>
 800569a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800569e:	2321      	movs	r3, #33	; 0x21
 80056a0:	6003      	str	r3, [r0, #0]
 80056a2:	ecbd 8b02 	vpop	{d8}
 80056a6:	bd08      	pop	{r3, pc}
 80056a8:	00000000 	.word	0x00000000

080056ac <__ieee754_sqrtf>:
 80056ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80056b0:	4770      	bx	lr

080056b2 <memset>:
 80056b2:	4402      	add	r2, r0
 80056b4:	4603      	mov	r3, r0
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d100      	bne.n	80056bc <memset+0xa>
 80056ba:	4770      	bx	lr
 80056bc:	f803 1b01 	strb.w	r1, [r3], #1
 80056c0:	e7f9      	b.n	80056b6 <memset+0x4>
	...

080056c4 <__errno>:
 80056c4:	4b01      	ldr	r3, [pc, #4]	; (80056cc <__errno+0x8>)
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	2000005c 	.word	0x2000005c

080056d0 <__libc_init_array>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4d0d      	ldr	r5, [pc, #52]	; (8005708 <__libc_init_array+0x38>)
 80056d4:	4c0d      	ldr	r4, [pc, #52]	; (800570c <__libc_init_array+0x3c>)
 80056d6:	1b64      	subs	r4, r4, r5
 80056d8:	10a4      	asrs	r4, r4, #2
 80056da:	2600      	movs	r6, #0
 80056dc:	42a6      	cmp	r6, r4
 80056de:	d109      	bne.n	80056f4 <__libc_init_array+0x24>
 80056e0:	4d0b      	ldr	r5, [pc, #44]	; (8005710 <__libc_init_array+0x40>)
 80056e2:	4c0c      	ldr	r4, [pc, #48]	; (8005714 <__libc_init_array+0x44>)
 80056e4:	f000 f818 	bl	8005718 <_init>
 80056e8:	1b64      	subs	r4, r4, r5
 80056ea:	10a4      	asrs	r4, r4, #2
 80056ec:	2600      	movs	r6, #0
 80056ee:	42a6      	cmp	r6, r4
 80056f0:	d105      	bne.n	80056fe <__libc_init_array+0x2e>
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f8:	4798      	blx	r3
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7ee      	b.n	80056dc <__libc_init_array+0xc>
 80056fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005702:	4798      	blx	r3
 8005704:	3601      	adds	r6, #1
 8005706:	e7f2      	b.n	80056ee <__libc_init_array+0x1e>
 8005708:	08018f6c 	.word	0x08018f6c
 800570c:	08018f6c 	.word	0x08018f6c
 8005710:	08018f6c 	.word	0x08018f6c
 8005714:	08018f70 	.word	0x08018f70

08005718 <_init>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	bf00      	nop
 800571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	469e      	mov	lr, r3
 8005722:	4770      	bx	lr

08005724 <_fini>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr
